// Code generated by xgen. DO NOT EDIT.

package ooxml

import (
	"encoding/xml"
	"time"
)

// CTEmpty ...
type CTEmpty struct {
	XMLName xml.Name `xml:"CT_Empty"`
}

// CTOnOff ...
type CTOnOff struct {
	XMLName xml.Name `xml:"CT_OnOff"`
	ValAttr *STOnOff `xml:"val,attr,omitempty"`
}

// STLongHexNumber ...
type STLongHexNumber []byte

// CTLongHexNumber ...
type CTLongHexNumber struct {
	XMLName xml.Name `xml:"CT_LongHexNumber"`
	ValAttr []byte   `xml:"val,attr"`
}

// STShortHexNumber ...
type STShortHexNumber []byte

// STUcharHexNumber ...
type STUcharHexNumber []byte

// CTCharset ...
type CTCharset struct {
	XMLName          xml.Name `xml:"CT_Charset"`
	ValAttr          []byte   `xml:"val,attr,omitempty"`
	CharacterSetAttr string   `xml:"characterSet,attr,omitempty"`
}

// STDecimalNumberOrPercent ...
type STDecimalNumberOrPercent struct {
	XMLName                 xml.Name `xml:"ST_DecimalNumberOrPercent"`
	STUnqualifiedPercentage *STUnqualifiedPercentage
	STPercentage            string
}

// STUnqualifiedPercentage ...
type STUnqualifiedPercentage int

// STDecimalNumber ...
type STDecimalNumber int

// CTDecimalNumber ...
type CTDecimalNumber struct {
	XMLName xml.Name `xml:"CT_DecimalNumber"`
	ValAttr int      `xml:"val,attr"`
}

// CTUnsignedDecimalNumber ...
type CTUnsignedDecimalNumber struct {
	XMLName xml.Name `xml:"CT_UnsignedDecimalNumber"`
	ValAttr uint64   `xml:"val,attr"`
}

// CTDecimalNumberOrPrecent ...
type CTDecimalNumberOrPrecent struct {
	XMLName xml.Name                  `xml:"CT_DecimalNumberOrPrecent"`
	ValAttr *STDecimalNumberOrPercent `xml:"val,attr"`
}

// CTTwipsMeasure ...
type CTTwipsMeasure struct {
	XMLName xml.Name        `xml:"CT_TwipsMeasure"`
	ValAttr *STTwipsMeasure `xml:"val,attr"`
}

// STSignedTwipsMeasure ...
type STSignedTwipsMeasure struct {
	XMLName            xml.Name `xml:"ST_SignedTwipsMeasure"`
	Integer            int
	STUniversalMeasure string
}

// CTSignedTwipsMeasure ...
type CTSignedTwipsMeasure struct {
	XMLName xml.Name              `xml:"CT_SignedTwipsMeasure"`
	ValAttr *STSignedTwipsMeasure `xml:"val,attr"`
}

// STPixelsMeasure ...
type STPixelsMeasure uint64

// CTPixelsMeasure ...
type CTPixelsMeasure struct {
	XMLName xml.Name `xml:"CT_PixelsMeasure"`
	ValAttr uint64   `xml:"val,attr"`
}

// STHpsMeasure ...
type STHpsMeasure struct {
	XMLName                    xml.Name `xml:"ST_HpsMeasure"`
	STUnsignedDecimalNumber    uint64
	STPositiveUniversalMeasure string
}

// CTHpsMeasure ...
type CTHpsMeasure struct {
	XMLName xml.Name      `xml:"CT_HpsMeasure"`
	ValAttr *STHpsMeasure `xml:"val,attr"`
}

// STSignedHpsMeasure ...
type STSignedHpsMeasure struct {
	XMLName            xml.Name `xml:"ST_SignedHpsMeasure"`
	Integer            int
	STUniversalMeasure string
}

// CTSignedHpsMeasure ...
type CTSignedHpsMeasure struct {
	XMLName xml.Name            `xml:"CT_SignedHpsMeasure"`
	ValAttr *STSignedHpsMeasure `xml:"val,attr"`
}

// STDateTime ...
type STDateTime time.Time

// STMacroName ...
type STMacroName string

// CTMacroName ...
type CTMacroName struct {
	XMLName xml.Name `xml:"CT_MacroName"`
	ValAttr string   `xml:"val,attr"`
}

// STEighthPointMeasure ...
type STEighthPointMeasure uint64

// STPointMeasure ...
type STPointMeasure uint64

// CTString ...
type CTString struct {
	XMLName xml.Name `xml:"CT_String"`
	ValAttr string   `xml:"val,attr"`
}

// STTextScale ...
type STTextScale struct {
	XMLName            xml.Name `xml:"ST_TextScale"`
	STTextScalePercent *STTextScalePercent
	STTextScaleDecimal *STTextScaleDecimal
}

// STTextScalePercent ...
// Pattern: 0*(600|([0-5]?[0-9]?[0-9]))%
type STTextScalePercent string

// STTextScaleDecimal ...
type STTextScaleDecimal int

// CTTextScale ...
type CTTextScale struct {
	XMLName xml.Name     `xml:"CT_TextScale"`
	ValAttr *STTextScale `xml:"val,attr,omitempty"`
}

// STHighlightColor ...
type STHighlightColor string

const (
	STHighlightColor_black       STHighlightColor = "black"
	STHighlightColor_blue        STHighlightColor = "blue"
	STHighlightColor_cyan        STHighlightColor = "cyan"
	STHighlightColor_green       STHighlightColor = "green"
	STHighlightColor_magenta     STHighlightColor = "magenta"
	STHighlightColor_red         STHighlightColor = "red"
	STHighlightColor_yellow      STHighlightColor = "yellow"
	STHighlightColor_white       STHighlightColor = "white"
	STHighlightColor_darkBlue    STHighlightColor = "darkBlue"
	STHighlightColor_darkCyan    STHighlightColor = "darkCyan"
	STHighlightColor_darkGreen   STHighlightColor = "darkGreen"
	STHighlightColor_darkMagenta STHighlightColor = "darkMagenta"
	STHighlightColor_darkRed     STHighlightColor = "darkRed"
	STHighlightColor_darkYellow  STHighlightColor = "darkYellow"
	STHighlightColor_darkGray    STHighlightColor = "darkGray"
	STHighlightColor_lightGray   STHighlightColor = "lightGray"
	STHighlightColor_none        STHighlightColor = "none"
)

// CTHighlight ...
type CTHighlight struct {
	XMLName xml.Name `xml:"CT_Highlight"`
	ValAttr string   `xml:"val,attr"`
}

// STHexColorAuto ...
type STHexColorAuto string

const (
	STHexColorAuto_auto STHexColorAuto = "auto"
)

// STHexColor ...
type STHexColor struct {
	XMLName        xml.Name `xml:"ST_HexColor"`
	STHexColorAuto string
	STHexColorRGB  []byte
}

// CTColor ...
type CTColor struct {
	XMLName        xml.Name    `xml:"CT_Color"`
	ValAttr        *STHexColor `xml:"val,attr"`
	ThemeColorAttr string      `xml:"themeColor,attr,omitempty"`
	ThemeTintAttr  []byte      `xml:"themeTint,attr,omitempty"`
	ThemeShadeAttr []byte      `xml:"themeShade,attr,omitempty"`
}

// CTLang ...
type CTLang struct {
	XMLName xml.Name `xml:"CT_Lang"`
	ValAttr string   `xml:"val,attr"`
}

// CTGuid ...
type CTGuid struct {
	XMLName xml.Name `xml:"CT_Guid"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// STUnderline ...
type STUnderline string

const (
	STUnderline_single          STUnderline = "single"
	STUnderline_words           STUnderline = "words"
	STUnderline_double          STUnderline = "double"
	STUnderline_thick           STUnderline = "thick"
	STUnderline_dotted          STUnderline = "dotted"
	STUnderline_dottedHeavy     STUnderline = "dottedHeavy"
	STUnderline_dash            STUnderline = "dash"
	STUnderline_dashedHeavy     STUnderline = "dashedHeavy"
	STUnderline_dashLong        STUnderline = "dashLong"
	STUnderline_dashLongHeavy   STUnderline = "dashLongHeavy"
	STUnderline_dotDash         STUnderline = "dotDash"
	STUnderline_dashDotHeavy    STUnderline = "dashDotHeavy"
	STUnderline_dotDotDash      STUnderline = "dotDotDash"
	STUnderline_dashDotDotHeavy STUnderline = "dashDotDotHeavy"
	STUnderline_wave            STUnderline = "wave"
	STUnderline_wavyHeavy       STUnderline = "wavyHeavy"
	STUnderline_wavyDouble      STUnderline = "wavyDouble"
	STUnderline_none            STUnderline = "none"
)

// CTUnderline ...
type CTUnderline struct {
	XMLName        xml.Name    `xml:"CT_Underline"`
	ValAttr        string      `xml:"val,attr,omitempty"`
	ColorAttr      *STHexColor `xml:"color,attr,omitempty"`
	ThemeColorAttr string      `xml:"themeColor,attr,omitempty"`
	ThemeTintAttr  []byte      `xml:"themeTint,attr,omitempty"`
	ThemeShadeAttr []byte      `xml:"themeShade,attr,omitempty"`
}

// STTextEffect ...
type STTextEffect string

const (
	STTextEffect_blinkBackground STTextEffect = "blinkBackground"
	STTextEffect_lights          STTextEffect = "lights"
	STTextEffect_antsBlack       STTextEffect = "antsBlack"
	STTextEffect_antsRed         STTextEffect = "antsRed"
	STTextEffect_shimmer         STTextEffect = "shimmer"
	STTextEffect_sparkle         STTextEffect = "sparkle"
	STTextEffect_none            STTextEffect = "none"
)

// CTTextEffect ...
type CTTextEffect struct {
	XMLName xml.Name `xml:"CT_TextEffect"`
	ValAttr string   `xml:"val,attr"`
}

// STBorder ...
type STBorder string

const (
	STBorder_nil                    STBorder = "nil"
	STBorder_none                   STBorder = "none"
	STBorder_single                 STBorder = "single"
	STBorder_thick                  STBorder = "thick"
	STBorder_double                 STBorder = "double"
	STBorder_dotted                 STBorder = "dotted"
	STBorder_dashed                 STBorder = "dashed"
	STBorder_dotDash                STBorder = "dotDash"
	STBorder_dotDotDash             STBorder = "dotDotDash"
	STBorder_triple                 STBorder = "triple"
	STBorder_thinThickSmallGap      STBorder = "thinThickSmallGap"
	STBorder_thickThinSmallGap      STBorder = "thickThinSmallGap"
	STBorder_thinThickThinSmallGap  STBorder = "thinThickThinSmallGap"
	STBorder_thinThickMediumGap     STBorder = "thinThickMediumGap"
	STBorder_thickThinMediumGap     STBorder = "thickThinMediumGap"
	STBorder_thinThickThinMediumGap STBorder = "thinThickThinMediumGap"
	STBorder_thinThickLargeGap      STBorder = "thinThickLargeGap"
	STBorder_thickThinLargeGap      STBorder = "thickThinLargeGap"
	STBorder_thinThickThinLargeGap  STBorder = "thinThickThinLargeGap"
	STBorder_wave                   STBorder = "wave"
	STBorder_doubleWave             STBorder = "doubleWave"
	STBorder_dashSmallGap           STBorder = "dashSmallGap"
	STBorder_dashDotStroked         STBorder = "dashDotStroked"
	STBorder_threeDEmboss           STBorder = "threeDEmboss"
	STBorder_threeDEngrave          STBorder = "threeDEngrave"
	STBorder_outset                 STBorder = "outset"
	STBorder_inset                  STBorder = "inset"
	STBorder_apples                 STBorder = "apples"
	STBorder_archedScallops         STBorder = "archedScallops"
	STBorder_babyPacifier           STBorder = "babyPacifier"
	STBorder_babyRattle             STBorder = "babyRattle"
	STBorder_balloons3Colors        STBorder = "balloons3Colors"
	STBorder_balloonsHotAir         STBorder = "balloonsHotAir"
	STBorder_basicBlackDashes       STBorder = "basicBlackDashes"
	STBorder_basicBlackDots         STBorder = "basicBlackDots"
	STBorder_basicBlackSquares      STBorder = "basicBlackSquares"
	STBorder_basicThinLines         STBorder = "basicThinLines"
	STBorder_basicWhiteDashes       STBorder = "basicWhiteDashes"
	STBorder_basicWhiteDots         STBorder = "basicWhiteDots"
	STBorder_basicWhiteSquares      STBorder = "basicWhiteSquares"
	STBorder_basicWideInline        STBorder = "basicWideInline"
	STBorder_basicWideMidline       STBorder = "basicWideMidline"
	STBorder_basicWideOutline       STBorder = "basicWideOutline"
	STBorder_bats                   STBorder = "bats"
	STBorder_birds                  STBorder = "birds"
	STBorder_birdsFlight            STBorder = "birdsFlight"
	STBorder_cabins                 STBorder = "cabins"
	STBorder_cakeSlice              STBorder = "cakeSlice"
	STBorder_candyCorn              STBorder = "candyCorn"
	STBorder_celticKnotwork         STBorder = "celticKnotwork"
	STBorder_certificateBanner      STBorder = "certificateBanner"
	STBorder_chainLink              STBorder = "chainLink"
	STBorder_champagneBottle        STBorder = "champagneBottle"
	STBorder_checkedBarBlack        STBorder = "checkedBarBlack"
	STBorder_checkedBarColor        STBorder = "checkedBarColor"
	STBorder_checkered              STBorder = "checkered"
	STBorder_christmasTree          STBorder = "christmasTree"
	STBorder_circlesLines           STBorder = "circlesLines"
	STBorder_circlesRectangles      STBorder = "circlesRectangles"
	STBorder_classicalWave          STBorder = "classicalWave"
	STBorder_clocks                 STBorder = "clocks"
	STBorder_compass                STBorder = "compass"
	STBorder_confetti               STBorder = "confetti"
	STBorder_confettiGrays          STBorder = "confettiGrays"
	STBorder_confettiOutline        STBorder = "confettiOutline"
	STBorder_confettiStreamers      STBorder = "confettiStreamers"
	STBorder_confettiWhite          STBorder = "confettiWhite"
	STBorder_cornerTriangles        STBorder = "cornerTriangles"
	STBorder_couponCutoutDashes     STBorder = "couponCutoutDashes"
	STBorder_couponCutoutDots       STBorder = "couponCutoutDots"
	STBorder_crazyMaze              STBorder = "crazyMaze"
	STBorder_creaturesButterfly     STBorder = "creaturesButterfly"
	STBorder_creaturesFish          STBorder = "creaturesFish"
	STBorder_creaturesInsects       STBorder = "creaturesInsects"
	STBorder_creaturesLadyBug       STBorder = "creaturesLadyBug"
	STBorder_crossStitch            STBorder = "crossStitch"
	STBorder_cup                    STBorder = "cup"
	STBorder_decoArch               STBorder = "decoArch"
	STBorder_decoArchColor          STBorder = "decoArchColor"
	STBorder_decoBlocks             STBorder = "decoBlocks"
	STBorder_diamondsGray           STBorder = "diamondsGray"
	STBorder_doubleD                STBorder = "doubleD"
	STBorder_doubleDiamonds         STBorder = "doubleDiamonds"
	STBorder_earth1                 STBorder = "earth1"
	STBorder_earth2                 STBorder = "earth2"
	STBorder_earth3                 STBorder = "earth3"
	STBorder_eclipsingSquares1      STBorder = "eclipsingSquares1"
	STBorder_eclipsingSquares2      STBorder = "eclipsingSquares2"
	STBorder_eggsBlack              STBorder = "eggsBlack"
	STBorder_fans                   STBorder = "fans"
	STBorder_film                   STBorder = "film"
	STBorder_firecrackers           STBorder = "firecrackers"
	STBorder_flowersBlockPrint      STBorder = "flowersBlockPrint"
	STBorder_flowersDaisies         STBorder = "flowersDaisies"
	STBorder_flowersModern1         STBorder = "flowersModern1"
	STBorder_flowersModern2         STBorder = "flowersModern2"
	STBorder_flowersPansy           STBorder = "flowersPansy"
	STBorder_flowersRedRose         STBorder = "flowersRedRose"
	STBorder_flowersRoses           STBorder = "flowersRoses"
	STBorder_flowersTeacup          STBorder = "flowersTeacup"
	STBorder_flowersTiny            STBorder = "flowersTiny"
	STBorder_gems                   STBorder = "gems"
	STBorder_gingerbreadMan         STBorder = "gingerbreadMan"
	STBorder_gradient               STBorder = "gradient"
	STBorder_handmade1              STBorder = "handmade1"
	STBorder_handmade2              STBorder = "handmade2"
	STBorder_heartBalloon           STBorder = "heartBalloon"
	STBorder_heartGray              STBorder = "heartGray"
	STBorder_hearts                 STBorder = "hearts"
	STBorder_heebieJeebies          STBorder = "heebieJeebies"
	STBorder_holly                  STBorder = "holly"
	STBorder_houseFunky             STBorder = "houseFunky"
	STBorder_hypnotic               STBorder = "hypnotic"
	STBorder_iceCreamCones          STBorder = "iceCreamCones"
	STBorder_lightBulb              STBorder = "lightBulb"
	STBorder_lightning1             STBorder = "lightning1"
	STBorder_lightning2             STBorder = "lightning2"
	STBorder_mapPins                STBorder = "mapPins"
	STBorder_mapleLeaf              STBorder = "mapleLeaf"
	STBorder_mapleMuffins           STBorder = "mapleMuffins"
	STBorder_marquee                STBorder = "marquee"
	STBorder_marqueeToothed         STBorder = "marqueeToothed"
	STBorder_moons                  STBorder = "moons"
	STBorder_mosaic                 STBorder = "mosaic"
	STBorder_musicNotes             STBorder = "musicNotes"
	STBorder_northwest              STBorder = "northwest"
	STBorder_ovals                  STBorder = "ovals"
	STBorder_packages               STBorder = "packages"
	STBorder_palmsBlack             STBorder = "palmsBlack"
	STBorder_palmsColor             STBorder = "palmsColor"
	STBorder_paperClips             STBorder = "paperClips"
	STBorder_papyrus                STBorder = "papyrus"
	STBorder_partyFavor             STBorder = "partyFavor"
	STBorder_partyGlass             STBorder = "partyGlass"
	STBorder_pencils                STBorder = "pencils"
	STBorder_people                 STBorder = "people"
	STBorder_peopleWaving           STBorder = "peopleWaving"
	STBorder_peopleHats             STBorder = "peopleHats"
	STBorder_poinsettias            STBorder = "poinsettias"
	STBorder_postageStamp           STBorder = "postageStamp"
	STBorder_pumpkin1               STBorder = "pumpkin1"
	STBorder_pushPinNote2           STBorder = "pushPinNote2"
	STBorder_pushPinNote1           STBorder = "pushPinNote1"
	STBorder_pyramids               STBorder = "pyramids"
	STBorder_pyramidsAbove          STBorder = "pyramidsAbove"
	STBorder_quadrants              STBorder = "quadrants"
	STBorder_rings                  STBorder = "rings"
	STBorder_safari                 STBorder = "safari"
	STBorder_sawtooth               STBorder = "sawtooth"
	STBorder_sawtoothGray           STBorder = "sawtoothGray"
	STBorder_scaredCat              STBorder = "scaredCat"
	STBorder_seattle                STBorder = "seattle"
	STBorder_shadowedSquares        STBorder = "shadowedSquares"
	STBorder_sharksTeeth            STBorder = "sharksTeeth"
	STBorder_shorebirdTracks        STBorder = "shorebirdTracks"
	STBorder_skyrocket              STBorder = "skyrocket"
	STBorder_snowflakeFancy         STBorder = "snowflakeFancy"
	STBorder_snowflakes             STBorder = "snowflakes"
	STBorder_sombrero               STBorder = "sombrero"
	STBorder_southwest              STBorder = "southwest"
	STBorder_stars                  STBorder = "stars"
	STBorder_starsTop               STBorder = "starsTop"
	STBorder_stars3d                STBorder = "stars3d"
	STBorder_starsBlack             STBorder = "starsBlack"
	STBorder_starsShadowed          STBorder = "starsShadowed"
	STBorder_sun                    STBorder = "sun"
	STBorder_swirligig              STBorder = "swirligig"
	STBorder_tornPaper              STBorder = "tornPaper"
	STBorder_tornPaperBlack         STBorder = "tornPaperBlack"
	STBorder_trees                  STBorder = "trees"
	STBorder_triangleParty          STBorder = "triangleParty"
	STBorder_triangles              STBorder = "triangles"
	STBorder_triangle1              STBorder = "triangle1"
	STBorder_triangle2              STBorder = "triangle2"
	STBorder_triangleCircle1        STBorder = "triangleCircle1"
	STBorder_triangleCircle2        STBorder = "triangleCircle2"
	STBorder_shapes1                STBorder = "shapes1"
	STBorder_shapes2                STBorder = "shapes2"
	STBorder_twistedLines1          STBorder = "twistedLines1"
	STBorder_twistedLines2          STBorder = "twistedLines2"
	STBorder_vine                   STBorder = "vine"
	STBorder_waveline               STBorder = "waveline"
	STBorder_weavingAngles          STBorder = "weavingAngles"
	STBorder_weavingBraid           STBorder = "weavingBraid"
	STBorder_weavingRibbon          STBorder = "weavingRibbon"
	STBorder_weavingStrips          STBorder = "weavingStrips"
	STBorder_whiteFlowers           STBorder = "whiteFlowers"
	STBorder_woodwork               STBorder = "woodwork"
	STBorder_xIllusions             STBorder = "xIllusions"
	STBorder_zanyTriangles          STBorder = "zanyTriangles"
	STBorder_zigZag                 STBorder = "zigZag"
	STBorder_zigZagStitch           STBorder = "zigZagStitch"
	STBorder_custom                 STBorder = "custom"
)

// CTBorder ...
type CTBorder struct {
	XMLName        xml.Name    `xml:"CT_Border"`
	ValAttr        string      `xml:"val,attr"`
	ColorAttr      *STHexColor `xml:"color,attr,omitempty"`
	ThemeColorAttr string      `xml:"themeColor,attr,omitempty"`
	ThemeTintAttr  []byte      `xml:"themeTint,attr,omitempty"`
	ThemeShadeAttr []byte      `xml:"themeShade,attr,omitempty"`
	SzAttr         uint64      `xml:"sz,attr,omitempty"`
	SpaceAttr      uint64      `xml:"space,attr,omitempty"`
	ShadowAttr     *STOnOff    `xml:"shadow,attr,omitempty"`
	FrameAttr      *STOnOff    `xml:"frame,attr,omitempty"`
}

// STShd ...
type STShd string

const (
	STShd_nil                   STShd = "nil"
	STShd_clear                 STShd = "clear"
	STShd_solid                 STShd = "solid"
	STShd_horzStripe            STShd = "horzStripe"
	STShd_vertStripe            STShd = "vertStripe"
	STShd_reverseDiagStripe     STShd = "reverseDiagStripe"
	STShd_diagStripe            STShd = "diagStripe"
	STShd_horzCross             STShd = "horzCross"
	STShd_diagCross             STShd = "diagCross"
	STShd_thinHorzStripe        STShd = "thinHorzStripe"
	STShd_thinVertStripe        STShd = "thinVertStripe"
	STShd_thinReverseDiagStripe STShd = "thinReverseDiagStripe"
	STShd_thinDiagStripe        STShd = "thinDiagStripe"
	STShd_thinHorzCross         STShd = "thinHorzCross"
	STShd_thinDiagCross         STShd = "thinDiagCross"
	STShd_pct5                  STShd = "pct5"
	STShd_pct10                 STShd = "pct10"
	STShd_pct12                 STShd = "pct12"
	STShd_pct15                 STShd = "pct15"
	STShd_pct20                 STShd = "pct20"
	STShd_pct25                 STShd = "pct25"
	STShd_pct30                 STShd = "pct30"
	STShd_pct35                 STShd = "pct35"
	STShd_pct37                 STShd = "pct37"
	STShd_pct40                 STShd = "pct40"
	STShd_pct45                 STShd = "pct45"
	STShd_pct50                 STShd = "pct50"
	STShd_pct55                 STShd = "pct55"
	STShd_pct60                 STShd = "pct60"
	STShd_pct62                 STShd = "pct62"
	STShd_pct65                 STShd = "pct65"
	STShd_pct70                 STShd = "pct70"
	STShd_pct75                 STShd = "pct75"
	STShd_pct80                 STShd = "pct80"
	STShd_pct85                 STShd = "pct85"
	STShd_pct87                 STShd = "pct87"
	STShd_pct90                 STShd = "pct90"
	STShd_pct95                 STShd = "pct95"
)

// CTShd ...
type CTShd struct {
	XMLName            xml.Name    `xml:"CT_Shd"`
	ValAttr            string      `xml:"val,attr"`
	ColorAttr          *STHexColor `xml:"color,attr,omitempty"`
	ThemeColorAttr     string      `xml:"themeColor,attr,omitempty"`
	ThemeTintAttr      []byte      `xml:"themeTint,attr,omitempty"`
	ThemeShadeAttr     []byte      `xml:"themeShade,attr,omitempty"`
	FillAttr           *STHexColor `xml:"fill,attr,omitempty"`
	ThemeFillAttr      string      `xml:"themeFill,attr,omitempty"`
	ThemeFillTintAttr  []byte      `xml:"themeFillTint,attr,omitempty"`
	ThemeFillShadeAttr []byte      `xml:"themeFillShade,attr,omitempty"`
}

// CTVerticalAlignRun ...
type CTVerticalAlignRun struct {
	XMLName xml.Name `xml:"CT_VerticalAlignRun"`
	ValAttr string   `xml:"val,attr"`
}

// CTFitText ...
type CTFitText struct {
	XMLName xml.Name        `xml:"CT_FitText"`
	ValAttr *STTwipsMeasure `xml:"val,attr"`
	IdAttr  int             `xml:"id,attr,omitempty"`
}

// STEm ...
type STEm string

const (
	STEm_none     STEm = "none"
	STEm_dot      STEm = "dot"
	STEm_comma    STEm = "comma"
	STEm_circle   STEm = "circle"
	STEm_underDot STEm = "underDot"
)

// CTEm ...
type CTEm struct {
	XMLName xml.Name `xml:"CT_Em"`
	ValAttr string   `xml:"val,attr"`
}

// CTLanguage ...
type CTLanguage struct {
	XMLName      xml.Name `xml:"CT_Language"`
	ValAttr      string   `xml:"val,attr,omitempty"`
	EastAsiaAttr string   `xml:"eastAsia,attr,omitempty"`
	BidiAttr     string   `xml:"bidi,attr,omitempty"`
}

// STCombineBrackets ...
type STCombineBrackets string

const (
	STCombineBrackets_none   STCombineBrackets = "none"
	STCombineBrackets_round  STCombineBrackets = "round"
	STCombineBrackets_square STCombineBrackets = "square"
	STCombineBrackets_angle  STCombineBrackets = "angle"
	STCombineBrackets_curly  STCombineBrackets = "curly"
)

// CTEastAsianLayout ...
type CTEastAsianLayout struct {
	XMLName             xml.Name `xml:"CT_EastAsianLayout"`
	IdAttr              int      `xml:"id,attr,omitempty"`
	CombineAttr         *STOnOff `xml:"combine,attr,omitempty"`
	CombineBracketsAttr string   `xml:"combineBrackets,attr,omitempty"`
	VertAttr            *STOnOff `xml:"vert,attr,omitempty"`
	VertCompressAttr    *STOnOff `xml:"vertCompress,attr,omitempty"`
}

// STHeightRule ...
type STHeightRule string

const (
	STHeightRule_auto    STHeightRule = "auto"
	STHeightRule_exact   STHeightRule = "exact"
	STHeightRule_atLeast STHeightRule = "atLeast"
)

// STWrap ...
type STWrap string

const (
	STWrap_auto      STWrap = "auto"
	STWrap_notBeside STWrap = "notBeside"
	STWrap_around    STWrap = "around"
	STWrap_tight     STWrap = "tight"
	STWrap_through   STWrap = "through"
	STWrap_none      STWrap = "none"
)

// STVAnchor ...
type STVAnchor string

const (
	STVAnchor_text   STVAnchor = "text"
	STVAnchor_margin STVAnchor = "margin"
	STVAnchor_page   STVAnchor = "page"
)

// STHAnchor ...
type STHAnchor string

const (
	STHAnchor_text   STHAnchor = "text"
	STHAnchor_margin STHAnchor = "margin"
	STHAnchor_page   STHAnchor = "page"
)

// STDropCap ...
type STDropCap string

const (
	STDropCap_none   STDropCap = "none"
	STDropCap_drop   STDropCap = "drop"
	STDropCap_margin STDropCap = "margin"
)

// CTFramePr ...
type CTFramePr struct {
	XMLName        xml.Name              `xml:"CT_FramePr"`
	DropCapAttr    string                `xml:"dropCap,attr,omitempty"`
	LinesAttr      int                   `xml:"lines,attr,omitempty"`
	WAttr          *STTwipsMeasure       `xml:"w,attr,omitempty"`
	HAttr          *STTwipsMeasure       `xml:"h,attr,omitempty"`
	VSpaceAttr     *STTwipsMeasure       `xml:"vSpace,attr,omitempty"`
	HSpaceAttr     *STTwipsMeasure       `xml:"hSpace,attr,omitempty"`
	WrapAttr       string                `xml:"wrap,attr,omitempty"`
	HAnchorAttr    string                `xml:"hAnchor,attr,omitempty"`
	VAnchorAttr    string                `xml:"vAnchor,attr,omitempty"`
	XAttr          *STSignedTwipsMeasure `xml:"x,attr,omitempty"`
	XAlignAttr     string                `xml:"xAlign,attr,omitempty"`
	YAttr          *STSignedTwipsMeasure `xml:"y,attr,omitempty"`
	YAlignAttr     string                `xml:"yAlign,attr,omitempty"`
	HRuleAttr      string                `xml:"hRule,attr,omitempty"`
	AnchorLockAttr *STOnOff              `xml:"anchorLock,attr,omitempty"`
}

// STTabJc ...
type STTabJc string

const (
	STTabJc_clear   STTabJc = "clear"
	STTabJc_start   STTabJc = "start"
	STTabJc_center  STTabJc = "center"
	STTabJc_end     STTabJc = "end"
	STTabJc_decimal STTabJc = "decimal"
	STTabJc_bar     STTabJc = "bar"
	STTabJc_num     STTabJc = "num"
	STTabJc_left    STTabJc = "left"
	STTabJc_right   STTabJc = "right"
)

// STTabTlc ...
type STTabTlc string

const (
	STTabTlc_none       STTabTlc = "none"
	STTabTlc_dot        STTabTlc = "dot"
	STTabTlc_hyphen     STTabTlc = "hyphen"
	STTabTlc_underscore STTabTlc = "underscore"
	STTabTlc_heavy      STTabTlc = "heavy"
	STTabTlc_middleDot  STTabTlc = "middleDot"
)

// CTTabStop ...
type CTTabStop struct {
	XMLName    xml.Name              `xml:"CT_TabStop"`
	ValAttr    string                `xml:"val,attr"`
	LeaderAttr string                `xml:"leader,attr,omitempty"`
	PosAttr    *STSignedTwipsMeasure `xml:"pos,attr"`
}

// STLineSpacingRule ...
type STLineSpacingRule string

const (
	STLineSpacingRule_auto    STLineSpacingRule = "auto"
	STLineSpacingRule_exact   STLineSpacingRule = "exact"
	STLineSpacingRule_atLeast STLineSpacingRule = "atLeast"
)

// CTSpacing ...
type CTSpacing struct {
	XMLName               xml.Name              `xml:"CT_Spacing"`
	BeforeAttr            *STTwipsMeasure       `xml:"before,attr,omitempty"`
	BeforeLinesAttr       int                   `xml:"beforeLines,attr,omitempty"`
	BeforeAutospacingAttr *STOnOff              `xml:"beforeAutospacing,attr,omitempty"`
	AfterAttr             *STTwipsMeasure       `xml:"after,attr,omitempty"`
	AfterLinesAttr        int                   `xml:"afterLines,attr,omitempty"`
	AfterAutospacingAttr  *STOnOff              `xml:"afterAutospacing,attr,omitempty"`
	LineAttr              *STSignedTwipsMeasure `xml:"line,attr,omitempty"`
	LineRuleAttr          string                `xml:"lineRule,attr,omitempty"`
}

// CTInd ...
type CTInd struct {
	XMLName            xml.Name              `xml:"CT_Ind"`
	StartAttr          *STSignedTwipsMeasure `xml:"start,attr,omitempty"`
	StartCharsAttr     int                   `xml:"startChars,attr,omitempty"`
	EndAttr            *STSignedTwipsMeasure `xml:"end,attr,omitempty"`
	EndCharsAttr       int                   `xml:"endChars,attr,omitempty"`
	LeftAttr           *STSignedTwipsMeasure `xml:"left,attr,omitempty"`
	LeftCharsAttr      int                   `xml:"leftChars,attr,omitempty"`
	RightAttr          *STSignedTwipsMeasure `xml:"right,attr,omitempty"`
	RightCharsAttr     int                   `xml:"rightChars,attr,omitempty"`
	HangingAttr        *STTwipsMeasure       `xml:"hanging,attr,omitempty"`
	HangingCharsAttr   int                   `xml:"hangingChars,attr,omitempty"`
	FirstLineAttr      *STTwipsMeasure       `xml:"firstLine,attr,omitempty"`
	FirstLineCharsAttr int                   `xml:"firstLineChars,attr,omitempty"`
}

// STJc ...
type STJc string

const (
	STJc_start          STJc = "start"
	STJc_center         STJc = "center"
	STJc_end            STJc = "end"
	STJc_both           STJc = "both"
	STJc_mediumKashida  STJc = "mediumKashida"
	STJc_distribute     STJc = "distribute"
	STJc_numTab         STJc = "numTab"
	STJc_highKashida    STJc = "highKashida"
	STJc_lowKashida     STJc = "lowKashida"
	STJc_thaiDistribute STJc = "thaiDistribute"
	STJc_left           STJc = "left"
	STJc_right          STJc = "right"
)

// STJcTable ...
type STJcTable string

const (
	STJcTable_center STJcTable = "center"
	STJcTable_end    STJcTable = "end"
	STJcTable_left   STJcTable = "left"
	STJcTable_right  STJcTable = "right"
	STJcTable_start  STJcTable = "start"
)

// CTJc ...
type CTJc struct {
	XMLName xml.Name `xml:"CT_Jc"`
	ValAttr string   `xml:"val,attr"`
}

// CTJcTable ...
type CTJcTable struct {
	XMLName xml.Name `xml:"CT_JcTable"`
	ValAttr string   `xml:"val,attr"`
}

// STView ...
type STView string

const (
	STView_none        STView = "none"
	STView_print       STView = "print"
	STView_outline     STView = "outline"
	STView_masterPages STView = "masterPages"
	STView_normal      STView = "normal"
	STView_web         STView = "web"
)

// CTView ...
type CTView struct {
	XMLName xml.Name `xml:"CT_View"`
	ValAttr string   `xml:"val,attr"`
}

// STZoom ...
type STZoom string

const (
	STZoom_none     STZoom = "none"
	STZoom_fullPage STZoom = "fullPage"
	STZoom_bestFit  STZoom = "bestFit"
	STZoom_textFit  STZoom = "textFit"
)

// CTZoom ...
type CTZoom struct {
	XMLName     xml.Name                  `xml:"CT_Zoom"`
	ValAttr     string                    `xml:"val,attr,omitempty"`
	PercentAttr *STDecimalNumberOrPercent `xml:"percent,attr"`
}

// CTWritingStyle ...
type CTWritingStyle struct {
	XMLName        xml.Name `xml:"CT_WritingStyle"`
	LangAttr       string   `xml:"lang,attr"`
	VendorIDAttr   string   `xml:"vendorID,attr"`
	DllVersionAttr string   `xml:"dllVersion,attr"`
	NlCheckAttr    *STOnOff `xml:"nlCheck,attr,omitempty"`
	CheckStyleAttr *STOnOff `xml:"checkStyle,attr"`
	AppNameAttr    string   `xml:"appName,attr"`
}

// STProof ...
type STProof string

const (
	STProof_clean STProof = "clean"
	STProof_dirty STProof = "dirty"
)

// CTProof ...
type CTProof struct {
	XMLName      xml.Name `xml:"CT_Proof"`
	SpellingAttr string   `xml:"spelling,attr,omitempty"`
	GrammarAttr  string   `xml:"grammar,attr,omitempty"`
}

// STDocType ...
type STDocType string

// CTDocType ...
type CTDocType struct {
	XMLName xml.Name `xml:"CT_DocType"`
	ValAttr string   `xml:"val,attr"`
}

// STDocProtect ...
type STDocProtect string

const (
	STDocProtect_none           STDocProtect = "none"
	STDocProtect_readOnly       STDocProtect = "readOnly"
	STDocProtect_comments       STDocProtect = "comments"
	STDocProtect_trackedChanges STDocProtect = "trackedChanges"
	STDocProtect_forms          STDocProtect = "forms"
)

// AGPassword ...
type AGPassword struct {
	XMLName           xml.Name `xml:"AG_Password"`
	AlgorithmNameAttr string   `xml:"algorithmName,attr,omitempty"`
	HashValueAttr     []byte   `xml:"hashValue,attr,omitempty"`
	SaltValueAttr     []byte   `xml:"saltValue,attr,omitempty"`
	SpinCountAttr     int      `xml:"spinCount,attr,omitempty"`
}

// AGTransitionalPassword ...
type AGTransitionalPassword struct {
	XMLName                        xml.Name `xml:"AG_TransitionalPassword"`
	CryptProviderTypeAttr          string   `xml:"cryptProviderType,attr,omitempty"`
	CryptAlgorithmClassAttr        string   `xml:"cryptAlgorithmClass,attr,omitempty"`
	CryptAlgorithmTypeAttr         string   `xml:"cryptAlgorithmType,attr,omitempty"`
	CryptAlgorithmSidAttr          int      `xml:"cryptAlgorithmSid,attr,omitempty"`
	CryptSpinCountAttr             int      `xml:"cryptSpinCount,attr,omitempty"`
	CryptProviderAttr              string   `xml:"cryptProvider,attr,omitempty"`
	AlgIdExtAttr                   []byte   `xml:"algIdExt,attr,omitempty"`
	AlgIdExtSourceAttr             string   `xml:"algIdExtSource,attr,omitempty"`
	CryptProviderTypeExtAttr       []byte   `xml:"cryptProviderTypeExt,attr,omitempty"`
	CryptProviderTypeExtSourceAttr string   `xml:"cryptProviderTypeExtSource,attr,omitempty"`
	HashAttr                       []byte   `xml:"hash,attr,omitempty"`
	SaltAttr                       []byte   `xml:"salt,attr,omitempty"`
}

// CTDocProtect ...
type CTDocProtect struct {
	XMLName                xml.Name `xml:"CT_DocProtect"`
	AGPassword             *AGPassword
	AGTransitionalPassword *AGTransitionalPassword
	EditAttr               string   `xml:"edit,attr,omitempty"`
	FormattingAttr         *STOnOff `xml:"formatting,attr,omitempty"`
	EnforcementAttr        *STOnOff `xml:"enforcement,attr,omitempty"`
}

// STMailMergeDocType ...
type STMailMergeDocType string

const (
	STMailMergeDocType_catalog       STMailMergeDocType = "catalog"
	STMailMergeDocType_envelopes     STMailMergeDocType = "envelopes"
	STMailMergeDocType_mailingLabels STMailMergeDocType = "mailingLabels"
	STMailMergeDocType_formLetters   STMailMergeDocType = "formLetters"
	STMailMergeDocType_email         STMailMergeDocType = "email"
	STMailMergeDocType_fax           STMailMergeDocType = "fax"
)

// CTMailMergeDocType ...
type CTMailMergeDocType struct {
	XMLName xml.Name `xml:"CT_MailMergeDocType"`
	ValAttr string   `xml:"val,attr"`
}

// STMailMergeDataType ...
type STMailMergeDataType string

// CTMailMergeDataType ...
type CTMailMergeDataType struct {
	XMLName xml.Name `xml:"CT_MailMergeDataType"`
	ValAttr string   `xml:"val,attr"`
}

// STMailMergeDest ...
type STMailMergeDest string

const (
	STMailMergeDest_newDocument STMailMergeDest = "newDocument"
	STMailMergeDest_printer     STMailMergeDest = "printer"
	STMailMergeDest_email       STMailMergeDest = "email"
	STMailMergeDest_fax         STMailMergeDest = "fax"
)

// CTMailMergeDest ...
type CTMailMergeDest struct {
	XMLName xml.Name `xml:"CT_MailMergeDest"`
	ValAttr string   `xml:"val,attr"`
}

// STMailMergeOdsoFMDFieldType ...
type STMailMergeOdsoFMDFieldType string

const (
	STMailMergeOdsoFMDFieldType_null     STMailMergeOdsoFMDFieldType = "null"
	STMailMergeOdsoFMDFieldType_dbColumn STMailMergeOdsoFMDFieldType = "dbColumn"
)

// CTMailMergeOdsoFMDFieldType ...
type CTMailMergeOdsoFMDFieldType struct {
	XMLName xml.Name `xml:"CT_MailMergeOdsoFMDFieldType"`
	ValAttr string   `xml:"val,attr"`
}

// CTTrackChangesView ...
type CTTrackChangesView struct {
	XMLName            xml.Name `xml:"CT_TrackChangesView"`
	MarkupAttr         *STOnOff `xml:"markup,attr,omitempty"`
	CommentsAttr       *STOnOff `xml:"comments,attr,omitempty"`
	InsDelAttr         *STOnOff `xml:"insDel,attr,omitempty"`
	FormattingAttr     *STOnOff `xml:"formatting,attr,omitempty"`
	InkAnnotationsAttr *STOnOff `xml:"inkAnnotations,attr,omitempty"`
}

// CTKinsoku ...
type CTKinsoku struct {
	XMLName  xml.Name `xml:"CT_Kinsoku"`
	LangAttr string   `xml:"lang,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// STTextDirection ...
type STTextDirection string

const (
	STTextDirection_tb    STTextDirection = "tb"
	STTextDirection_rl    STTextDirection = "rl"
	STTextDirection_lr    STTextDirection = "lr"
	STTextDirection_tbV   STTextDirection = "tbV"
	STTextDirection_rlV   STTextDirection = "rlV"
	STTextDirection_lrV   STTextDirection = "lrV"
	STTextDirection_btLr  STTextDirection = "btLr"
	STTextDirection_lrTb  STTextDirection = "lrTb"
	STTextDirection_lrTbV STTextDirection = "lrTbV"
	STTextDirection_tbLrV STTextDirection = "tbLrV"
	STTextDirection_tbRl  STTextDirection = "tbRl"
	STTextDirection_tbRlV STTextDirection = "tbRlV"
)

// CTTextDirection ...
type CTTextDirection struct {
	XMLName xml.Name `xml:"CT_TextDirection"`
	ValAttr string   `xml:"val,attr"`
}

// STTextAlignment ...
type STTextAlignment string

const (
	STTextAlignment_top      STTextAlignment = "top"
	STTextAlignment_center   STTextAlignment = "center"
	STTextAlignment_baseline STTextAlignment = "baseline"
	STTextAlignment_bottom   STTextAlignment = "bottom"
	STTextAlignment_auto     STTextAlignment = "auto"
)

// CTTextAlignment ...
type CTTextAlignment struct {
	XMLName xml.Name `xml:"CT_TextAlignment"`
	ValAttr string   `xml:"val,attr"`
}

// STDisplacedByCustomXml ...
type STDisplacedByCustomXml string

const (
	STDisplacedByCustomXml_next STDisplacedByCustomXml = "next"
	STDisplacedByCustomXml_prev STDisplacedByCustomXml = "prev"
)

// STAnnotationVMerge ...
type STAnnotationVMerge string

const (
	STAnnotationVMerge_cont STAnnotationVMerge = "cont"
	STAnnotationVMerge_rest STAnnotationVMerge = "rest"
)

// CTMarkup ...
type CTMarkup struct {
	XMLName xml.Name `xml:"CT_Markup"`
	IdAttr  int      `xml:"id,attr"`
}

// CTTrackChange ...
type CTTrackChange struct {
	XMLName    xml.Name  `xml:"CT_TrackChange"`
	AuthorAttr string    `xml:"author,attr"`
	DateAttr   time.Time `xml:"date,attr,omitempty"`
}

// CTCellMergeTrackChange ...
type CTCellMergeTrackChange struct {
	XMLName        xml.Name `xml:"CT_CellMergeTrackChange"`
	VMergeAttr     string   `xml:"vMerge,attr,omitempty"`
	VMergeOrigAttr string   `xml:"vMergeOrig,attr,omitempty"`
}

// CTTrackChangeRange ...
type CTTrackChangeRange struct {
	XMLName                  xml.Name `xml:"CT_TrackChangeRange"`
	DisplacedByCustomXmlAttr string   `xml:"displacedByCustomXml,attr,omitempty"`
}

// CTMarkupRange ...
type CTMarkupRange struct {
	XMLName                  xml.Name `xml:"CT_MarkupRange"`
	DisplacedByCustomXmlAttr string   `xml:"displacedByCustomXml,attr,omitempty"`
}

// CTBookmarkRange ...
type CTBookmarkRange struct {
	XMLName      xml.Name `xml:"CT_BookmarkRange"`
	ColFirstAttr int      `xml:"colFirst,attr,omitempty"`
	ColLastAttr  int      `xml:"colLast,attr,omitempty"`
}

// CTBookmark ...
type CTBookmark struct {
	XMLName  xml.Name `xml:"CT_Bookmark"`
	NameAttr string   `xml:"name,attr"`
}

// CTMoveBookmark ...
type CTMoveBookmark struct {
	XMLName    xml.Name  `xml:"CT_MoveBookmark"`
	AuthorAttr string    `xml:"author,attr"`
	DateAttr   time.Time `xml:"date,attr"`
}

// CTComment ...
type CTComment struct {
	XMLName          xml.Name `xml:"CT_Comment"`
	InitialsAttr     string   `xml:"initials,attr,omitempty"`
	EGBlockLevelElts []*EGBlockLevelElts
}

// CTTrackChangeNumbering ...
type CTTrackChangeNumbering struct {
	XMLName      xml.Name `xml:"CT_TrackChangeNumbering"`
	OriginalAttr string   `xml:"original,attr,omitempty"`
}

// CTTblPrExChange ...
type CTTblPrExChange struct {
	XMLName xml.Name       `xml:"CT_TblPrExChange"`
	TblPrEx *CTTblPrExBase `xml:"tblPrEx"`
}

// CTTcPrChange ...
type CTTcPrChange struct {
	XMLName xml.Name     `xml:"CT_TcPrChange"`
	TcPr    *CTTcPrInner `xml:"tcPr"`
}

// CTTrPrChange ...
type CTTrPrChange struct {
	XMLName xml.Name    `xml:"CT_TrPrChange"`
	TrPr    *CTTrPrBase `xml:"trPr"`
}

// CTTblGridChange ...
type CTTblGridChange struct {
	XMLName xml.Name       `xml:"CT_TblGridChange"`
	TblGrid *CTTblGridBase `xml:"tblGrid"`
}

// CTTblPrChange ...
type CTTblPrChange struct {
	XMLName xml.Name     `xml:"CT_TblPrChange"`
	TblPr   *CTTblPrBase `xml:"tblPr"`
}

// CTSectPrChange ...
type CTSectPrChange struct {
	XMLName xml.Name      `xml:"CT_SectPrChange"`
	SectPr  *CTSectPrBase `xml:"sectPr"`
}

// CTPPrChange ...
type CTPPrChange struct {
	XMLName xml.Name   `xml:"CT_PPrChange"`
	PPr     *CTPPrBase `xml:"pPr"`
}

// CTRPrChange ...
type CTRPrChange struct {
	XMLName xml.Name       `xml:"CT_RPrChange"`
	RPr     *CTRPrOriginal `xml:"rPr"`
}

// CTParaRPrChange ...
type CTParaRPrChange struct {
	XMLName xml.Name           `xml:"CT_ParaRPrChange"`
	RPr     *CTParaRPrOriginal `xml:"rPr"`
}

// CTRunTrackChange ...
type CTRunTrackChange struct {
	XMLName              xml.Name `xml:"CT_RunTrackChange"`
	EGContentRunContent  *EGContentRunContent
	MEGOMathMathElements *EGOMathMathElements
}

// EGPContentMath ...
type EGPContentMath struct {
	XMLName                 xml.Name `xml:"EG_PContentMath"`
	EGPContentBase          []*EGPContentBase
	EGContentRunContentBase []*EGContentRunContentBase
}

// EGPContentBase ...
type EGPContentBase struct {
	XMLName   xml.Name `xml:"EG_PContentBase"`
	CustomXml *CTCustomXmlRun
	FldSimple []*CTSimpleField
	Hyperlink *CTHyperlink
}

// EGContentRunContentBase ...
type EGContentRunContentBase struct {
	XMLName        xml.Name `xml:"EG_ContentRunContentBase"`
	SmartTag       *CTSmartTagRun
	Sdt            *CTSdtRun
	EGRunLevelElts []*EGRunLevelElts
}

// EGCellMarkupElements ...
type EGCellMarkupElements struct {
	XMLName   xml.Name `xml:"EG_CellMarkupElements"`
	CellIns   *CTTrackChange
	CellDel   *CTTrackChange
	CellMerge *CTCellMergeTrackChange
}

// EGRangeMarkupElements ...
type EGRangeMarkupElements struct {
	XMLName                     xml.Name `xml:"EG_RangeMarkupElements"`
	BookmarkStart               *CTBookmark
	BookmarkEnd                 *CTMarkupRange
	MoveFromRangeStart          *CTMoveBookmark
	MoveFromRangeEnd            *CTMarkupRange
	MoveToRangeStart            *CTMoveBookmark
	MoveToRangeEnd              *CTMarkupRange
	CommentRangeStart           *CTMarkupRange
	CommentRangeEnd             *CTMarkupRange
	CustomXmlInsRangeStart      *CTTrackChange
	CustomXmlInsRangeEnd        *CTMarkup
	CustomXmlDelRangeStart      *CTTrackChange
	CustomXmlDelRangeEnd        *CTMarkup
	CustomXmlMoveFromRangeStart *CTTrackChange
	CustomXmlMoveFromRangeEnd   *CTMarkup
	CustomXmlMoveToRangeStart   *CTTrackChange
	CustomXmlMoveToRangeEnd     *CTMarkup
}

// CTNumPr ...
type CTNumPr struct {
	XMLName         xml.Name                `xml:"CT_NumPr"`
	Ilvl            *CTDecimalNumber        `xml:"ilvl"`
	NumId           *CTDecimalNumber        `xml:"numId"`
	NumberingChange *CTTrackChangeNumbering `xml:"numberingChange"`
	Ins             *CTTrackChange          `xml:"ins"`
}

// CTPBdr ...
type CTPBdr struct {
	XMLName xml.Name  `xml:"CT_PBdr"`
	Top     *CTBorder `xml:"top"`
	Left    *CTBorder `xml:"left"`
	Bottom  *CTBorder `xml:"bottom"`
	Right   *CTBorder `xml:"right"`
	Between *CTBorder `xml:"between"`
	Bar     *CTBorder `xml:"bar"`
}

// CTTabs ...
type CTTabs struct {
	XMLName xml.Name     `xml:"CT_Tabs"`
	Tab     []*CTTabStop `xml:"tab"`
}

// STTextboxTightWrap ...
type STTextboxTightWrap string

const (
	STTextboxTightWrap_none             STTextboxTightWrap = "none"
	STTextboxTightWrap_allLines         STTextboxTightWrap = "allLines"
	STTextboxTightWrap_firstAndLastLine STTextboxTightWrap = "firstAndLastLine"
	STTextboxTightWrap_firstLineOnly    STTextboxTightWrap = "firstLineOnly"
	STTextboxTightWrap_lastLineOnly     STTextboxTightWrap = "lastLineOnly"
)

// CTTextboxTightWrap ...
type CTTextboxTightWrap struct {
	XMLName xml.Name `xml:"CT_TextboxTightWrap"`
	ValAttr string   `xml:"val,attr"`
}

// CTPPr ...
type CTPPr struct {
	XMLName   xml.Name     `xml:"CT_PPr"`
	RPr       *CTParaRPr   `xml:"rPr"`
	SectPr    *CTSectPr    `xml:"sectPr"`
	PPrChange *CTPPrChange `xml:"pPrChange"`
}

// CTPPrBase ...
type CTPPrBase struct {
	XMLName             xml.Name            `xml:"CT_PPrBase"`
	PStyle              *CTString           `xml:"pStyle"`
	KeepNext            *CTOnOff            `xml:"keepNext"`
	KeepLines           *CTOnOff            `xml:"keepLines"`
	PageBreakBefore     *CTOnOff            `xml:"pageBreakBefore"`
	FramePr             *CTFramePr          `xml:"framePr"`
	WidowControl        *CTOnOff            `xml:"widowControl"`
	NumPr               *CTNumPr            `xml:"numPr"`
	SuppressLineNumbers *CTOnOff            `xml:"suppressLineNumbers"`
	PBdr                *CTPBdr             `xml:"pBdr"`
	Shd                 *CTShd              `xml:"shd"`
	Tabs                *CTTabs             `xml:"tabs"`
	SuppressAutoHyphens *CTOnOff            `xml:"suppressAutoHyphens"`
	Kinsoku             *CTOnOff            `xml:"kinsoku"`
	WordWrap            *CTOnOff            `xml:"wordWrap"`
	OverflowPunct       *CTOnOff            `xml:"overflowPunct"`
	TopLinePunct        *CTOnOff            `xml:"topLinePunct"`
	AutoSpaceDE         *CTOnOff            `xml:"autoSpaceDE"`
	AutoSpaceDN         *CTOnOff            `xml:"autoSpaceDN"`
	Bidi                *CTOnOff            `xml:"bidi"`
	AdjustRightInd      *CTOnOff            `xml:"adjustRightInd"`
	SnapToGrid          *CTOnOff            `xml:"snapToGrid"`
	Spacing             *CTSpacing          `xml:"spacing"`
	Ind                 *CTInd              `xml:"ind"`
	ContextualSpacing   *CTOnOff            `xml:"contextualSpacing"`
	MirrorIndents       *CTOnOff            `xml:"mirrorIndents"`
	SuppressOverlap     *CTOnOff            `xml:"suppressOverlap"`
	Jc                  *CTJc               `xml:"jc"`
	TextDirection       *CTTextDirection    `xml:"textDirection"`
	TextAlignment       *CTTextAlignment    `xml:"textAlignment"`
	TextboxTightWrap    *CTTextboxTightWrap `xml:"textboxTightWrap"`
	OutlineLvl          *CTDecimalNumber    `xml:"outlineLvl"`
	DivId               *CTDecimalNumber    `xml:"divId"`
	CnfStyle            *CTCnf              `xml:"cnfStyle"`
}

// CTPPrGeneral ...
type CTPPrGeneral struct {
	XMLName   xml.Name     `xml:"CT_PPrGeneral"`
	PPrChange *CTPPrChange `xml:"pPrChange"`
}

// CTControl ...
type CTControl struct {
	XMLName     xml.Name `xml:"CT_Control"`
	NameAttr    string   `xml:"name,attr,omitempty"`
	ShapeidAttr string   `xml:"shapeid,attr,omitempty"`
	RIdAttr     *Id      `xml:"r:id,attr,omitempty"`
}

// CTBackground ...
type CTBackground struct {
	XMLName        xml.Name    `xml:"CT_Background"`
	ColorAttr      *STHexColor `xml:"color,attr,omitempty"`
	ThemeColorAttr string      `xml:"themeColor,attr,omitempty"`
	ThemeTintAttr  []byte      `xml:"themeTint,attr,omitempty"`
	ThemeShadeAttr []byte      `xml:"themeShade,attr,omitempty"`
	Drawing        *CTDrawing  `xml:"drawing"`
}

// CTRel ...
type CTRel struct {
	XMLName xml.Name `xml:"CT_Rel"`
	RIdAttr string   `xml:"r:id,attr"`
}

// CTObject ...
type CTObject struct {
	XMLName     xml.Name        `xml:"CT_Object"`
	DxaOrigAttr *STTwipsMeasure `xml:"dxaOrig,attr,omitempty"`
	DyaOrigAttr *STTwipsMeasure `xml:"dyaOrig,attr,omitempty"`
	Drawing     *CTDrawing      `xml:"drawing"`
	Control     *CTControl      `xml:"control"`
	ObjectLink  *CTObjectLink   `xml:"objectLink"`
	ObjectEmbed *CTObjectEmbed  `xml:"objectEmbed"`
	Movie       *CTRel          `xml:"movie"`
}

// CTPicture ...
type CTPicture struct {
	XMLName xml.Name   `xml:"CT_Picture"`
	Movie   *CTRel     `xml:"movie"`
	Control *CTControl `xml:"control"`
}

// CTObjectEmbed ...
type CTObjectEmbed struct {
	XMLName        xml.Name `xml:"CT_ObjectEmbed"`
	DrawAspectAttr string   `xml:"drawAspect,attr,omitempty"`
	RIdAttr        string   `xml:"r:id,attr"`
	ProgIdAttr     string   `xml:"progId,attr,omitempty"`
	ShapeIdAttr    string   `xml:"shapeId,attr,omitempty"`
	FieldCodesAttr string   `xml:"fieldCodes,attr,omitempty"`
}

// STObjectDrawAspect ...
type STObjectDrawAspect string

const (
	STObjectDrawAspect_content STObjectDrawAspect = "content"
	STObjectDrawAspect_icon    STObjectDrawAspect = "icon"
)

// CTObjectLink ...
type CTObjectLink struct {
	XMLName         xml.Name `xml:"CT_ObjectLink"`
	UpdateModeAttr  string   `xml:"updateMode,attr"`
	LockedFieldAttr *STOnOff `xml:"lockedField,attr,omitempty"`
}

// STObjectUpdateMode ...
type STObjectUpdateMode string

const (
	STObjectUpdateMode_always STObjectUpdateMode = "always"
	STObjectUpdateMode_onCall STObjectUpdateMode = "onCall"
)

// CTDrawing ...
type CTDrawing struct {
	XMLName  xml.Name  `xml:"CT_Drawing"`
	WpAnchor *Anchor   `xml:"wp:anchor"`
	WpInline *CTInline `xml:"wp:inline"`
}

// CTSimpleField ...
type CTSimpleField struct {
	XMLName     xml.Name `xml:"CT_SimpleField"`
	InstrAttr   string   `xml:"instr,attr"`
	FldLockAttr *STOnOff `xml:"fldLock,attr,omitempty"`
	DirtyAttr   *STOnOff `xml:"dirty,attr,omitempty"`
	EGPContent  []*EGPContent
	FldData     *CTText `xml:"fldData"`
}

// STFldCharType ...
type STFldCharType string

const (
	STFldCharType_begin    STFldCharType = "begin"
	STFldCharType_separate STFldCharType = "separate"
	STFldCharType_end      STFldCharType = "end"
)

// STInfoTextType ...
type STInfoTextType string

const (
	STInfoTextType_text     STInfoTextType = "text"
	STInfoTextType_autoText STInfoTextType = "autoText"
)

// STFFHelpTextVal ...
type STFFHelpTextVal string

// STFFStatusTextVal ...
type STFFStatusTextVal string

// STFFName ...
type STFFName string

// STFFTextType ...
type STFFTextType string

const (
	STFFTextType_regular     STFFTextType = "regular"
	STFFTextType_number      STFFTextType = "number"
	STFFTextType_date        STFFTextType = "date"
	STFFTextType_currentTime STFFTextType = "currentTime"
	STFFTextType_currentDate STFFTextType = "currentDate"
	STFFTextType_calculated  STFFTextType = "calculated"
)

// CTFFTextType ...
type CTFFTextType struct {
	XMLName xml.Name `xml:"CT_FFTextType"`
	ValAttr string   `xml:"val,attr"`
}

// CTFFName ...
type CTFFName struct {
	XMLName xml.Name `xml:"CT_FFName"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTFldChar ...
type CTFldChar struct {
	XMLName         xml.Name                `xml:"CT_FldChar"`
	FldCharTypeAttr string                  `xml:"fldCharType,attr"`
	FldLockAttr     *STOnOff                `xml:"fldLock,attr,omitempty"`
	DirtyAttr       *STOnOff                `xml:"dirty,attr,omitempty"`
	FldData         *CTText                 `xml:"fldData"`
	FfData          *CTFFData               `xml:"ffData"`
	NumberingChange *CTTrackChangeNumbering `xml:"numberingChange"`
}

// CTHyperlink ...
type CTHyperlink struct {
	XMLName         xml.Name `xml:"CT_Hyperlink"`
	TgtFrameAttr    string   `xml:"tgtFrame,attr,omitempty"`
	TooltipAttr     string   `xml:"tooltip,attr,omitempty"`
	DocLocationAttr string   `xml:"docLocation,attr,omitempty"`
	HistoryAttr     *STOnOff `xml:"history,attr,omitempty"`
	AnchorAttr      string   `xml:"anchor,attr,omitempty"`
	RIdAttr         string   `xml:"r:id,attr,omitempty"`
	EGPContent      []*EGPContent
}

// CTFFData ...
type CTFFData struct {
	XMLName    xml.Name                 `xml:"CT_FFData"`
	Name       *CTFFName                `xml:"name"`
	Label      *CTDecimalNumber         `xml:"label"`
	TabIndex   *CTUnsignedDecimalNumber `xml:"tabIndex"`
	Enabled    *CTOnOff                 `xml:"enabled"`
	CalcOnExit *CTOnOff                 `xml:"calcOnExit"`
	EntryMacro *CTMacroName             `xml:"entryMacro"`
	ExitMacro  *CTMacroName             `xml:"exitMacro"`
	HelpText   *CTFFHelpText            `xml:"helpText"`
	StatusText *CTFFStatusText          `xml:"statusText"`
	CheckBox   *CTFFCheckBox            `xml:"checkBox"`
	DdList     *CTFFDDList              `xml:"ddList"`
	TextInput  *CTFFTextInput           `xml:"textInput"`
}

// CTFFHelpText ...
type CTFFHelpText struct {
	XMLName  xml.Name `xml:"CT_FFHelpText"`
	TypeAttr string   `xml:"type,attr,omitempty"`
	ValAttr  string   `xml:"val,attr,omitempty"`
}

// CTFFStatusText ...
type CTFFStatusText struct {
	XMLName  xml.Name `xml:"CT_FFStatusText"`
	TypeAttr string   `xml:"type,attr,omitempty"`
	ValAttr  string   `xml:"val,attr,omitempty"`
}

// CTFFCheckBox ...
type CTFFCheckBox struct {
	XMLName  xml.Name      `xml:"CT_FFCheckBox"`
	Size     *CTHpsMeasure `xml:"size"`
	SizeAuto *CTOnOff      `xml:"sizeAuto"`
	Default  *CTOnOff      `xml:"default"`
	Checked  *CTOnOff      `xml:"checked"`
}

// CTFFDDList ...
type CTFFDDList struct {
	XMLName   xml.Name         `xml:"CT_FFDDList"`
	Result    *CTDecimalNumber `xml:"result"`
	Default   *CTDecimalNumber `xml:"default"`
	ListEntry []*CTString      `xml:"listEntry"`
}

// CTFFTextInput ...
type CTFFTextInput struct {
	XMLName   xml.Name         `xml:"CT_FFTextInput"`
	Type      *CTFFTextType    `xml:"type"`
	Default   *CTString        `xml:"default"`
	MaxLength *CTDecimalNumber `xml:"maxLength"`
	Format    *CTString        `xml:"format"`
}

// STSectionMark ...
type STSectionMark string

const (
	STSectionMark_nextPage   STSectionMark = "nextPage"
	STSectionMark_nextColumn STSectionMark = "nextColumn"
	STSectionMark_continuous STSectionMark = "continuous"
	STSectionMark_evenPage   STSectionMark = "evenPage"
	STSectionMark_oddPage    STSectionMark = "oddPage"
)

// CTSectType ...
type CTSectType struct {
	XMLName xml.Name `xml:"CT_SectType"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTPaperSource ...
type CTPaperSource struct {
	XMLName   xml.Name `xml:"CT_PaperSource"`
	FirstAttr int      `xml:"first,attr,omitempty"`
	OtherAttr int      `xml:"other,attr,omitempty"`
}

// STNumberFormat ...
type STNumberFormat string

const (
	STNumberFormat_decimal                      STNumberFormat = "decimal"
	STNumberFormat_upperRoman                   STNumberFormat = "upperRoman"
	STNumberFormat_lowerRoman                   STNumberFormat = "lowerRoman"
	STNumberFormat_upperLetter                  STNumberFormat = "upperLetter"
	STNumberFormat_lowerLetter                  STNumberFormat = "lowerLetter"
	STNumberFormat_ordinal                      STNumberFormat = "ordinal"
	STNumberFormat_cardinalText                 STNumberFormat = "cardinalText"
	STNumberFormat_ordinalText                  STNumberFormat = "ordinalText"
	STNumberFormat_hex                          STNumberFormat = "hex"
	STNumberFormat_chicago                      STNumberFormat = "chicago"
	STNumberFormat_ideographDigital             STNumberFormat = "ideographDigital"
	STNumberFormat_japaneseCounting             STNumberFormat = "japaneseCounting"
	STNumberFormat_aiueo                        STNumberFormat = "aiueo"
	STNumberFormat_iroha                        STNumberFormat = "iroha"
	STNumberFormat_decimalFullWidth             STNumberFormat = "decimalFullWidth"
	STNumberFormat_decimalHalfWidth             STNumberFormat = "decimalHalfWidth"
	STNumberFormat_japaneseLegal                STNumberFormat = "japaneseLegal"
	STNumberFormat_japaneseDigitalTenThousand   STNumberFormat = "japaneseDigitalTenThousand"
	STNumberFormat_decimalEnclosedCircle        STNumberFormat = "decimalEnclosedCircle"
	STNumberFormat_decimalFullWidth2            STNumberFormat = "decimalFullWidth2"
	STNumberFormat_aiueoFullWidth               STNumberFormat = "aiueoFullWidth"
	STNumberFormat_irohaFullWidth               STNumberFormat = "irohaFullWidth"
	STNumberFormat_decimalZero                  STNumberFormat = "decimalZero"
	STNumberFormat_bullet                       STNumberFormat = "bullet"
	STNumberFormat_ganada                       STNumberFormat = "ganada"
	STNumberFormat_chosung                      STNumberFormat = "chosung"
	STNumberFormat_decimalEnclosedFullstop      STNumberFormat = "decimalEnclosedFullstop"
	STNumberFormat_decimalEnclosedParen         STNumberFormat = "decimalEnclosedParen"
	STNumberFormat_decimalEnclosedCircleChinese STNumberFormat = "decimalEnclosedCircleChinese"
	STNumberFormat_ideographEnclosedCircle      STNumberFormat = "ideographEnclosedCircle"
	STNumberFormat_ideographTraditional         STNumberFormat = "ideographTraditional"
	STNumberFormat_ideographZodiac              STNumberFormat = "ideographZodiac"
	STNumberFormat_ideographZodiacTraditional   STNumberFormat = "ideographZodiacTraditional"
	STNumberFormat_taiwaneseCounting            STNumberFormat = "taiwaneseCounting"
	STNumberFormat_ideographLegalTraditional    STNumberFormat = "ideographLegalTraditional"
	STNumberFormat_taiwaneseCountingThousand    STNumberFormat = "taiwaneseCountingThousand"
	STNumberFormat_taiwaneseDigital             STNumberFormat = "taiwaneseDigital"
	STNumberFormat_chineseCounting              STNumberFormat = "chineseCounting"
	STNumberFormat_chineseLegalSimplified       STNumberFormat = "chineseLegalSimplified"
	STNumberFormat_chineseCountingThousand      STNumberFormat = "chineseCountingThousand"
	STNumberFormat_koreanDigital                STNumberFormat = "koreanDigital"
	STNumberFormat_koreanCounting               STNumberFormat = "koreanCounting"
	STNumberFormat_koreanLegal                  STNumberFormat = "koreanLegal"
	STNumberFormat_koreanDigital2               STNumberFormat = "koreanDigital2"
	STNumberFormat_vietnameseCounting           STNumberFormat = "vietnameseCounting"
	STNumberFormat_russianLower                 STNumberFormat = "russianLower"
	STNumberFormat_russianUpper                 STNumberFormat = "russianUpper"
	STNumberFormat_none                         STNumberFormat = "none"
	STNumberFormat_numberInDash                 STNumberFormat = "numberInDash"
	STNumberFormat_hebrew1                      STNumberFormat = "hebrew1"
	STNumberFormat_hebrew2                      STNumberFormat = "hebrew2"
	STNumberFormat_arabicAlpha                  STNumberFormat = "arabicAlpha"
	STNumberFormat_arabicAbjad                  STNumberFormat = "arabicAbjad"
	STNumberFormat_hindiVowels                  STNumberFormat = "hindiVowels"
	STNumberFormat_hindiConsonants              STNumberFormat = "hindiConsonants"
	STNumberFormat_hindiNumbers                 STNumberFormat = "hindiNumbers"
	STNumberFormat_hindiCounting                STNumberFormat = "hindiCounting"
	STNumberFormat_thaiLetters                  STNumberFormat = "thaiLetters"
	STNumberFormat_thaiNumbers                  STNumberFormat = "thaiNumbers"
	STNumberFormat_thaiCounting                 STNumberFormat = "thaiCounting"
	STNumberFormat_bahtText                     STNumberFormat = "bahtText"
	STNumberFormat_dollarText                   STNumberFormat = "dollarText"
	STNumberFormat_custom                       STNumberFormat = "custom"
)

// STPageOrientation ...
type STPageOrientation string

const (
	STPageOrientation_portrait  STPageOrientation = "portrait"
	STPageOrientation_landscape STPageOrientation = "landscape"
)

// CTPageSz ...
type CTPageSz struct {
	XMLName    xml.Name        `xml:"CT_PageSz"`
	WAttr      *STTwipsMeasure `xml:"w,attr,omitempty"`
	HAttr      *STTwipsMeasure `xml:"h,attr,omitempty"`
	OrientAttr string          `xml:"orient,attr,omitempty"`
	CodeAttr   int             `xml:"code,attr,omitempty"`
}

// CTPageMar ...
type CTPageMar struct {
	XMLName    xml.Name              `xml:"CT_PageMar"`
	TopAttr    *STSignedTwipsMeasure `xml:"top,attr"`
	RightAttr  *STTwipsMeasure       `xml:"right,attr"`
	BottomAttr *STSignedTwipsMeasure `xml:"bottom,attr"`
	LeftAttr   *STTwipsMeasure       `xml:"left,attr"`
	HeaderAttr *STTwipsMeasure       `xml:"header,attr"`
	FooterAttr *STTwipsMeasure       `xml:"footer,attr"`
	GutterAttr *STTwipsMeasure       `xml:"gutter,attr"`
}

// STPageBorderZOrder ...
type STPageBorderZOrder string

const (
	STPageBorderZOrder_front STPageBorderZOrder = "front"
	STPageBorderZOrder_back  STPageBorderZOrder = "back"
)

// STPageBorderDisplay ...
type STPageBorderDisplay string

const (
	STPageBorderDisplay_allPages     STPageBorderDisplay = "allPages"
	STPageBorderDisplay_firstPage    STPageBorderDisplay = "firstPage"
	STPageBorderDisplay_notFirstPage STPageBorderDisplay = "notFirstPage"
)

// STPageBorderOffset ...
type STPageBorderOffset string

const (
	STPageBorderOffset_page STPageBorderOffset = "page"
	STPageBorderOffset_text STPageBorderOffset = "text"
)

// CTPageBorders ...
type CTPageBorders struct {
	XMLName        xml.Name            `xml:"CT_PageBorders"`
	ZOrderAttr     string              `xml:"zOrder,attr,omitempty"`
	DisplayAttr    string              `xml:"display,attr,omitempty"`
	OffsetFromAttr string              `xml:"offsetFrom,attr,omitempty"`
	Top            *CTTopPageBorder    `xml:"top"`
	Left           *CTPageBorder       `xml:"left"`
	Bottom         *CTBottomPageBorder `xml:"bottom"`
	Right          *CTPageBorder       `xml:"right"`
}

// CTPageBorder ...
type CTPageBorder struct {
	XMLName xml.Name `xml:"CT_PageBorder"`
	RIdAttr string   `xml:"r:id,attr,omitempty"`
}

// CTBottomPageBorder ...
type CTBottomPageBorder struct {
	XMLName          xml.Name `xml:"CT_BottomPageBorder"`
	RBottomLeftAttr  string   `xml:"r:bottomLeft,attr,omitempty"`
	RBottomRightAttr string   `xml:"r:bottomRight,attr,omitempty"`
}

// CTTopPageBorder ...
type CTTopPageBorder struct {
	XMLName       xml.Name `xml:"CT_TopPageBorder"`
	RTopLeftAttr  string   `xml:"r:topLeft,attr,omitempty"`
	RTopRightAttr string   `xml:"r:topRight,attr,omitempty"`
}

// STChapterSep ...
type STChapterSep string

const (
	STChapterSep_hyphen STChapterSep = "hyphen"
	STChapterSep_period STChapterSep = "period"
	STChapterSep_colon  STChapterSep = "colon"
	STChapterSep_emDash STChapterSep = "emDash"
	STChapterSep_enDash STChapterSep = "enDash"
)

// STLineNumberRestart ...
type STLineNumberRestart string

const (
	STLineNumberRestart_newPage    STLineNumberRestart = "newPage"
	STLineNumberRestart_newSection STLineNumberRestart = "newSection"
	STLineNumberRestart_continuous STLineNumberRestart = "continuous"
)

// CTLineNumber ...
type CTLineNumber struct {
	XMLName      xml.Name        `xml:"CT_LineNumber"`
	CountByAttr  int             `xml:"countBy,attr,omitempty"`
	StartAttr    int             `xml:"start,attr,omitempty"`
	DistanceAttr *STTwipsMeasure `xml:"distance,attr,omitempty"`
	RestartAttr  string          `xml:"restart,attr,omitempty"`
}

// CTPageNumber ...
type CTPageNumber struct {
	XMLName       xml.Name `xml:"CT_PageNumber"`
	FmtAttr       string   `xml:"fmt,attr,omitempty"`
	StartAttr     int      `xml:"start,attr,omitempty"`
	ChapStyleAttr int      `xml:"chapStyle,attr,omitempty"`
	ChapSepAttr   string   `xml:"chapSep,attr,omitempty"`
}

// CTColumn ...
type CTColumn struct {
	XMLName   xml.Name        `xml:"CT_Column"`
	WAttr     *STTwipsMeasure `xml:"w,attr,omitempty"`
	SpaceAttr *STTwipsMeasure `xml:"space,attr,omitempty"`
}

// CTColumns ...
type CTColumns struct {
	XMLName        xml.Name        `xml:"CT_Columns"`
	EqualWidthAttr *STOnOff        `xml:"equalWidth,attr,omitempty"`
	SpaceAttr      *STTwipsMeasure `xml:"space,attr,omitempty"`
	NumAttr        int             `xml:"num,attr,omitempty"`
	SepAttr        *STOnOff        `xml:"sep,attr,omitempty"`
	Col            []*CTColumn     `xml:"col"`
}

// STVerticalJc ...
type STVerticalJc string

const (
	STVerticalJc_top    STVerticalJc = "top"
	STVerticalJc_center STVerticalJc = "center"
	STVerticalJc_both   STVerticalJc = "both"
	STVerticalJc_bottom STVerticalJc = "bottom"
)

// CTVerticalJc ...
type CTVerticalJc struct {
	XMLName xml.Name `xml:"CT_VerticalJc"`
	ValAttr string   `xml:"val,attr"`
}

// STDocGrid ...
type STDocGrid string

const (
	STDocGrid_default       STDocGrid = "default"
	STDocGrid_lines         STDocGrid = "lines"
	STDocGrid_linesAndChars STDocGrid = "linesAndChars"
	STDocGrid_snapToChars   STDocGrid = "snapToChars"
)

// CTDocGrid ...
type CTDocGrid struct {
	XMLName       xml.Name `xml:"CT_DocGrid"`
	TypeAttr      string   `xml:"type,attr,omitempty"`
	LinePitchAttr int      `xml:"linePitch,attr,omitempty"`
	CharSpaceAttr int      `xml:"charSpace,attr,omitempty"`
}

// STHdrFtr ...
type STHdrFtr string

const (
	STHdrFtr_even    STHdrFtr = "even"
	STHdrFtr_default STHdrFtr = "default"
	STHdrFtr_first   STHdrFtr = "first"
)

// STFtnEdn ...
type STFtnEdn string

const (
	STFtnEdn_normal                STFtnEdn = "normal"
	STFtnEdn_separator             STFtnEdn = "separator"
	STFtnEdn_continuationSeparator STFtnEdn = "continuationSeparator"
	STFtnEdn_continuationNotice    STFtnEdn = "continuationNotice"
)

// CTHdrFtrRef ...
type CTHdrFtrRef struct {
	XMLName  xml.Name `xml:"CT_HdrFtrRef"`
	TypeAttr string   `xml:"type,attr"`
}

// EGHdrFtrReferences ...
type EGHdrFtrReferences struct {
	XMLName         xml.Name `xml:"EG_HdrFtrReferences"`
	HeaderReference *CTHdrFtrRef
	FooterReference *CTHdrFtrRef
}

// CTHdrFtr ...
type CTHdrFtr struct {
	XMLName          xml.Name `xml:"CT_HdrFtr"`
	EGBlockLevelElts []*EGBlockLevelElts
}

// EGSectPrContents ...
type EGSectPrContents struct {
	XMLName         xml.Name `xml:"EG_SectPrContents"`
	FootnotePr      *CTFtnProps
	EndnotePr       *CTEdnProps
	Type            *CTSectType
	PgSz            *CTPageSz
	PgMar           *CTPageMar
	PaperSrc        *CTPaperSource
	PgBorders       *CTPageBorders
	LnNumType       *CTLineNumber
	PgNumType       *CTPageNumber
	Cols            *CTColumns
	FormProt        *CTOnOff
	VAlign          *CTVerticalJc
	NoEndnote       *CTOnOff
	TitlePg         *CTOnOff
	TextDirection   *CTTextDirection
	Bidi            *CTOnOff
	RtlGutter       *CTOnOff
	DocGrid         *CTDocGrid
	PrinterSettings *CTRel
}

// AGSectPrAttributes ...
type AGSectPrAttributes struct {
	XMLName      xml.Name `xml:"AG_SectPrAttributes"`
	RsidRPrAttr  []byte   `xml:"rsidRPr,attr,omitempty"`
	RsidDelAttr  []byte   `xml:"rsidDel,attr,omitempty"`
	RsidRAttr    []byte   `xml:"rsidR,attr,omitempty"`
	RsidSectAttr []byte   `xml:"rsidSect,attr,omitempty"`
}

// CTSectPrBase ...
type CTSectPrBase struct {
	XMLName            xml.Name `xml:"CT_SectPrBase"`
	AGSectPrAttributes *AGSectPrAttributes
	EGSectPrContents   *EGSectPrContents
}

// CTSectPr ...
type CTSectPr struct {
	XMLName            xml.Name `xml:"CT_SectPr"`
	AGSectPrAttributes *AGSectPrAttributes
	EGHdrFtrReferences []*EGHdrFtrReferences
	EGSectPrContents   *EGSectPrContents
	SectPrChange       *CTSectPrChange `xml:"sectPrChange"`
}

// STBrType ...
type STBrType string

const (
	STBrType_page         STBrType = "page"
	STBrType_column       STBrType = "column"
	STBrType_textWrapping STBrType = "textWrapping"
)

// STBrClear ...
type STBrClear string

const (
	STBrClear_none  STBrClear = "none"
	STBrClear_left  STBrClear = "left"
	STBrClear_right STBrClear = "right"
	STBrClear_all   STBrClear = "all"
)

// CTBr ...
type CTBr struct {
	XMLName   xml.Name `xml:"CT_Br"`
	TypeAttr  string   `xml:"type,attr,omitempty"`
	ClearAttr string   `xml:"clear,attr,omitempty"`
}

// STPTabAlignment ...
type STPTabAlignment string

const (
	STPTabAlignment_left   STPTabAlignment = "left"
	STPTabAlignment_center STPTabAlignment = "center"
	STPTabAlignment_right  STPTabAlignment = "right"
)

// STPTabRelativeTo ...
type STPTabRelativeTo string

const (
	STPTabRelativeTo_margin STPTabRelativeTo = "margin"
	STPTabRelativeTo_indent STPTabRelativeTo = "indent"
)

// STPTabLeader ...
type STPTabLeader string

const (
	STPTabLeader_none       STPTabLeader = "none"
	STPTabLeader_dot        STPTabLeader = "dot"
	STPTabLeader_hyphen     STPTabLeader = "hyphen"
	STPTabLeader_underscore STPTabLeader = "underscore"
	STPTabLeader_middleDot  STPTabLeader = "middleDot"
)

// CTPTab ...
type CTPTab struct {
	XMLName        xml.Name `xml:"CT_PTab"`
	AlignmentAttr  string   `xml:"alignment,attr"`
	RelativeToAttr string   `xml:"relativeTo,attr"`
	LeaderAttr     string   `xml:"leader,attr"`
}

// CTSym ...
type CTSym struct {
	XMLName  xml.Name `xml:"CT_Sym"`
	FontAttr string   `xml:"font,attr,omitempty"`
	CharAttr []byte   `xml:"char,attr,omitempty"`
}

// STProofErr ...
type STProofErr string

const (
	STProofErr_spellStart STProofErr = "spellStart"
	STProofErr_spellEnd   STProofErr = "spellEnd"
	STProofErr_gramStart  STProofErr = "gramStart"
	STProofErr_gramEnd    STProofErr = "gramEnd"
)

// CTProofErr ...
type CTProofErr struct {
	XMLName  xml.Name `xml:"CT_ProofErr"`
	TypeAttr string   `xml:"type,attr"`
}

// STEdGrp ...
type STEdGrp string

const (
	STEdGrp_none           STEdGrp = "none"
	STEdGrp_everyone       STEdGrp = "everyone"
	STEdGrp_administrators STEdGrp = "administrators"
	STEdGrp_contributors   STEdGrp = "contributors"
	STEdGrp_editors        STEdGrp = "editors"
	STEdGrp_owners         STEdGrp = "owners"
	STEdGrp_current        STEdGrp = "current"
)

// CTPerm ...
type CTPerm struct {
	XMLName                  xml.Name `xml:"CT_Perm"`
	IdAttr                   string   `xml:"id,attr"`
	DisplacedByCustomXmlAttr string   `xml:"displacedByCustomXml,attr,omitempty"`
}

// CTPermStart ...
type CTPermStart struct {
	XMLName      xml.Name `xml:"CT_PermStart"`
	EdGrpAttr    string   `xml:"edGrp,attr,omitempty"`
	EdAttr       string   `xml:"ed,attr,omitempty"`
	ColFirstAttr int      `xml:"colFirst,attr,omitempty"`
	ColLastAttr  int      `xml:"colLast,attr,omitempty"`
}

// CTText ...
type CTText struct {
	XMLName      xml.Name `xml:"CT_Text"`
	XmlSpaceAttr *Space   `xml:"xml:space,attr,omitempty"`
}

// EGRunInnerContent ...
type EGRunInnerContent struct {
	XMLName               xml.Name `xml:"EG_RunInnerContent"`
	Br                    *CTBr
	T                     *CTText
	ContentPart           *CTRel
	DelText               *CTText
	InstrText             *CTText
	DelInstrText          *CTText
	NoBreakHyphen         *CTEmpty
	SoftHyphen            *CTEmpty
	DayShort              *CTEmpty
	MonthShort            *CTEmpty
	YearShort             *CTEmpty
	DayLong               *CTEmpty
	MonthLong             *CTEmpty
	YearLong              *CTEmpty
	AnnotationRef         *CTEmpty
	FootnoteRef           *CTEmpty
	EndnoteRef            *CTEmpty
	Separator             *CTEmpty
	ContinuationSeparator *CTEmpty
	Sym                   *CTSym
	PgNum                 *CTEmpty
	Cr                    *CTEmpty
	Tab                   *CTEmpty
	Object                *CTObject
	Pict                  *CTPicture
	FldChar               *CTFldChar
	Ruby                  *CTRuby
	FootnoteReference     *CTFtnEdnRef
	EndnoteReference      *CTFtnEdnRef
	CommentReference      *CTMarkup
	Drawing               *CTDrawing
	Ptab                  *CTPTab
	LastRenderedPageBreak *CTEmpty
}

// CTR ...
type CTR struct {
	XMLName           xml.Name `xml:"CT_R"`
	RsidRPrAttr       []byte   `xml:"rsidRPr,attr,omitempty"`
	RsidDelAttr       []byte   `xml:"rsidDel,attr,omitempty"`
	RsidRAttr         []byte   `xml:"rsidR,attr,omitempty"`
	EGRPr             *EGRPr
	EGRunInnerContent []*EGRunInnerContent
}

// STHint ...
type STHint string

const (
	STHint_default  STHint = "default"
	STHint_eastAsia STHint = "eastAsia"
)

// STTheme ...
type STTheme string

const (
	STTheme_majorEastAsia STTheme = "majorEastAsia"
	STTheme_majorBidi     STTheme = "majorBidi"
	STTheme_majorAscii    STTheme = "majorAscii"
	STTheme_majorHAnsi    STTheme = "majorHAnsi"
	STTheme_minorEastAsia STTheme = "minorEastAsia"
	STTheme_minorBidi     STTheme = "minorBidi"
	STTheme_minorAscii    STTheme = "minorAscii"
	STTheme_minorHAnsi    STTheme = "minorHAnsi"
)

// CTFonts ...
type CTFonts struct {
	XMLName           xml.Name `xml:"CT_Fonts"`
	HintAttr          string   `xml:"hint,attr,omitempty"`
	AsciiAttr         string   `xml:"ascii,attr,omitempty"`
	HAnsiAttr         string   `xml:"hAnsi,attr,omitempty"`
	EastAsiaAttr      string   `xml:"eastAsia,attr,omitempty"`
	CsAttr            string   `xml:"cs,attr,omitempty"`
	AsciiThemeAttr    string   `xml:"asciiTheme,attr,omitempty"`
	HAnsiThemeAttr    string   `xml:"hAnsiTheme,attr,omitempty"`
	EastAsiaThemeAttr string   `xml:"eastAsiaTheme,attr,omitempty"`
	CsthemeAttr       string   `xml:"cstheme,attr,omitempty"`
}

// EGRPrBase ...
type EGRPrBase struct {
	XMLName         xml.Name `xml:"EG_RPrBase"`
	RStyle          *CTString
	RFonts          *CTFonts
	B               *CTOnOff
	BCs             *CTOnOff
	I               *CTOnOff
	ICs             *CTOnOff
	Caps            *CTOnOff
	SmallCaps       *CTOnOff
	Strike          *CTOnOff
	Dstrike         *CTOnOff
	Outline         *CTOnOff
	Shadow          *CTOnOff
	Emboss          *CTOnOff
	Imprint         *CTOnOff
	NoProof         *CTOnOff
	SnapToGrid      *CTOnOff
	Vanish          *CTOnOff
	WebHidden       *CTOnOff
	Color           *CTColor
	Spacing         *CTSignedTwipsMeasure
	W               *CTTextScale
	Kern            *CTHpsMeasure
	Position        *CTSignedHpsMeasure
	Sz              *CTHpsMeasure
	SzCs            *CTHpsMeasure
	Highlight       *CTHighlight
	U               *CTUnderline
	Effect          *CTTextEffect
	Bdr             *CTBorder
	Shd             *CTShd
	FitText         *CTFitText
	VertAlign       *CTVerticalAlignRun
	Rtl             *CTOnOff
	Cs              *CTOnOff
	Em              *CTEm
	Lang            *CTLanguage
	EastAsianLayout *CTEastAsianLayout
	SpecVanish      *CTOnOff
	OMath           *CTOnOff
}

// EGRPrContent ...
type EGRPrContent struct {
	XMLName   xml.Name `xml:"EG_RPrContent"`
	RPrChange *CTRPrChange
	EGRPrBase []*EGRPrBase
}

// CTRPr ...
type CTRPr struct {
	XMLName      xml.Name `xml:"CT_RPr"`
	EGRPrContent *EGRPrContent
}

// EGRPr ...
type EGRPr struct {
	XMLName xml.Name `xml:"EG_RPr"`
	RPr     *CTRPr
}

// EGRPrMath ...
type EGRPrMath struct {
	XMLName xml.Name `xml:"EG_RPrMath"`
	Ins     *CTMathCtrlIns
	Del     *CTMathCtrlDel
	EGRPr   *EGRPr
}

// CTMathCtrlIns ...
type CTMathCtrlIns struct {
	XMLName xml.Name     `xml:"CT_MathCtrlIns"`
	Del     *CTRPrChange `xml:"del"`
	RPr     *CTRPr       `xml:"rPr"`
}

// CTMathCtrlDel ...
type CTMathCtrlDel struct {
	XMLName xml.Name `xml:"CT_MathCtrlDel"`
	RPr     *CTRPr   `xml:"rPr"`
}

// CTRPrOriginal ...
type CTRPrOriginal struct {
	XMLName   xml.Name `xml:"CT_RPrOriginal"`
	EGRPrBase []*EGRPrBase
}

// CTParaRPrOriginal ...
type CTParaRPrOriginal struct {
	XMLName               xml.Name `xml:"CT_ParaRPrOriginal"`
	EGParaRPrTrackChanges *EGParaRPrTrackChanges
	EGRPrBase             []*EGRPrBase
}

// CTParaRPr ...
type CTParaRPr struct {
	XMLName               xml.Name `xml:"CT_ParaRPr"`
	EGParaRPrTrackChanges *EGParaRPrTrackChanges
	EGRPrBase             []*EGRPrBase
	RPrChange             *CTParaRPrChange `xml:"rPrChange"`
}

// EGParaRPrTrackChanges ...
type EGParaRPrTrackChanges struct {
	XMLName  xml.Name `xml:"EG_ParaRPrTrackChanges"`
	Ins      *CTTrackChange
	Del      *CTTrackChange
	MoveFrom *CTTrackChange
	MoveTo   *CTTrackChange
}

// CTAltChunk ...
type CTAltChunk struct {
	XMLName    xml.Name      `xml:"CT_AltChunk"`
	RIdAttr    string        `xml:"r:id,attr,omitempty"`
	AltChunkPr *CTAltChunkPr `xml:"altChunkPr"`
}

// CTAltChunkPr ...
type CTAltChunkPr struct {
	XMLName  xml.Name `xml:"CT_AltChunkPr"`
	MatchSrc *CTOnOff `xml:"matchSrc"`
}

// STRubyAlign ...
type STRubyAlign string

const (
	STRubyAlign_center           STRubyAlign = "center"
	STRubyAlign_distributeLetter STRubyAlign = "distributeLetter"
	STRubyAlign_distributeSpace  STRubyAlign = "distributeSpace"
	STRubyAlign_left             STRubyAlign = "left"
	STRubyAlign_right            STRubyAlign = "right"
	STRubyAlign_rightVertical    STRubyAlign = "rightVertical"
)

// CTRubyAlign ...
type CTRubyAlign struct {
	XMLName xml.Name `xml:"CT_RubyAlign"`
	ValAttr string   `xml:"val,attr"`
}

// CTRubyPr ...
type CTRubyPr struct {
	XMLName     xml.Name      `xml:"CT_RubyPr"`
	RubyAlign   *CTRubyAlign  `xml:"rubyAlign"`
	Hps         *CTHpsMeasure `xml:"hps"`
	HpsRaise    *CTHpsMeasure `xml:"hpsRaise"`
	HpsBaseText *CTHpsMeasure `xml:"hpsBaseText"`
	Lid         *CTLang       `xml:"lid"`
	Dirty       *CTOnOff      `xml:"dirty"`
}

// EGRubyContent ...
type EGRubyContent struct {
	XMLName        xml.Name `xml:"EG_RubyContent"`
	R              *CTR
	EGRunLevelElts []*EGRunLevelElts
}

// CTRubyContent ...
type CTRubyContent struct {
	XMLName       xml.Name `xml:"CT_RubyContent"`
	EGRubyContent []*EGRubyContent
}

// CTRuby ...
type CTRuby struct {
	XMLName  xml.Name       `xml:"CT_Ruby"`
	RubyPr   *CTRubyPr      `xml:"rubyPr"`
	Rt       *CTRubyContent `xml:"rt"`
	RubyBase *CTRubyContent `xml:"rubyBase"`
}

// STLock ...
type STLock string

const (
	STLock_sdtLocked        STLock = "sdtLocked"
	STLock_contentLocked    STLock = "contentLocked"
	STLock_unlocked         STLock = "unlocked"
	STLock_sdtContentLocked STLock = "sdtContentLocked"
)

// CTLock ...
type CTLock struct {
	XMLName xml.Name `xml:"CT_Lock"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTSdtListItem ...
type CTSdtListItem struct {
	XMLName         xml.Name `xml:"CT_SdtListItem"`
	DisplayTextAttr string   `xml:"displayText,attr,omitempty"`
	ValueAttr       string   `xml:"value,attr,omitempty"`
}

// STSdtDateMappingType ...
type STSdtDateMappingType string

const (
	STSdtDateMappingType_text     STSdtDateMappingType = "text"
	STSdtDateMappingType_date     STSdtDateMappingType = "date"
	STSdtDateMappingType_dateTime STSdtDateMappingType = "dateTime"
)

// CTSdtDateMappingType ...
type CTSdtDateMappingType struct {
	XMLName xml.Name `xml:"CT_SdtDateMappingType"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTCalendarType ...
type CTCalendarType struct {
	XMLName xml.Name `xml:"CT_CalendarType"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTSdtDate ...
type CTSdtDate struct {
	XMLName           xml.Name              `xml:"CT_SdtDate"`
	FullDateAttr      time.Time             `xml:"fullDate,attr,omitempty"`
	DateFormat        *CTString             `xml:"dateFormat"`
	Lid               *CTLang               `xml:"lid"`
	StoreMappedDataAs *CTSdtDateMappingType `xml:"storeMappedDataAs"`
	Calendar          *CTCalendarType       `xml:"calendar"`
}

// CTSdtComboBox ...
type CTSdtComboBox struct {
	XMLName       xml.Name         `xml:"CT_SdtComboBox"`
	LastValueAttr string           `xml:"lastValue,attr,omitempty"`
	ListItem      []*CTSdtListItem `xml:"listItem"`
}

// CTSdtDocPart ...
type CTSdtDocPart struct {
	XMLName         xml.Name  `xml:"CT_SdtDocPart"`
	DocPartGallery  *CTString `xml:"docPartGallery"`
	DocPartCategory *CTString `xml:"docPartCategory"`
	DocPartUnique   *CTOnOff  `xml:"docPartUnique"`
}

// CTSdtDropDownList ...
type CTSdtDropDownList struct {
	XMLName       xml.Name         `xml:"CT_SdtDropDownList"`
	LastValueAttr string           `xml:"lastValue,attr,omitempty"`
	ListItem      []*CTSdtListItem `xml:"listItem"`
}

// CTPlaceholder ...
type CTPlaceholder struct {
	XMLName xml.Name  `xml:"CT_Placeholder"`
	DocPart *CTString `xml:"docPart"`
}

// CTSdtText ...
type CTSdtText struct {
	XMLName       xml.Name `xml:"CT_SdtText"`
	MultiLineAttr *STOnOff `xml:"multiLine,attr,omitempty"`
}

// CTDataBinding ...
type CTDataBinding struct {
	XMLName            xml.Name `xml:"CT_DataBinding"`
	PrefixMappingsAttr string   `xml:"prefixMappings,attr,omitempty"`
	XpathAttr          string   `xml:"xpath,attr"`
	StoreItemIDAttr    string   `xml:"storeItemID,attr"`
}

// CTSdtPr ...
type CTSdtPr struct {
	XMLName       xml.Name                 `xml:"CT_SdtPr"`
	RPr           *CTRPr                   `xml:"rPr"`
	Alias         *CTString                `xml:"alias"`
	Tag           *CTString                `xml:"tag"`
	Id            *CTDecimalNumber         `xml:"id"`
	Lock          *CTLock                  `xml:"lock"`
	Placeholder   *CTPlaceholder           `xml:"placeholder"`
	Temporary     *CTOnOff                 `xml:"temporary"`
	ShowingPlcHdr *CTOnOff                 `xml:"showingPlcHdr"`
	DataBinding   *CTDataBinding           `xml:"dataBinding"`
	Label         *CTDecimalNumber         `xml:"label"`
	TabIndex      *CTUnsignedDecimalNumber `xml:"tabIndex"`
	Equation      *CTEmpty                 `xml:"equation"`
	ComboBox      *CTSdtComboBox           `xml:"comboBox"`
	Date          *CTSdtDate               `xml:"date"`
	DocPartObj    *CTSdtDocPart            `xml:"docPartObj"`
	DocPartList   *CTSdtDocPart            `xml:"docPartList"`
	DropDownList  *CTSdtDropDownList       `xml:"dropDownList"`
	Picture       *CTEmpty                 `xml:"picture"`
	RichText      *CTEmpty                 `xml:"richText"`
	Text          *CTSdtText               `xml:"text"`
	Citation      *CTEmpty                 `xml:"citation"`
	Group         *CTEmpty                 `xml:"group"`
	Bibliography  *CTEmpty                 `xml:"bibliography"`
}

// CTSdtEndPr ...
type CTSdtEndPr struct {
	XMLName xml.Name `xml:"CT_SdtEndPr"`
	RPr     *CTRPr   `xml:"rPr"`
}

// EGContentRunContent ...
type EGContentRunContent struct {
	XMLName        xml.Name `xml:"EG_ContentRunContent"`
	CustomXml      *CTCustomXmlRun
	SmartTag       *CTSmartTagRun
	Sdt            *CTSdtRun
	Dir            *CTDirContentRun
	Bdo            *CTBdoContentRun
	R              *CTR
	EGRunLevelElts []*EGRunLevelElts
}

// CTDirContentRun ...
type CTDirContentRun struct {
	XMLName    xml.Name `xml:"CT_DirContentRun"`
	ValAttr    string   `xml:"val,attr,omitempty"`
	EGPContent []*EGPContent
}

// CTBdoContentRun ...
type CTBdoContentRun struct {
	XMLName    xml.Name `xml:"CT_BdoContentRun"`
	ValAttr    string   `xml:"val,attr,omitempty"`
	EGPContent []*EGPContent
}

// STDirection ...
type STDirection string

const (
	STDirection_ltr STDirection = "ltr"
	STDirection_rtl STDirection = "rtl"
)

// CTSdtContentRun ...
type CTSdtContentRun struct {
	XMLName    xml.Name `xml:"CT_SdtContentRun"`
	EGPContent []*EGPContent
}

// EGContentBlockContent ...
type EGContentBlockContent struct {
	XMLName        xml.Name `xml:"EG_ContentBlockContent"`
	CustomXml      *CTCustomXmlBlock
	Sdt            *CTSdtBlock
	P              []*CTP
	Tbl            []*CTTbl
	EGRunLevelElts []*EGRunLevelElts
}

// CTSdtContentBlock ...
type CTSdtContentBlock struct {
	XMLName               xml.Name `xml:"CT_SdtContentBlock"`
	EGContentBlockContent []*EGContentBlockContent
}

// EGContentRowContent ...
type EGContentRowContent struct {
	XMLName        xml.Name `xml:"EG_ContentRowContent"`
	Tr             []*CTRow
	CustomXml      *CTCustomXmlRow
	Sdt            *CTSdtRow
	EGRunLevelElts []*EGRunLevelElts
}

// CTSdtContentRow ...
type CTSdtContentRow struct {
	XMLName             xml.Name `xml:"CT_SdtContentRow"`
	EGContentRowContent []*EGContentRowContent
}

// EGContentCellContent ...
type EGContentCellContent struct {
	XMLName        xml.Name `xml:"EG_ContentCellContent"`
	Tc             []*CTTc
	CustomXml      *CTCustomXmlCell
	Sdt            *CTSdtCell
	EGRunLevelElts []*EGRunLevelElts
}

// CTSdtContentCell ...
type CTSdtContentCell struct {
	XMLName              xml.Name `xml:"CT_SdtContentCell"`
	EGContentCellContent []*EGContentCellContent
}

// CTSdtBlock ...
type CTSdtBlock struct {
	XMLName    xml.Name           `xml:"CT_SdtBlock"`
	SdtPr      *CTSdtPr           `xml:"sdtPr"`
	SdtEndPr   *CTSdtEndPr        `xml:"sdtEndPr"`
	SdtContent *CTSdtContentBlock `xml:"sdtContent"`
}

// CTSdtRun ...
type CTSdtRun struct {
	XMLName    xml.Name         `xml:"CT_SdtRun"`
	SdtPr      *CTSdtPr         `xml:"sdtPr"`
	SdtEndPr   *CTSdtEndPr      `xml:"sdtEndPr"`
	SdtContent *CTSdtContentRun `xml:"sdtContent"`
}

// CTSdtCell ...
type CTSdtCell struct {
	XMLName    xml.Name          `xml:"CT_SdtCell"`
	SdtPr      *CTSdtPr          `xml:"sdtPr"`
	SdtEndPr   *CTSdtEndPr       `xml:"sdtEndPr"`
	SdtContent *CTSdtContentCell `xml:"sdtContent"`
}

// CTSdtRow ...
type CTSdtRow struct {
	XMLName    xml.Name         `xml:"CT_SdtRow"`
	SdtPr      *CTSdtPr         `xml:"sdtPr"`
	SdtEndPr   *CTSdtEndPr      `xml:"sdtEndPr"`
	SdtContent *CTSdtContentRow `xml:"sdtContent"`
}

// CTAttr ...
type CTAttr struct {
	XMLName  xml.Name `xml:"CT_Attr"`
	UriAttr  string   `xml:"uri,attr,omitempty"`
	NameAttr string   `xml:"name,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTCustomXmlRun ...
type CTCustomXmlRun struct {
	XMLName     xml.Name `xml:"CT_CustomXmlRun"`
	UriAttr     string   `xml:"uri,attr,omitempty"`
	ElementAttr string   `xml:"element,attr"`
	EGPContent  []*EGPContent
	CustomXmlPr *CTCustomXmlPr `xml:"customXmlPr"`
}

// CTSmartTagRun ...
type CTSmartTagRun struct {
	XMLName     xml.Name `xml:"CT_SmartTagRun"`
	UriAttr     string   `xml:"uri,attr,omitempty"`
	ElementAttr string   `xml:"element,attr"`
	EGPContent  []*EGPContent
	SmartTagPr  *CTSmartTagPr `xml:"smartTagPr"`
}

// CTCustomXmlBlock ...
type CTCustomXmlBlock struct {
	XMLName               xml.Name `xml:"CT_CustomXmlBlock"`
	UriAttr               string   `xml:"uri,attr,omitempty"`
	ElementAttr           string   `xml:"element,attr"`
	EGContentBlockContent []*EGContentBlockContent
	CustomXmlPr           *CTCustomXmlPr `xml:"customXmlPr"`
}

// CTCustomXmlPr ...
type CTCustomXmlPr struct {
	XMLName     xml.Name  `xml:"CT_CustomXmlPr"`
	Placeholder *CTString `xml:"placeholder"`
	Attr        []*CTAttr `xml:"attr"`
}

// CTCustomXmlRow ...
type CTCustomXmlRow struct {
	XMLName             xml.Name `xml:"CT_CustomXmlRow"`
	UriAttr             string   `xml:"uri,attr,omitempty"`
	ElementAttr         string   `xml:"element,attr"`
	EGContentRowContent []*EGContentRowContent
	CustomXmlPr         *CTCustomXmlPr `xml:"customXmlPr"`
}

// CTCustomXmlCell ...
type CTCustomXmlCell struct {
	XMLName              xml.Name `xml:"CT_CustomXmlCell"`
	UriAttr              string   `xml:"uri,attr,omitempty"`
	ElementAttr          string   `xml:"element,attr"`
	EGContentCellContent []*EGContentCellContent
	CustomXmlPr          *CTCustomXmlPr `xml:"customXmlPr"`
}

// CTSmartTagPr ...
type CTSmartTagPr struct {
	XMLName xml.Name  `xml:"CT_SmartTagPr"`
	Attr    []*CTAttr `xml:"attr"`
}

// EGPContent ...
type EGPContent struct {
	XMLName             xml.Name `xml:"EG_PContent"`
	FldSimple           []*CTSimpleField
	Hyperlink           *CTHyperlink
	SubDoc              *CTRel
	EGContentRunContent []*EGContentRunContent
}

// CTP ...
type CTP struct {
	XMLName          xml.Name `xml:"CT_P"`
	RsidRPrAttr      []byte   `xml:"rsidRPr,attr,omitempty"`
	RsidRAttr        []byte   `xml:"rsidR,attr,omitempty"`
	RsidDelAttr      []byte   `xml:"rsidDel,attr,omitempty"`
	RsidPAttr        []byte   `xml:"rsidP,attr,omitempty"`
	RsidRDefaultAttr []byte   `xml:"rsidRDefault,attr,omitempty"`
	EGPContent       []*EGPContent
	PPr              *CTPPr `xml:"pPr"`
}

// STTblWidth ...
type STTblWidth string

const (
	STTblWidth_nil  STTblWidth = "nil"
	STTblWidth_pct  STTblWidth = "pct"
	STTblWidth_dxa  STTblWidth = "dxa"
	STTblWidth_auto STTblWidth = "auto"
)

// CTHeight ...
type CTHeight struct {
	XMLName   xml.Name        `xml:"CT_Height"`
	ValAttr   *STTwipsMeasure `xml:"val,attr,omitempty"`
	HRuleAttr string          `xml:"hRule,attr,omitempty"`
}

// STMeasurementOrPercent ...
type STMeasurementOrPercent struct {
	XMLName                  xml.Name `xml:"ST_MeasurementOrPercent"`
	STDecimalNumberOrPercent *STDecimalNumberOrPercent
	STUniversalMeasure       string
}

// CTTblWidth ...
type CTTblWidth struct {
	XMLName  xml.Name                `xml:"CT_TblWidth"`
	WAttr    *STMeasurementOrPercent `xml:"w,attr,omitempty"`
	TypeAttr string                  `xml:"type,attr,omitempty"`
}

// CTTblGridCol ...
type CTTblGridCol struct {
	XMLName xml.Name        `xml:"CT_TblGridCol"`
	WAttr   *STTwipsMeasure `xml:"w,attr,omitempty"`
}

// CTTblGridBase ...
type CTTblGridBase struct {
	XMLName xml.Name        `xml:"CT_TblGridBase"`
	GridCol []*CTTblGridCol `xml:"gridCol"`
}

// CTTblGrid ...
type CTTblGrid struct {
	XMLName       xml.Name         `xml:"CT_TblGrid"`
	TblGridChange *CTTblGridChange `xml:"tblGridChange"`
}

// CTTcBorders ...
type CTTcBorders struct {
	XMLName xml.Name  `xml:"CT_TcBorders"`
	Top     *CTBorder `xml:"top"`
	Start   *CTBorder `xml:"start"`
	Left    *CTBorder `xml:"left"`
	Bottom  *CTBorder `xml:"bottom"`
	End     *CTBorder `xml:"end"`
	Right   *CTBorder `xml:"right"`
	InsideH *CTBorder `xml:"insideH"`
	InsideV *CTBorder `xml:"insideV"`
	Tl2br   *CTBorder `xml:"tl2br"`
	Tr2bl   *CTBorder `xml:"tr2bl"`
}

// CTTcMar ...
type CTTcMar struct {
	XMLName xml.Name    `xml:"CT_TcMar"`
	Top     *CTTblWidth `xml:"top"`
	Start   *CTTblWidth `xml:"start"`
	Left    *CTTblWidth `xml:"left"`
	Bottom  *CTTblWidth `xml:"bottom"`
	End     *CTTblWidth `xml:"end"`
	Right   *CTTblWidth `xml:"right"`
}

// STMerge ...
type STMerge string

const (
	STMerge_continue STMerge = "continue"
	STMerge_restart  STMerge = "restart"
)

// CTVMerge ...
type CTVMerge struct {
	XMLName xml.Name `xml:"CT_VMerge"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTHMerge ...
type CTHMerge struct {
	XMLName xml.Name `xml:"CT_HMerge"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTTcPrBase ...
type CTTcPrBase struct {
	XMLName       xml.Name         `xml:"CT_TcPrBase"`
	CnfStyle      *CTCnf           `xml:"cnfStyle"`
	TcW           *CTTblWidth      `xml:"tcW"`
	GridSpan      *CTDecimalNumber `xml:"gridSpan"`
	HMerge        *CTHMerge        `xml:"hMerge"`
	VMerge        *CTVMerge        `xml:"vMerge"`
	TcBorders     *CTTcBorders     `xml:"tcBorders"`
	Shd           *CTShd           `xml:"shd"`
	NoWrap        *CTOnOff         `xml:"noWrap"`
	TcMar         *CTTcMar         `xml:"tcMar"`
	TextDirection *CTTextDirection `xml:"textDirection"`
	TcFitText     *CTOnOff         `xml:"tcFitText"`
	VAlign        *CTVerticalJc    `xml:"vAlign"`
	HideMark      *CTOnOff         `xml:"hideMark"`
	Headers       *CTHeaders       `xml:"headers"`
}

// CTTcPr ...
type CTTcPr struct {
	XMLName    xml.Name      `xml:"CT_TcPr"`
	TcPrChange *CTTcPrChange `xml:"tcPrChange"`
}

// CTTcPrInner ...
type CTTcPrInner struct {
	XMLName              xml.Name `xml:"CT_TcPrInner"`
	EGCellMarkupElements []*EGCellMarkupElements
}

// CTTc ...
type CTTc struct {
	XMLName          xml.Name `xml:"CT_Tc"`
	IdAttr           string   `xml:"id,attr,omitempty"`
	EGBlockLevelElts []*EGBlockLevelElts
	TcPr             *CTTcPr `xml:"tcPr"`
}

// STCnf ...
// Pattern: [01]*
type STCnf string

// CTCnf ...
type CTCnf struct {
	XMLName                 xml.Name `xml:"CT_Cnf"`
	ValAttr                 string   `xml:"val,attr,omitempty"`
	FirstRowAttr            *STOnOff `xml:"firstRow,attr,omitempty"`
	LastRowAttr             *STOnOff `xml:"lastRow,attr,omitempty"`
	FirstColumnAttr         *STOnOff `xml:"firstColumn,attr,omitempty"`
	LastColumnAttr          *STOnOff `xml:"lastColumn,attr,omitempty"`
	OddVBandAttr            *STOnOff `xml:"oddVBand,attr,omitempty"`
	EvenVBandAttr           *STOnOff `xml:"evenVBand,attr,omitempty"`
	OddHBandAttr            *STOnOff `xml:"oddHBand,attr,omitempty"`
	EvenHBandAttr           *STOnOff `xml:"evenHBand,attr,omitempty"`
	FirstRowFirstColumnAttr *STOnOff `xml:"firstRowFirstColumn,attr,omitempty"`
	FirstRowLastColumnAttr  *STOnOff `xml:"firstRowLastColumn,attr,omitempty"`
	LastRowFirstColumnAttr  *STOnOff `xml:"lastRowFirstColumn,attr,omitempty"`
	LastRowLastColumnAttr   *STOnOff `xml:"lastRowLastColumn,attr,omitempty"`
}

// CTHeaders ...
type CTHeaders struct {
	XMLName xml.Name  `xml:"CT_Headers"`
	Header  *CTString `xml:"header"`
}

// CTTrPrBase ...
type CTTrPrBase struct {
	XMLName        xml.Name         `xml:"CT_TrPrBase"`
	CnfStyle       *CTCnf           `xml:"cnfStyle"`
	DivId          *CTDecimalNumber `xml:"divId"`
	GridBefore     *CTDecimalNumber `xml:"gridBefore"`
	GridAfter      *CTDecimalNumber `xml:"gridAfter"`
	WBefore        *CTTblWidth      `xml:"wBefore"`
	WAfter         *CTTblWidth      `xml:"wAfter"`
	CantSplit      *CTOnOff         `xml:"cantSplit"`
	TrHeight       *CTHeight        `xml:"trHeight"`
	TblHeader      *CTOnOff         `xml:"tblHeader"`
	TblCellSpacing *CTTblWidth      `xml:"tblCellSpacing"`
	Jc             *CTJcTable       `xml:"jc"`
	Hidden         *CTOnOff         `xml:"hidden"`
}

// CTTrPr ...
type CTTrPr struct {
	XMLName    xml.Name       `xml:"CT_TrPr"`
	Ins        *CTTrackChange `xml:"ins"`
	Del        *CTTrackChange `xml:"del"`
	TrPrChange *CTTrPrChange  `xml:"trPrChange"`
}

// CTRow ...
type CTRow struct {
	XMLName              xml.Name `xml:"CT_Row"`
	RsidRPrAttr          []byte   `xml:"rsidRPr,attr,omitempty"`
	RsidRAttr            []byte   `xml:"rsidR,attr,omitempty"`
	RsidDelAttr          []byte   `xml:"rsidDel,attr,omitempty"`
	RsidTrAttr           []byte   `xml:"rsidTr,attr,omitempty"`
	EGContentCellContent []*EGContentCellContent
	TblPrEx              *CTTblPrEx `xml:"tblPrEx"`
	TrPr                 *CTTrPr    `xml:"trPr"`
}

// STTblLayoutType ...
type STTblLayoutType string

const (
	STTblLayoutType_fixed   STTblLayoutType = "fixed"
	STTblLayoutType_autofit STTblLayoutType = "autofit"
)

// CTTblLayoutType ...
type CTTblLayoutType struct {
	XMLName  xml.Name `xml:"CT_TblLayoutType"`
	TypeAttr string   `xml:"type,attr,omitempty"`
}

// STTblOverlap ...
type STTblOverlap string

const (
	STTblOverlap_never   STTblOverlap = "never"
	STTblOverlap_overlap STTblOverlap = "overlap"
)

// CTTblOverlap ...
type CTTblOverlap struct {
	XMLName xml.Name `xml:"CT_TblOverlap"`
	ValAttr string   `xml:"val,attr"`
}

// CTTblPPr ...
type CTTblPPr struct {
	XMLName            xml.Name              `xml:"CT_TblPPr"`
	LeftFromTextAttr   *STTwipsMeasure       `xml:"leftFromText,attr,omitempty"`
	RightFromTextAttr  *STTwipsMeasure       `xml:"rightFromText,attr,omitempty"`
	TopFromTextAttr    *STTwipsMeasure       `xml:"topFromText,attr,omitempty"`
	BottomFromTextAttr *STTwipsMeasure       `xml:"bottomFromText,attr,omitempty"`
	VertAnchorAttr     string                `xml:"vertAnchor,attr,omitempty"`
	HorzAnchorAttr     string                `xml:"horzAnchor,attr,omitempty"`
	TblpXSpecAttr      string                `xml:"tblpXSpec,attr,omitempty"`
	TblpXAttr          *STSignedTwipsMeasure `xml:"tblpX,attr,omitempty"`
	TblpYSpecAttr      string                `xml:"tblpYSpec,attr,omitempty"`
	TblpYAttr          *STSignedTwipsMeasure `xml:"tblpY,attr,omitempty"`
}

// CTTblCellMar ...
type CTTblCellMar struct {
	XMLName xml.Name    `xml:"CT_TblCellMar"`
	Top     *CTTblWidth `xml:"top"`
	Start   *CTTblWidth `xml:"start"`
	Left    *CTTblWidth `xml:"left"`
	Bottom  *CTTblWidth `xml:"bottom"`
	End     *CTTblWidth `xml:"end"`
	Right   *CTTblWidth `xml:"right"`
}

// CTTblBorders ...
type CTTblBorders struct {
	XMLName xml.Name  `xml:"CT_TblBorders"`
	Top     *CTBorder `xml:"top"`
	Start   *CTBorder `xml:"start"`
	Left    *CTBorder `xml:"left"`
	Bottom  *CTBorder `xml:"bottom"`
	End     *CTBorder `xml:"end"`
	Right   *CTBorder `xml:"right"`
	InsideH *CTBorder `xml:"insideH"`
	InsideV *CTBorder `xml:"insideV"`
}

// CTTblPrBase ...
type CTTblPrBase struct {
	XMLName             xml.Name         `xml:"CT_TblPrBase"`
	TblStyle            *CTString        `xml:"tblStyle"`
	TblpPr              *CTTblPPr        `xml:"tblpPr"`
	TblOverlap          *CTTblOverlap    `xml:"tblOverlap"`
	BidiVisual          *CTOnOff         `xml:"bidiVisual"`
	TblStyleRowBandSize *CTDecimalNumber `xml:"tblStyleRowBandSize"`
	TblStyleColBandSize *CTDecimalNumber `xml:"tblStyleColBandSize"`
	TblW                *CTTblWidth      `xml:"tblW"`
	Jc                  *CTJcTable       `xml:"jc"`
	TblCellSpacing      *CTTblWidth      `xml:"tblCellSpacing"`
	TblInd              *CTTblWidth      `xml:"tblInd"`
	TblBorders          *CTTblBorders    `xml:"tblBorders"`
	Shd                 *CTShd           `xml:"shd"`
	TblLayout           *CTTblLayoutType `xml:"tblLayout"`
	TblCellMar          *CTTblCellMar    `xml:"tblCellMar"`
	TblLook             *CTTblLook       `xml:"tblLook"`
	TblCaption          *CTString        `xml:"tblCaption"`
	TblDescription      *CTString        `xml:"tblDescription"`
}

// CTTblPr ...
type CTTblPr struct {
	XMLName     xml.Name       `xml:"CT_TblPr"`
	TblPrChange *CTTblPrChange `xml:"tblPrChange"`
}

// CTTblPrExBase ...
type CTTblPrExBase struct {
	XMLName        xml.Name         `xml:"CT_TblPrExBase"`
	TblW           *CTTblWidth      `xml:"tblW"`
	Jc             *CTJcTable       `xml:"jc"`
	TblCellSpacing *CTTblWidth      `xml:"tblCellSpacing"`
	TblInd         *CTTblWidth      `xml:"tblInd"`
	TblBorders     *CTTblBorders    `xml:"tblBorders"`
	Shd            *CTShd           `xml:"shd"`
	TblLayout      *CTTblLayoutType `xml:"tblLayout"`
	TblCellMar     *CTTblCellMar    `xml:"tblCellMar"`
	TblLook        *CTTblLook       `xml:"tblLook"`
}

// CTTblPrEx ...
type CTTblPrEx struct {
	XMLName       xml.Name         `xml:"CT_TblPrEx"`
	TblPrExChange *CTTblPrExChange `xml:"tblPrExChange"`
}

// CTTbl ...
type CTTbl struct {
	XMLName               xml.Name `xml:"CT_Tbl"`
	EGRangeMarkupElements []*EGRangeMarkupElements
	EGContentRowContent   []*EGContentRowContent
	TblPr                 *CTTblPr   `xml:"tblPr"`
	TblGrid               *CTTblGrid `xml:"tblGrid"`
}

// CTTblLook ...
type CTTblLook struct {
	XMLName         xml.Name `xml:"CT_TblLook"`
	FirstRowAttr    *STOnOff `xml:"firstRow,attr,omitempty"`
	LastRowAttr     *STOnOff `xml:"lastRow,attr,omitempty"`
	FirstColumnAttr *STOnOff `xml:"firstColumn,attr,omitempty"`
	LastColumnAttr  *STOnOff `xml:"lastColumn,attr,omitempty"`
	NoHBandAttr     *STOnOff `xml:"noHBand,attr,omitempty"`
	NoVBandAttr     *STOnOff `xml:"noVBand,attr,omitempty"`
	ValAttr         []byte   `xml:"val,attr,omitempty"`
}

// STFtnPos ...
type STFtnPos string

const (
	STFtnPos_pageBottom  STFtnPos = "pageBottom"
	STFtnPos_beneathText STFtnPos = "beneathText"
	STFtnPos_sectEnd     STFtnPos = "sectEnd"
	STFtnPos_docEnd      STFtnPos = "docEnd"
)

// CTFtnPos ...
type CTFtnPos struct {
	XMLName xml.Name `xml:"CT_FtnPos"`
	ValAttr string   `xml:"val,attr"`
}

// STEdnPos ...
type STEdnPos string

const (
	STEdnPos_sectEnd STEdnPos = "sectEnd"
	STEdnPos_docEnd  STEdnPos = "docEnd"
)

// CTEdnPos ...
type CTEdnPos struct {
	XMLName xml.Name `xml:"CT_EdnPos"`
	ValAttr string   `xml:"val,attr"`
}

// CTNumFmt ...
type CTNumFmt struct {
	XMLName    xml.Name `xml:"CT_NumFmt"`
	ValAttr    string   `xml:"val,attr"`
	FormatAttr string   `xml:"format,attr,omitempty"`
}

// STRestartNumber ...
type STRestartNumber string

const (
	STRestartNumber_continuous STRestartNumber = "continuous"
	STRestartNumber_eachSect   STRestartNumber = "eachSect"
	STRestartNumber_eachPage   STRestartNumber = "eachPage"
)

// CTNumRestart ...
type CTNumRestart struct {
	XMLName xml.Name `xml:"CT_NumRestart"`
	ValAttr string   `xml:"val,attr"`
}

// CTFtnEdnRef ...
type CTFtnEdnRef struct {
	XMLName               xml.Name `xml:"CT_FtnEdnRef"`
	CustomMarkFollowsAttr *STOnOff `xml:"customMarkFollows,attr,omitempty"`
	IdAttr                int      `xml:"id,attr"`
}

// CTFtnEdnSepRef ...
type CTFtnEdnSepRef struct {
	XMLName xml.Name `xml:"CT_FtnEdnSepRef"`
	IdAttr  int      `xml:"id,attr"`
}

// CTFtnEdn ...
type CTFtnEdn struct {
	XMLName          xml.Name `xml:"CT_FtnEdn"`
	TypeAttr         string   `xml:"type,attr,omitempty"`
	IdAttr           int      `xml:"id,attr"`
	EGBlockLevelElts []*EGBlockLevelElts
}

// EGFtnEdnNumProps ...
type EGFtnEdnNumProps struct {
	XMLName    xml.Name `xml:"EG_FtnEdnNumProps"`
	NumStart   *CTDecimalNumber
	NumRestart *CTNumRestart
}

// CTFtnProps ...
type CTFtnProps struct {
	XMLName          xml.Name `xml:"CT_FtnProps"`
	EGFtnEdnNumProps *EGFtnEdnNumProps
	Pos              *CTFtnPos `xml:"pos"`
	NumFmt           *CTNumFmt `xml:"numFmt"`
}

// CTEdnProps ...
type CTEdnProps struct {
	XMLName          xml.Name `xml:"CT_EdnProps"`
	EGFtnEdnNumProps *EGFtnEdnNumProps
	Pos              *CTEdnPos `xml:"pos"`
	NumFmt           *CTNumFmt `xml:"numFmt"`
}

// CTFtnDocProps ...
type CTFtnDocProps struct {
	XMLName  xml.Name          `xml:"CT_FtnDocProps"`
	Footnote []*CTFtnEdnSepRef `xml:"footnote"`
}

// CTEdnDocProps ...
type CTEdnDocProps struct {
	XMLName xml.Name          `xml:"CT_EdnDocProps"`
	Endnote []*CTFtnEdnSepRef `xml:"endnote"`
}

// CTRecipientData ...
type CTRecipientData struct {
	XMLName   xml.Name         `xml:"CT_RecipientData"`
	Active    *CTOnOff         `xml:"active"`
	Column    *CTDecimalNumber `xml:"column"`
	UniqueTag *CTBase64Binary  `xml:"uniqueTag"`
}

// CTBase64Binary ...
type CTBase64Binary struct {
	XMLName xml.Name `xml:"CT_Base64Binary"`
	ValAttr []byte   `xml:"val,attr"`
}

// CTRecipients ...
type CTRecipients struct {
	XMLName       xml.Name           `xml:"CT_Recipients"`
	RecipientData []*CTRecipientData `xml:"recipientData"`
}

// Recipients ...
type Recipients *CTRecipients

// CTOdsoFieldMapData ...
type CTOdsoFieldMapData struct {
	XMLName        xml.Name                     `xml:"CT_OdsoFieldMapData"`
	Type           *CTMailMergeOdsoFMDFieldType `xml:"type"`
	Name           *CTString                    `xml:"name"`
	MappedName     *CTString                    `xml:"mappedName"`
	Column         *CTDecimalNumber             `xml:"column"`
	Lid            *CTLang                      `xml:"lid"`
	DynamicAddress *CTOnOff                     `xml:"dynamicAddress"`
}

// STMailMergeSourceType ...
type STMailMergeSourceType string

const (
	STMailMergeSourceType_database    STMailMergeSourceType = "database"
	STMailMergeSourceType_addressBook STMailMergeSourceType = "addressBook"
	STMailMergeSourceType_document1   STMailMergeSourceType = "document1"
	STMailMergeSourceType_document2   STMailMergeSourceType = "document2"
	STMailMergeSourceType_text        STMailMergeSourceType = "text"
	STMailMergeSourceType_email       STMailMergeSourceType = "email"
	STMailMergeSourceType_native      STMailMergeSourceType = "native"
	STMailMergeSourceType_legacy      STMailMergeSourceType = "legacy"
	STMailMergeSourceType_master      STMailMergeSourceType = "master"
)

// CTMailMergeSourceType ...
type CTMailMergeSourceType struct {
	XMLName xml.Name `xml:"CT_MailMergeSourceType"`
	ValAttr string   `xml:"val,attr"`
}

// CTOdso ...
type CTOdso struct {
	XMLName       xml.Name               `xml:"CT_Odso"`
	Udl           *CTString              `xml:"udl"`
	Table         *CTString              `xml:"table"`
	Src           *CTRel                 `xml:"src"`
	ColDelim      *CTDecimalNumber       `xml:"colDelim"`
	Type          *CTMailMergeSourceType `xml:"type"`
	FHdr          *CTOnOff               `xml:"fHdr"`
	FieldMapData  []*CTOdsoFieldMapData  `xml:"fieldMapData"`
	RecipientData []*CTRel               `xml:"recipientData"`
}

// CTMailMerge ...
type CTMailMerge struct {
	XMLName                 xml.Name             `xml:"CT_MailMerge"`
	MainDocumentType        *CTMailMergeDocType  `xml:"mainDocumentType"`
	LinkToQuery             *CTOnOff             `xml:"linkToQuery"`
	DataType                *CTMailMergeDataType `xml:"dataType"`
	ConnectString           *CTString            `xml:"connectString"`
	Query                   *CTString            `xml:"query"`
	DataSource              *CTRel               `xml:"dataSource"`
	HeaderSource            *CTRel               `xml:"headerSource"`
	DoNotSuppressBlankLines *CTOnOff             `xml:"doNotSuppressBlankLines"`
	Destination             *CTMailMergeDest     `xml:"destination"`
	AddressFieldName        *CTString            `xml:"addressFieldName"`
	MailSubject             *CTString            `xml:"mailSubject"`
	MailAsAttachment        *CTOnOff             `xml:"mailAsAttachment"`
	ViewMergedData          *CTOnOff             `xml:"viewMergedData"`
	ActiveRecord            *CTDecimalNumber     `xml:"activeRecord"`
	CheckErrors             *CTDecimalNumber     `xml:"checkErrors"`
	Odso                    *CTOdso              `xml:"odso"`
}

// STTargetScreenSz ...
type STTargetScreenSz string

const (
	STTargetScreenSz_544x376   STTargetScreenSz = "544x376"
	STTargetScreenSz_640x480   STTargetScreenSz = "640x480"
	STTargetScreenSz_720x512   STTargetScreenSz = "720x512"
	STTargetScreenSz_800x600   STTargetScreenSz = "800x600"
	STTargetScreenSz_1024x768  STTargetScreenSz = "1024x768"
	STTargetScreenSz_1152x882  STTargetScreenSz = "1152x882"
	STTargetScreenSz_1152x900  STTargetScreenSz = "1152x900"
	STTargetScreenSz_1280x1024 STTargetScreenSz = "1280x1024"
	STTargetScreenSz_1600x1200 STTargetScreenSz = "1600x1200"
	STTargetScreenSz_1800x1440 STTargetScreenSz = "1800x1440"
	STTargetScreenSz_1920x1200 STTargetScreenSz = "1920x1200"
)

// CTTargetScreenSz ...
type CTTargetScreenSz struct {
	XMLName xml.Name `xml:"CT_TargetScreenSz"`
	ValAttr string   `xml:"val,attr"`
}

// CTCompat ...
type CTCompat struct {
	XMLName                           xml.Name           `xml:"CT_Compat"`
	UseSingleBorderforContiguousCells *CTOnOff           `xml:"useSingleBorderforContiguousCells"`
	WpJustification                   *CTOnOff           `xml:"wpJustification"`
	NoTabHangInd                      *CTOnOff           `xml:"noTabHangInd"`
	NoLeading                         *CTOnOff           `xml:"noLeading"`
	SpaceForUL                        *CTOnOff           `xml:"spaceForUL"`
	NoColumnBalance                   *CTOnOff           `xml:"noColumnBalance"`
	BalanceSingleByteDoubleByteWidth  *CTOnOff           `xml:"balanceSingleByteDoubleByteWidth"`
	NoExtraLineSpacing                *CTOnOff           `xml:"noExtraLineSpacing"`
	DoNotLeaveBackslashAlone          *CTOnOff           `xml:"doNotLeaveBackslashAlone"`
	UlTrailSpace                      *CTOnOff           `xml:"ulTrailSpace"`
	DoNotExpandShiftReturn            *CTOnOff           `xml:"doNotExpandShiftReturn"`
	SpacingInWholePoints              *CTOnOff           `xml:"spacingInWholePoints"`
	LineWrapLikeWord6                 *CTOnOff           `xml:"lineWrapLikeWord6"`
	PrintBodyTextBeforeHeader         *CTOnOff           `xml:"printBodyTextBeforeHeader"`
	PrintColBlack                     *CTOnOff           `xml:"printColBlack"`
	WpSpaceWidth                      *CTOnOff           `xml:"wpSpaceWidth"`
	ShowBreaksInFrames                *CTOnOff           `xml:"showBreaksInFrames"`
	SubFontBySize                     *CTOnOff           `xml:"subFontBySize"`
	SuppressBottomSpacing             *CTOnOff           `xml:"suppressBottomSpacing"`
	SuppressTopSpacing                *CTOnOff           `xml:"suppressTopSpacing"`
	SuppressSpacingAtTopOfPage        *CTOnOff           `xml:"suppressSpacingAtTopOfPage"`
	SuppressTopSpacingWP              *CTOnOff           `xml:"suppressTopSpacingWP"`
	SuppressSpBfAfterPgBrk            *CTOnOff           `xml:"suppressSpBfAfterPgBrk"`
	SwapBordersFacingPages            *CTOnOff           `xml:"swapBordersFacingPages"`
	ConvMailMergeEsc                  *CTOnOff           `xml:"convMailMergeEsc"`
	TruncateFontHeightsLikeWP6        *CTOnOff           `xml:"truncateFontHeightsLikeWP6"`
	MwSmallCaps                       *CTOnOff           `xml:"mwSmallCaps"`
	UsePrinterMetrics                 *CTOnOff           `xml:"usePrinterMetrics"`
	DoNotSuppressParagraphBorders     *CTOnOff           `xml:"doNotSuppressParagraphBorders"`
	WrapTrailSpaces                   *CTOnOff           `xml:"wrapTrailSpaces"`
	FootnoteLayoutLikeWW8             *CTOnOff           `xml:"footnoteLayoutLikeWW8"`
	ShapeLayoutLikeWW8                *CTOnOff           `xml:"shapeLayoutLikeWW8"`
	AlignTablesRowByRow               *CTOnOff           `xml:"alignTablesRowByRow"`
	ForgetLastTabAlignment            *CTOnOff           `xml:"forgetLastTabAlignment"`
	AdjustLineHeightInTable           *CTOnOff           `xml:"adjustLineHeightInTable"`
	AutoSpaceLikeWord95               *CTOnOff           `xml:"autoSpaceLikeWord95"`
	NoSpaceRaiseLower                 *CTOnOff           `xml:"noSpaceRaiseLower"`
	DoNotUseHTMLParagraphAutoSpacing  *CTOnOff           `xml:"doNotUseHTMLParagraphAutoSpacing"`
	LayoutRawTableWidth               *CTOnOff           `xml:"layoutRawTableWidth"`
	LayoutTableRowsApart              *CTOnOff           `xml:"layoutTableRowsApart"`
	UseWord97LineBreakRules           *CTOnOff           `xml:"useWord97LineBreakRules"`
	DoNotBreakWrappedTables           *CTOnOff           `xml:"doNotBreakWrappedTables"`
	DoNotSnapToGridInCell             *CTOnOff           `xml:"doNotSnapToGridInCell"`
	SelectFldWithFirstOrLastChar      *CTOnOff           `xml:"selectFldWithFirstOrLastChar"`
	ApplyBreakingRules                *CTOnOff           `xml:"applyBreakingRules"`
	DoNotWrapTextWithPunct            *CTOnOff           `xml:"doNotWrapTextWithPunct"`
	DoNotUseEastAsianBreakRules       *CTOnOff           `xml:"doNotUseEastAsianBreakRules"`
	UseWord2002TableStyleRules        *CTOnOff           `xml:"useWord2002TableStyleRules"`
	GrowAutofit                       *CTOnOff           `xml:"growAutofit"`
	UseFELayout                       *CTOnOff           `xml:"useFELayout"`
	UseNormalStyleForList             *CTOnOff           `xml:"useNormalStyleForList"`
	DoNotUseIndentAsNumberingTabStop  *CTOnOff           `xml:"doNotUseIndentAsNumberingTabStop"`
	UseAltKinsokuLineBreakRules       *CTOnOff           `xml:"useAltKinsokuLineBreakRules"`
	AllowSpaceOfSameStyleInTable      *CTOnOff           `xml:"allowSpaceOfSameStyleInTable"`
	DoNotSuppressIndentation          *CTOnOff           `xml:"doNotSuppressIndentation"`
	DoNotAutofitConstrainedTables     *CTOnOff           `xml:"doNotAutofitConstrainedTables"`
	AutofitToFirstFixedWidthCell      *CTOnOff           `xml:"autofitToFirstFixedWidthCell"`
	UnderlineTabInNumList             *CTOnOff           `xml:"underlineTabInNumList"`
	DisplayHangulFixedWidth           *CTOnOff           `xml:"displayHangulFixedWidth"`
	SplitPgBreakAndParaMark           *CTOnOff           `xml:"splitPgBreakAndParaMark"`
	DoNotVertAlignCellWithSp          *CTOnOff           `xml:"doNotVertAlignCellWithSp"`
	DoNotBreakConstrainedForcedTable  *CTOnOff           `xml:"doNotBreakConstrainedForcedTable"`
	DoNotVertAlignInTxbx              *CTOnOff           `xml:"doNotVertAlignInTxbx"`
	UseAnsiKerningPairs               *CTOnOff           `xml:"useAnsiKerningPairs"`
	CachedColBalance                  *CTOnOff           `xml:"cachedColBalance"`
	CompatSetting                     []*CTCompatSetting `xml:"compatSetting"`
}

// CTCompatSetting ...
type CTCompatSetting struct {
	XMLName  xml.Name `xml:"CT_CompatSetting"`
	NameAttr string   `xml:"name,attr,omitempty"`
	UriAttr  string   `xml:"uri,attr,omitempty"`
	ValAttr  string   `xml:"val,attr,omitempty"`
}

// CTDocVar ...
type CTDocVar struct {
	XMLName  xml.Name `xml:"CT_DocVar"`
	NameAttr string   `xml:"name,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTDocVars ...
type CTDocVars struct {
	XMLName xml.Name    `xml:"CT_DocVars"`
	DocVar  []*CTDocVar `xml:"docVar"`
}

// CTDocRsids ...
type CTDocRsids struct {
	XMLName  xml.Name           `xml:"CT_DocRsids"`
	RsidRoot *CTLongHexNumber   `xml:"rsidRoot"`
	Rsid     []*CTLongHexNumber `xml:"rsid"`
}

// STCharacterSpacing ...
type STCharacterSpacing string

const (
	STCharacterSpacing_doNotCompress                      STCharacterSpacing = "doNotCompress"
	STCharacterSpacing_compressPunctuation                STCharacterSpacing = "compressPunctuation"
	STCharacterSpacing_compressPunctuationAndJapaneseKana STCharacterSpacing = "compressPunctuationAndJapaneseKana"
)

// CTCharacterSpacing ...
type CTCharacterSpacing struct {
	XMLName xml.Name `xml:"CT_CharacterSpacing"`
	ValAttr string   `xml:"val,attr"`
}

// CTSaveThroughXslt ...
type CTSaveThroughXslt struct {
	XMLName        xml.Name `xml:"CT_SaveThroughXslt"`
	RIdAttr        string   `xml:"r:id,attr,omitempty"`
	SolutionIDAttr string   `xml:"solutionID,attr,omitempty"`
}

// CTRPrDefault ...
type CTRPrDefault struct {
	XMLName xml.Name `xml:"CT_RPrDefault"`
	RPr     *CTRPr   `xml:"rPr"`
}

// CTPPrDefault ...
type CTPPrDefault struct {
	XMLName xml.Name      `xml:"CT_PPrDefault"`
	PPr     *CTPPrGeneral `xml:"pPr"`
}

// CTDocDefaults ...
type CTDocDefaults struct {
	XMLName    xml.Name      `xml:"CT_DocDefaults"`
	RPrDefault *CTRPrDefault `xml:"rPrDefault"`
	PPrDefault *CTPPrDefault `xml:"pPrDefault"`
}

// STWmlColorSchemeIndex ...
type STWmlColorSchemeIndex string

const (
	STWmlColorSchemeIndex_dark1             STWmlColorSchemeIndex = "dark1"
	STWmlColorSchemeIndex_light1            STWmlColorSchemeIndex = "light1"
	STWmlColorSchemeIndex_dark2             STWmlColorSchemeIndex = "dark2"
	STWmlColorSchemeIndex_light2            STWmlColorSchemeIndex = "light2"
	STWmlColorSchemeIndex_accent1           STWmlColorSchemeIndex = "accent1"
	STWmlColorSchemeIndex_accent2           STWmlColorSchemeIndex = "accent2"
	STWmlColorSchemeIndex_accent3           STWmlColorSchemeIndex = "accent3"
	STWmlColorSchemeIndex_accent4           STWmlColorSchemeIndex = "accent4"
	STWmlColorSchemeIndex_accent5           STWmlColorSchemeIndex = "accent5"
	STWmlColorSchemeIndex_accent6           STWmlColorSchemeIndex = "accent6"
	STWmlColorSchemeIndex_hyperlink         STWmlColorSchemeIndex = "hyperlink"
	STWmlColorSchemeIndex_followedHyperlink STWmlColorSchemeIndex = "followedHyperlink"
)

// CTColorSchemeMapping ...
type CTColorSchemeMapping struct {
	XMLName               xml.Name `xml:"CT_ColorSchemeMapping"`
	Bg1Attr               string   `xml:"bg1,attr,omitempty"`
	T1Attr                string   `xml:"t1,attr,omitempty"`
	Bg2Attr               string   `xml:"bg2,attr,omitempty"`
	T2Attr                string   `xml:"t2,attr,omitempty"`
	Accent1Attr           string   `xml:"accent1,attr,omitempty"`
	Accent2Attr           string   `xml:"accent2,attr,omitempty"`
	Accent3Attr           string   `xml:"accent3,attr,omitempty"`
	Accent4Attr           string   `xml:"accent4,attr,omitempty"`
	Accent5Attr           string   `xml:"accent5,attr,omitempty"`
	Accent6Attr           string   `xml:"accent6,attr,omitempty"`
	HyperlinkAttr         string   `xml:"hyperlink,attr,omitempty"`
	FollowedHyperlinkAttr string   `xml:"followedHyperlink,attr,omitempty"`
}

// CTReadingModeInkLockDown ...
type CTReadingModeInkLockDown struct {
	XMLName      xml.Name                  `xml:"CT_ReadingModeInkLockDown"`
	ActualPgAttr *STOnOff                  `xml:"actualPg,attr"`
	WAttr        uint64                    `xml:"w,attr"`
	HAttr        uint64                    `xml:"h,attr"`
	FontSzAttr   *STDecimalNumberOrPercent `xml:"fontSz,attr"`
}

// CTWriteProtection ...
type CTWriteProtection struct {
	XMLName                xml.Name `xml:"CT_WriteProtection"`
	AGPassword             *AGPassword
	AGTransitionalPassword *AGTransitionalPassword
	RecommendedAttr        *STOnOff `xml:"recommended,attr,omitempty"`
}

// CTSettings ...
type CTSettings struct {
	XMLName                             xml.Name                  `xml:"CT_Settings"`
	WriteProtection                     *CTWriteProtection        `xml:"writeProtection"`
	View                                *CTView                   `xml:"view"`
	Zoom                                *CTZoom                   `xml:"zoom"`
	RemovePersonalInformation           *CTOnOff                  `xml:"removePersonalInformation"`
	RemoveDateAndTime                   *CTOnOff                  `xml:"removeDateAndTime"`
	DoNotDisplayPageBoundaries          *CTOnOff                  `xml:"doNotDisplayPageBoundaries"`
	DisplayBackgroundShape              *CTOnOff                  `xml:"displayBackgroundShape"`
	PrintPostScriptOverText             *CTOnOff                  `xml:"printPostScriptOverText"`
	PrintFractionalCharacterWidth       *CTOnOff                  `xml:"printFractionalCharacterWidth"`
	PrintFormsData                      *CTOnOff                  `xml:"printFormsData"`
	EmbedTrueTypeFonts                  *CTOnOff                  `xml:"embedTrueTypeFonts"`
	EmbedSystemFonts                    *CTOnOff                  `xml:"embedSystemFonts"`
	SaveSubsetFonts                     *CTOnOff                  `xml:"saveSubsetFonts"`
	SaveFormsData                       *CTOnOff                  `xml:"saveFormsData"`
	MirrorMargins                       *CTOnOff                  `xml:"mirrorMargins"`
	AlignBordersAndEdges                *CTOnOff                  `xml:"alignBordersAndEdges"`
	BordersDoNotSurroundHeader          *CTOnOff                  `xml:"bordersDoNotSurroundHeader"`
	BordersDoNotSurroundFooter          *CTOnOff                  `xml:"bordersDoNotSurroundFooter"`
	GutterAtTop                         *CTOnOff                  `xml:"gutterAtTop"`
	HideSpellingErrors                  *CTOnOff                  `xml:"hideSpellingErrors"`
	HideGrammaticalErrors               *CTOnOff                  `xml:"hideGrammaticalErrors"`
	ActiveWritingStyle                  []*CTWritingStyle         `xml:"activeWritingStyle"`
	ProofState                          *CTProof                  `xml:"proofState"`
	FormsDesign                         *CTOnOff                  `xml:"formsDesign"`
	AttachedTemplate                    *CTRel                    `xml:"attachedTemplate"`
	LinkStyles                          *CTOnOff                  `xml:"linkStyles"`
	StylePaneFormatFilter               *CTStylePaneFilter        `xml:"stylePaneFormatFilter"`
	StylePaneSortMethod                 *CTStyleSort              `xml:"stylePaneSortMethod"`
	DocumentType                        *CTDocType                `xml:"documentType"`
	MailMerge                           *CTMailMerge              `xml:"mailMerge"`
	RevisionView                        *CTTrackChangesView       `xml:"revisionView"`
	TrackRevisions                      *CTOnOff                  `xml:"trackRevisions"`
	DoNotTrackMoves                     *CTOnOff                  `xml:"doNotTrackMoves"`
	DoNotTrackFormatting                *CTOnOff                  `xml:"doNotTrackFormatting"`
	DocumentProtection                  *CTDocProtect             `xml:"documentProtection"`
	AutoFormatOverride                  *CTOnOff                  `xml:"autoFormatOverride"`
	StyleLockTheme                      *CTOnOff                  `xml:"styleLockTheme"`
	StyleLockQFSet                      *CTOnOff                  `xml:"styleLockQFSet"`
	DefaultTabStop                      *CTTwipsMeasure           `xml:"defaultTabStop"`
	AutoHyphenation                     *CTOnOff                  `xml:"autoHyphenation"`
	ConsecutiveHyphenLimit              *CTDecimalNumber          `xml:"consecutiveHyphenLimit"`
	HyphenationZone                     *CTTwipsMeasure           `xml:"hyphenationZone"`
	DoNotHyphenateCaps                  *CTOnOff                  `xml:"doNotHyphenateCaps"`
	ShowEnvelope                        *CTOnOff                  `xml:"showEnvelope"`
	SummaryLength                       *CTDecimalNumberOrPrecent `xml:"summaryLength"`
	ClickAndTypeStyle                   *CTString                 `xml:"clickAndTypeStyle"`
	DefaultTableStyle                   *CTString                 `xml:"defaultTableStyle"`
	EvenAndOddHeaders                   *CTOnOff                  `xml:"evenAndOddHeaders"`
	BookFoldRevPrinting                 *CTOnOff                  `xml:"bookFoldRevPrinting"`
	BookFoldPrinting                    *CTOnOff                  `xml:"bookFoldPrinting"`
	BookFoldPrintingSheets              *CTDecimalNumber          `xml:"bookFoldPrintingSheets"`
	DrawingGridHorizontalSpacing        *CTTwipsMeasure           `xml:"drawingGridHorizontalSpacing"`
	DrawingGridVerticalSpacing          *CTTwipsMeasure           `xml:"drawingGridVerticalSpacing"`
	DisplayHorizontalDrawingGridEvery   *CTDecimalNumber          `xml:"displayHorizontalDrawingGridEvery"`
	DisplayVerticalDrawingGridEvery     *CTDecimalNumber          `xml:"displayVerticalDrawingGridEvery"`
	DoNotUseMarginsForDrawingGridOrigin *CTOnOff                  `xml:"doNotUseMarginsForDrawingGridOrigin"`
	DrawingGridHorizontalOrigin         *CTTwipsMeasure           `xml:"drawingGridHorizontalOrigin"`
	DrawingGridVerticalOrigin           *CTTwipsMeasure           `xml:"drawingGridVerticalOrigin"`
	DoNotShadeFormData                  *CTOnOff                  `xml:"doNotShadeFormData"`
	NoPunctuationKerning                *CTOnOff                  `xml:"noPunctuationKerning"`
	CharacterSpacingControl             *CTCharacterSpacing       `xml:"characterSpacingControl"`
	PrintTwoOnOne                       *CTOnOff                  `xml:"printTwoOnOne"`
	StrictFirstAndLastChars             *CTOnOff                  `xml:"strictFirstAndLastChars"`
	NoLineBreaksAfter                   *CTKinsoku                `xml:"noLineBreaksAfter"`
	NoLineBreaksBefore                  *CTKinsoku                `xml:"noLineBreaksBefore"`
	SavePreviewPicture                  *CTOnOff                  `xml:"savePreviewPicture"`
	DoNotValidateAgainstSchema          *CTOnOff                  `xml:"doNotValidateAgainstSchema"`
	SaveInvalidXml                      *CTOnOff                  `xml:"saveInvalidXml"`
	IgnoreMixedContent                  *CTOnOff                  `xml:"ignoreMixedContent"`
	AlwaysShowPlaceholderText           *CTOnOff                  `xml:"alwaysShowPlaceholderText"`
	DoNotDemarcateInvalidXml            *CTOnOff                  `xml:"doNotDemarcateInvalidXml"`
	SaveXmlDataOnly                     *CTOnOff                  `xml:"saveXmlDataOnly"`
	UseXSLTWhenSaving                   *CTOnOff                  `xml:"useXSLTWhenSaving"`
	SaveThroughXslt                     *CTSaveThroughXslt        `xml:"saveThroughXslt"`
	ShowXMLTags                         *CTOnOff                  `xml:"showXMLTags"`
	AlwaysMergeEmptyNamespace           *CTOnOff                  `xml:"alwaysMergeEmptyNamespace"`
	UpdateFields                        *CTOnOff                  `xml:"updateFields"`
	HdrShapeDefaults                    *CTShapeDefaults          `xml:"hdrShapeDefaults"`
	FootnotePr                          *CTFtnDocProps            `xml:"footnotePr"`
	EndnotePr                           *CTEdnDocProps            `xml:"endnotePr"`
	Compat                              *CTCompat                 `xml:"compat"`
	DocVars                             *CTDocVars                `xml:"docVars"`
	Rsids                               *CTDocRsids               `xml:"rsids"`
	MMathPr                             *CTMathPr                 `xml:"m:mathPr"`
	AttachedSchema                      []*CTString               `xml:"attachedSchema"`
	ThemeFontLang                       *CTLanguage               `xml:"themeFontLang"`
	ClrSchemeMapping                    *CTColorSchemeMapping     `xml:"clrSchemeMapping"`
	DoNotIncludeSubdocsInStats          *CTOnOff                  `xml:"doNotIncludeSubdocsInStats"`
	DoNotAutoCompressPictures           *CTOnOff                  `xml:"doNotAutoCompressPictures"`
	ForceUpgrade                        *CTEmpty                  `xml:"forceUpgrade"`
	Captions                            *CTCaptions               `xml:"captions"`
	ReadModeInkLockDown                 *CTReadingModeInkLockDown `xml:"readModeInkLockDown"`
	SmartTagType                        []*CTSmartTagType         `xml:"smartTagType"`
	SlSchemaLibrary                     *SchemaLibrary            `xml:"sl:schemaLibrary"`
	ShapeDefaults                       *CTShapeDefaults          `xml:"shapeDefaults"`
	DoNotEmbedSmartTags                 *CTOnOff                  `xml:"doNotEmbedSmartTags"`
	DecimalSymbol                       *CTString                 `xml:"decimalSymbol"`
	ListSeparator                       *CTString                 `xml:"listSeparator"`
}

// CTStyleSort ...
type CTStyleSort struct {
	XMLName xml.Name `xml:"CT_StyleSort"`
	ValAttr string   `xml:"val,attr"`
}

// CTStylePaneFilter ...
type CTStylePaneFilter struct {
	XMLName                          xml.Name `xml:"CT_StylePaneFilter"`
	AllStylesAttr                    *STOnOff `xml:"allStyles,attr,omitempty"`
	CustomStylesAttr                 *STOnOff `xml:"customStyles,attr,omitempty"`
	LatentStylesAttr                 *STOnOff `xml:"latentStyles,attr,omitempty"`
	StylesInUseAttr                  *STOnOff `xml:"stylesInUse,attr,omitempty"`
	HeadingStylesAttr                *STOnOff `xml:"headingStyles,attr,omitempty"`
	NumberingStylesAttr              *STOnOff `xml:"numberingStyles,attr,omitempty"`
	TableStylesAttr                  *STOnOff `xml:"tableStyles,attr,omitempty"`
	DirectFormattingOnRunsAttr       *STOnOff `xml:"directFormattingOnRuns,attr,omitempty"`
	DirectFormattingOnParagraphsAttr *STOnOff `xml:"directFormattingOnParagraphs,attr,omitempty"`
	DirectFormattingOnNumberingAttr  *STOnOff `xml:"directFormattingOnNumbering,attr,omitempty"`
	DirectFormattingOnTablesAttr     *STOnOff `xml:"directFormattingOnTables,attr,omitempty"`
	ClearFormattingAttr              *STOnOff `xml:"clearFormatting,attr,omitempty"`
	Top3HeadingStylesAttr            *STOnOff `xml:"top3HeadingStyles,attr,omitempty"`
	VisibleStylesAttr                *STOnOff `xml:"visibleStyles,attr,omitempty"`
	AlternateStyleNamesAttr          *STOnOff `xml:"alternateStyleNames,attr,omitempty"`
	ValAttr                          []byte   `xml:"val,attr,omitempty"`
}

// STStyleSort ...
type STStyleSort string

const (
	STStyleSort_name     STStyleSort = "name"
	STStyleSort_priority STStyleSort = "priority"
	STStyleSort_default  STStyleSort = "default"
	STStyleSort_font     STStyleSort = "font"
	STStyleSort_basedOn  STStyleSort = "basedOn"
	STStyleSort_type     STStyleSort = "type"
	STStyleSort_0000     STStyleSort = "0000"
	STStyleSort_0001     STStyleSort = "0001"
	STStyleSort_0002     STStyleSort = "0002"
	STStyleSort_0003     STStyleSort = "0003"
	STStyleSort_0004     STStyleSort = "0004"
	STStyleSort_0005     STStyleSort = "0005"
)

// CTWebSettings ...
type CTWebSettings struct {
	XMLName               xml.Name              `xml:"CT_WebSettings"`
	Frameset              *CTFrameset           `xml:"frameset"`
	Divs                  *CTDivs               `xml:"divs"`
	Encoding              *CTString             `xml:"encoding"`
	OptimizeForBrowser    *CTOptimizeForBrowser `xml:"optimizeForBrowser"`
	RelyOnVML             *CTOnOff              `xml:"relyOnVML"`
	AllowPNG              *CTOnOff              `xml:"allowPNG"`
	DoNotRelyOnCSS        *CTOnOff              `xml:"doNotRelyOnCSS"`
	DoNotSaveAsSingleFile *CTOnOff              `xml:"doNotSaveAsSingleFile"`
	DoNotOrganizeInFolder *CTOnOff              `xml:"doNotOrganizeInFolder"`
	DoNotUseLongFileNames *CTOnOff              `xml:"doNotUseLongFileNames"`
	PixelsPerInch         *CTDecimalNumber      `xml:"pixelsPerInch"`
	TargetScreenSz        *CTTargetScreenSz     `xml:"targetScreenSz"`
	SaveSmartTagsAsXml    *CTOnOff              `xml:"saveSmartTagsAsXml"`
}

// STFrameScrollbar ...
type STFrameScrollbar string

const (
	STFrameScrollbar_on   STFrameScrollbar = "on"
	STFrameScrollbar_off  STFrameScrollbar = "off"
	STFrameScrollbar_auto STFrameScrollbar = "auto"
)

// CTFrameScrollbar ...
type CTFrameScrollbar struct {
	XMLName xml.Name `xml:"CT_FrameScrollbar"`
	ValAttr string   `xml:"val,attr"`
}

// CTOptimizeForBrowser ...
type CTOptimizeForBrowser struct {
	XMLName    xml.Name `xml:"CT_OptimizeForBrowser"`
	TargetAttr string   `xml:"target,attr,omitempty"`
}

// CTFrame ...
type CTFrame struct {
	XMLName         xml.Name          `xml:"CT_Frame"`
	Sz              *CTString         `xml:"sz"`
	Name            *CTString         `xml:"name"`
	Title           *CTString         `xml:"title"`
	LongDesc        *CTRel            `xml:"longDesc"`
	SourceFileName  *CTRel            `xml:"sourceFileName"`
	MarW            *CTPixelsMeasure  `xml:"marW"`
	MarH            *CTPixelsMeasure  `xml:"marH"`
	Scrollbar       *CTFrameScrollbar `xml:"scrollbar"`
	NoResizeAllowed *CTOnOff          `xml:"noResizeAllowed"`
	LinkedToFile    *CTOnOff          `xml:"linkedToFile"`
}

// STFrameLayout ...
type STFrameLayout string

const (
	STFrameLayout_rows STFrameLayout = "rows"
	STFrameLayout_cols STFrameLayout = "cols"
	STFrameLayout_none STFrameLayout = "none"
)

// CTFrameLayout ...
type CTFrameLayout struct {
	XMLName xml.Name `xml:"CT_FrameLayout"`
	ValAttr string   `xml:"val,attr"`
}

// CTFramesetSplitbar ...
type CTFramesetSplitbar struct {
	XMLName     xml.Name        `xml:"CT_FramesetSplitbar"`
	W           *CTTwipsMeasure `xml:"w"`
	Color       *CTColor        `xml:"color"`
	NoBorder    *CTOnOff        `xml:"noBorder"`
	FlatBorders *CTOnOff        `xml:"flatBorders"`
}

// CTFrameset ...
type CTFrameset struct {
	XMLName          xml.Name            `xml:"CT_Frameset"`
	Sz               *CTString           `xml:"sz"`
	FramesetSplitbar *CTFramesetSplitbar `xml:"framesetSplitbar"`
	FrameLayout      *CTFrameLayout      `xml:"frameLayout"`
	Title            *CTString           `xml:"title"`
	Frameset         []*CTFrameset       `xml:"frameset"`
	Frame            []*CTFrame          `xml:"frame"`
}

// CTNumPicBullet ...
type CTNumPicBullet struct {
	XMLName            xml.Name   `xml:"CT_NumPicBullet"`
	NumPicBulletIdAttr int        `xml:"numPicBulletId,attr"`
	Pict               *CTPicture `xml:"pict"`
	Drawing            *CTDrawing `xml:"drawing"`
}

// STLevelSuffix ...
type STLevelSuffix string

const (
	STLevelSuffix_tab     STLevelSuffix = "tab"
	STLevelSuffix_space   STLevelSuffix = "space"
	STLevelSuffix_nothing STLevelSuffix = "nothing"
)

// CTLevelSuffix ...
type CTLevelSuffix struct {
	XMLName xml.Name `xml:"CT_LevelSuffix"`
	ValAttr string   `xml:"val,attr"`
}

// CTLevelText ...
type CTLevelText struct {
	XMLName  xml.Name `xml:"CT_LevelText"`
	ValAttr  string   `xml:"val,attr,omitempty"`
	NullAttr *STOnOff `xml:"null,attr,omitempty"`
}

// CTLvlLegacy ...
type CTLvlLegacy struct {
	XMLName          xml.Name              `xml:"CT_LvlLegacy"`
	LegacyAttr       *STOnOff              `xml:"legacy,attr,omitempty"`
	LegacySpaceAttr  *STTwipsMeasure       `xml:"legacySpace,attr,omitempty"`
	LegacyIndentAttr *STSignedTwipsMeasure `xml:"legacyIndent,attr,omitempty"`
}

// CTLvl ...
type CTLvl struct {
	XMLName        xml.Name         `xml:"CT_Lvl"`
	IlvlAttr       int              `xml:"ilvl,attr"`
	TplcAttr       []byte           `xml:"tplc,attr,omitempty"`
	TentativeAttr  *STOnOff         `xml:"tentative,attr,omitempty"`
	Start          *CTDecimalNumber `xml:"start"`
	NumFmt         *CTNumFmt        `xml:"numFmt"`
	LvlRestart     *CTDecimalNumber `xml:"lvlRestart"`
	PStyle         *CTString        `xml:"pStyle"`
	IsLgl          *CTOnOff         `xml:"isLgl"`
	Suff           *CTLevelSuffix   `xml:"suff"`
	LvlText        *CTLevelText     `xml:"lvlText"`
	LvlPicBulletId *CTDecimalNumber `xml:"lvlPicBulletId"`
	Legacy         *CTLvlLegacy     `xml:"legacy"`
	LvlJc          *CTJc            `xml:"lvlJc"`
	PPr            *CTPPrGeneral    `xml:"pPr"`
	RPr            *CTRPr           `xml:"rPr"`
}

// STMultiLevelType ...
type STMultiLevelType string

const (
	STMultiLevelType_singleLevel      STMultiLevelType = "singleLevel"
	STMultiLevelType_multilevel       STMultiLevelType = "multilevel"
	STMultiLevelType_hybridMultilevel STMultiLevelType = "hybridMultilevel"
)

// CTMultiLevelType ...
type CTMultiLevelType struct {
	XMLName xml.Name `xml:"CT_MultiLevelType"`
	ValAttr string   `xml:"val,attr"`
}

// CTAbstractNum ...
type CTAbstractNum struct {
	XMLName           xml.Name          `xml:"CT_AbstractNum"`
	AbstractNumIdAttr int               `xml:"abstractNumId,attr"`
	Nsid              *CTLongHexNumber  `xml:"nsid"`
	MultiLevelType    *CTMultiLevelType `xml:"multiLevelType"`
	Tmpl              *CTLongHexNumber  `xml:"tmpl"`
	Name              *CTString         `xml:"name"`
	StyleLink         *CTString         `xml:"styleLink"`
	NumStyleLink      *CTString         `xml:"numStyleLink"`
	Lvl               []*CTLvl          `xml:"lvl"`
}

// CTNumLvl ...
type CTNumLvl struct {
	XMLName       xml.Name         `xml:"CT_NumLvl"`
	IlvlAttr      int              `xml:"ilvl,attr"`
	StartOverride *CTDecimalNumber `xml:"startOverride"`
	Lvl           *CTLvl           `xml:"lvl"`
}

// CTNum ...
type CTNum struct {
	XMLName       xml.Name         `xml:"CT_Num"`
	NumIdAttr     int              `xml:"numId,attr"`
	AbstractNumId *CTDecimalNumber `xml:"abstractNumId"`
	LvlOverride   []*CTNumLvl      `xml:"lvlOverride"`
}

// CTNumbering ...
type CTNumbering struct {
	XMLName           xml.Name          `xml:"CT_Numbering"`
	NumPicBullet      []*CTNumPicBullet `xml:"numPicBullet"`
	AbstractNum       []*CTAbstractNum  `xml:"abstractNum"`
	Num               []*CTNum          `xml:"num"`
	NumIdMacAtCleanup *CTDecimalNumber  `xml:"numIdMacAtCleanup"`
}

// STTblStyleOverrideType ...
type STTblStyleOverrideType string

const (
	STTblStyleOverrideType_wholeTable STTblStyleOverrideType = "wholeTable"
	STTblStyleOverrideType_firstRow   STTblStyleOverrideType = "firstRow"
	STTblStyleOverrideType_lastRow    STTblStyleOverrideType = "lastRow"
	STTblStyleOverrideType_firstCol   STTblStyleOverrideType = "firstCol"
	STTblStyleOverrideType_lastCol    STTblStyleOverrideType = "lastCol"
	STTblStyleOverrideType_band1Vert  STTblStyleOverrideType = "band1Vert"
	STTblStyleOverrideType_band2Vert  STTblStyleOverrideType = "band2Vert"
	STTblStyleOverrideType_band1Horz  STTblStyleOverrideType = "band1Horz"
	STTblStyleOverrideType_band2Horz  STTblStyleOverrideType = "band2Horz"
	STTblStyleOverrideType_neCell     STTblStyleOverrideType = "neCell"
	STTblStyleOverrideType_nwCell     STTblStyleOverrideType = "nwCell"
	STTblStyleOverrideType_seCell     STTblStyleOverrideType = "seCell"
	STTblStyleOverrideType_swCell     STTblStyleOverrideType = "swCell"
)

// CTTblStylePr ...
type CTTblStylePr struct {
	XMLName  xml.Name      `xml:"CT_TblStylePr"`
	TypeAttr string        `xml:"type,attr"`
	PPr      *CTPPrGeneral `xml:"pPr"`
	RPr      *CTRPr        `xml:"rPr"`
	TblPr    *CTTblPrBase  `xml:"tblPr"`
	TrPr     *CTTrPr       `xml:"trPr"`
	TcPr     *CTTcPr       `xml:"tcPr"`
}

// STStyleType ...
type STStyleType string

const (
	STStyleType_paragraph STStyleType = "paragraph"
	STStyleType_character STStyleType = "character"
	STStyleType_table     STStyleType = "table"
	STStyleType_numbering STStyleType = "numbering"
)

// CTStyle ...
type CTStyle struct {
	XMLName         xml.Name         `xml:"CT_Style"`
	TypeAttr        string           `xml:"type,attr,omitempty"`
	StyleIdAttr     string           `xml:"styleId,attr,omitempty"`
	DefaultAttr     *STOnOff         `xml:"default,attr,omitempty"`
	CustomStyleAttr *STOnOff         `xml:"customStyle,attr,omitempty"`
	Name            *CTString        `xml:"name"`
	Aliases         *CTString        `xml:"aliases"`
	BasedOn         *CTString        `xml:"basedOn"`
	Next            *CTString        `xml:"next"`
	Link            *CTString        `xml:"link"`
	AutoRedefine    *CTOnOff         `xml:"autoRedefine"`
	Hidden          *CTOnOff         `xml:"hidden"`
	UiPriority      *CTDecimalNumber `xml:"uiPriority"`
	SemiHidden      *CTOnOff         `xml:"semiHidden"`
	UnhideWhenUsed  *CTOnOff         `xml:"unhideWhenUsed"`
	QFormat         *CTOnOff         `xml:"qFormat"`
	Locked          *CTOnOff         `xml:"locked"`
	Personal        *CTOnOff         `xml:"personal"`
	PersonalCompose *CTOnOff         `xml:"personalCompose"`
	PersonalReply   *CTOnOff         `xml:"personalReply"`
	Rsid            *CTLongHexNumber `xml:"rsid"`
	PPr             *CTPPrGeneral    `xml:"pPr"`
	RPr             *CTRPr           `xml:"rPr"`
	TblPr           *CTTblPrBase     `xml:"tblPr"`
	TrPr            *CTTrPr          `xml:"trPr"`
	TcPr            *CTTcPr          `xml:"tcPr"`
	TblStylePr      []*CTTblStylePr  `xml:"tblStylePr"`
}

// CTLsdException ...
type CTLsdException struct {
	XMLName            xml.Name `xml:"CT_LsdException"`
	NameAttr           string   `xml:"name,attr"`
	LockedAttr         *STOnOff `xml:"locked,attr,omitempty"`
	UiPriorityAttr     int      `xml:"uiPriority,attr,omitempty"`
	SemiHiddenAttr     *STOnOff `xml:"semiHidden,attr,omitempty"`
	UnhideWhenUsedAttr *STOnOff `xml:"unhideWhenUsed,attr,omitempty"`
	QFormatAttr        *STOnOff `xml:"qFormat,attr,omitempty"`
}

// CTLatentStyles ...
type CTLatentStyles struct {
	XMLName               xml.Name          `xml:"CT_LatentStyles"`
	DefLockedStateAttr    *STOnOff          `xml:"defLockedState,attr,omitempty"`
	DefUIPriorityAttr     int               `xml:"defUIPriority,attr,omitempty"`
	DefSemiHiddenAttr     *STOnOff          `xml:"defSemiHidden,attr,omitempty"`
	DefUnhideWhenUsedAttr *STOnOff          `xml:"defUnhideWhenUsed,attr,omitempty"`
	DefQFormatAttr        *STOnOff          `xml:"defQFormat,attr,omitempty"`
	CountAttr             int               `xml:"count,attr,omitempty"`
	LsdException          []*CTLsdException `xml:"lsdException"`
}

// CTStyles ...
type CTStyles struct {
	XMLName      xml.Name        `xml:"CT_Styles"`
	DocDefaults  *CTDocDefaults  `xml:"docDefaults"`
	LatentStyles *CTLatentStyles `xml:"latentStyles"`
	Style        []*CTStyle      `xml:"style"`
}

// CTPanose ...
type CTPanose struct {
	XMLName xml.Name `xml:"CT_Panose"`
	ValAttr []byte   `xml:"val,attr"`
}

// STFontFamily ...
type STFontFamily string

const (
	STFontFamily_decorative STFontFamily = "decorative"
	STFontFamily_modern     STFontFamily = "modern"
	STFontFamily_roman      STFontFamily = "roman"
	STFontFamily_script     STFontFamily = "script"
	STFontFamily_swiss      STFontFamily = "swiss"
	STFontFamily_auto       STFontFamily = "auto"
)

// CTFontFamily ...
type CTFontFamily struct {
	XMLName xml.Name `xml:"CT_FontFamily"`
	ValAttr string   `xml:"val,attr"`
}

// STPitch ...
type STPitch string

const (
	STPitch_fixed    STPitch = "fixed"
	STPitch_variable STPitch = "variable"
	STPitch_default  STPitch = "default"
)

// CTPitch ...
type CTPitch struct {
	XMLName xml.Name `xml:"CT_Pitch"`
	ValAttr string   `xml:"val,attr"`
}

// CTFontSig ...
type CTFontSig struct {
	XMLName  xml.Name `xml:"CT_FontSig"`
	Usb0Attr []byte   `xml:"usb0,attr"`
	Usb1Attr []byte   `xml:"usb1,attr"`
	Usb2Attr []byte   `xml:"usb2,attr"`
	Usb3Attr []byte   `xml:"usb3,attr"`
	Csb0Attr []byte   `xml:"csb0,attr"`
	Csb1Attr []byte   `xml:"csb1,attr"`
}

// CTFontRel ...
type CTFontRel struct {
	XMLName       xml.Name `xml:"CT_FontRel"`
	FontKeyAttr   string   `xml:"fontKey,attr,omitempty"`
	SubsettedAttr *STOnOff `xml:"subsetted,attr,omitempty"`
}

// CTFont ...
type CTFont struct {
	XMLName         xml.Name      `xml:"CT_Font"`
	NameAttr        string        `xml:"name,attr"`
	AltName         *CTString     `xml:"altName"`
	Panose1         *CTPanose     `xml:"panose1"`
	Charset         *CTCharset    `xml:"charset"`
	Family          *CTFontFamily `xml:"family"`
	NotTrueType     *CTOnOff      `xml:"notTrueType"`
	Pitch           *CTPitch      `xml:"pitch"`
	Sig             *CTFontSig    `xml:"sig"`
	EmbedRegular    *CTFontRel    `xml:"embedRegular"`
	EmbedBold       *CTFontRel    `xml:"embedBold"`
	EmbedItalic     *CTFontRel    `xml:"embedItalic"`
	EmbedBoldItalic *CTFontRel    `xml:"embedBoldItalic"`
}

// CTFontsList ...
type CTFontsList struct {
	XMLName xml.Name  `xml:"CT_FontsList"`
	Font    []*CTFont `xml:"font"`
}

// CTDivBdr ...
type CTDivBdr struct {
	XMLName xml.Name  `xml:"CT_DivBdr"`
	Top     *CTBorder `xml:"top"`
	Left    *CTBorder `xml:"left"`
	Bottom  *CTBorder `xml:"bottom"`
	Right   *CTBorder `xml:"right"`
}

// CTDiv ...
type CTDiv struct {
	XMLName    xml.Name              `xml:"CT_Div"`
	IdAttr     int                   `xml:"id,attr"`
	BlockQuote *CTOnOff              `xml:"blockQuote"`
	BodyDiv    *CTOnOff              `xml:"bodyDiv"`
	MarLeft    *CTSignedTwipsMeasure `xml:"marLeft"`
	MarRight   *CTSignedTwipsMeasure `xml:"marRight"`
	MarTop     *CTSignedTwipsMeasure `xml:"marTop"`
	MarBottom  *CTSignedTwipsMeasure `xml:"marBottom"`
	DivBdr     *CTDivBdr             `xml:"divBdr"`
	DivsChild  []*CTDivs             `xml:"divsChild"`
}

// CTDivs ...
type CTDivs struct {
	XMLName xml.Name `xml:"CT_Divs"`
	Div     *CTDiv   `xml:"div"`
}

// CTTxbxContent ...
type CTTxbxContent struct {
	XMLName          xml.Name `xml:"CT_TxbxContent"`
	EGBlockLevelElts []*EGBlockLevelElts
}

// TxbxContent ...
type TxbxContent *CTTxbxContent

// EGMathContent ...
type EGMathContent struct {
	XMLName    xml.Name `xml:"EG_MathContent"`
	MOMathPara *CTOMathPara
	MOMath     *CTOMath
}

// EGBlockLevelChunkElts ...
type EGBlockLevelChunkElts struct {
	XMLName               xml.Name `xml:"EG_BlockLevelChunkElts"`
	EGContentBlockContent []*EGContentBlockContent
}

// EGBlockLevelElts ...
type EGBlockLevelElts struct {
	XMLName               xml.Name `xml:"EG_BlockLevelElts"`
	AltChunk              []*CTAltChunk
	EGBlockLevelChunkElts []*EGBlockLevelChunkElts
}

// EGRunLevelElts ...
type EGRunLevelElts struct {
	XMLName               xml.Name `xml:"EG_RunLevelElts"`
	ProofErr              *CTProofErr
	PermStart             *CTPermStart
	PermEnd               *CTPerm
	Ins                   *CTRunTrackChange
	Del                   *CTRunTrackChange
	MoveFrom              *CTRunTrackChange
	MoveTo                *CTRunTrackChange
	EGRangeMarkupElements []*EGRangeMarkupElements
	EGMathContent         []*EGMathContent
}

// CTBody ...
type CTBody struct {
	XMLName          xml.Name `xml:"CT_Body"`
	EGBlockLevelElts []*EGBlockLevelElts
	SectPr           *CTSectPr `xml:"sectPr"`
}

// CTShapeDefaults ...
type CTShapeDefaults struct {
	XMLName xml.Name `xml:"CT_ShapeDefaults"`
}

// CTComments ...
type CTComments struct {
	XMLName xml.Name     `xml:"CT_Comments"`
	Comment []*CTComment `xml:"comment"`
}

// Comments ...
type Comments *CTComments

// CTFootnotes ...
type CTFootnotes struct {
	XMLName  xml.Name  `xml:"CT_Footnotes"`
	Footnote *CTFtnEdn `xml:"footnote"`
}

// Footnotes ...
type Footnotes *CTFootnotes

// CTEndnotes ...
type CTEndnotes struct {
	XMLName xml.Name  `xml:"CT_Endnotes"`
	Endnote *CTFtnEdn `xml:"endnote"`
}

// Endnotes ...
type Endnotes *CTEndnotes

// Hdr ...
type Hdr *CTHdrFtr

// Ftr ...
type Ftr *CTHdrFtr

// CTSmartTagType ...
type CTSmartTagType struct {
	XMLName          xml.Name `xml:"CT_SmartTagType"`
	NamespaceuriAttr string   `xml:"namespaceuri,attr,omitempty"`
	NameAttr         string   `xml:"name,attr,omitempty"`
	UrlAttr          string   `xml:"url,attr,omitempty"`
}

// STThemeColor ...
type STThemeColor string

const (
	STThemeColor_dark1             STThemeColor = "dark1"
	STThemeColor_light1            STThemeColor = "light1"
	STThemeColor_dark2             STThemeColor = "dark2"
	STThemeColor_light2            STThemeColor = "light2"
	STThemeColor_accent1           STThemeColor = "accent1"
	STThemeColor_accent2           STThemeColor = "accent2"
	STThemeColor_accent3           STThemeColor = "accent3"
	STThemeColor_accent4           STThemeColor = "accent4"
	STThemeColor_accent5           STThemeColor = "accent5"
	STThemeColor_accent6           STThemeColor = "accent6"
	STThemeColor_hyperlink         STThemeColor = "hyperlink"
	STThemeColor_followedHyperlink STThemeColor = "followedHyperlink"
	STThemeColor_none              STThemeColor = "none"
	STThemeColor_background1       STThemeColor = "background1"
	STThemeColor_text1             STThemeColor = "text1"
	STThemeColor_background2       STThemeColor = "background2"
	STThemeColor_text2             STThemeColor = "text2"
)

// STDocPartBehavior ...
type STDocPartBehavior string

const (
	STDocPartBehavior_content STDocPartBehavior = "content"
	STDocPartBehavior_p       STDocPartBehavior = "p"
	STDocPartBehavior_pg      STDocPartBehavior = "pg"
)

// CTDocPartBehavior ...
type CTDocPartBehavior struct {
	XMLName xml.Name `xml:"CT_DocPartBehavior"`
	ValAttr string   `xml:"val,attr"`
}

// CTDocPartBehaviors ...
type CTDocPartBehaviors struct {
	XMLName  xml.Name             `xml:"CT_DocPartBehaviors"`
	Behavior []*CTDocPartBehavior `xml:"behavior"`
}

// STDocPartType ...
type STDocPartType string

const (
	STDocPartType_none     STDocPartType = "none"
	STDocPartType_normal   STDocPartType = "normal"
	STDocPartType_autoExp  STDocPartType = "autoExp"
	STDocPartType_toolbar  STDocPartType = "toolbar"
	STDocPartType_speller  STDocPartType = "speller"
	STDocPartType_formFld  STDocPartType = "formFld"
	STDocPartType_bbPlcHdr STDocPartType = "bbPlcHdr"
)

// CTDocPartType ...
type CTDocPartType struct {
	XMLName xml.Name `xml:"CT_DocPartType"`
	ValAttr string   `xml:"val,attr"`
}

// CTDocPartTypes ...
type CTDocPartTypes struct {
	XMLName xml.Name         `xml:"CT_DocPartTypes"`
	AllAttr *STOnOff         `xml:"all,attr,omitempty"`
	Type    []*CTDocPartType `xml:"type"`
}

// STDocPartGallery ...
type STDocPartGallery string

const (
	STDocPartGallery_placeholder       STDocPartGallery = "placeholder"
	STDocPartGallery_any               STDocPartGallery = "any"
	STDocPartGallery_default           STDocPartGallery = "default"
	STDocPartGallery_docParts          STDocPartGallery = "docParts"
	STDocPartGallery_coverPg           STDocPartGallery = "coverPg"
	STDocPartGallery_eq                STDocPartGallery = "eq"
	STDocPartGallery_ftrs              STDocPartGallery = "ftrs"
	STDocPartGallery_hdrs              STDocPartGallery = "hdrs"
	STDocPartGallery_pgNum             STDocPartGallery = "pgNum"
	STDocPartGallery_tbls              STDocPartGallery = "tbls"
	STDocPartGallery_watermarks        STDocPartGallery = "watermarks"
	STDocPartGallery_autoTxt           STDocPartGallery = "autoTxt"
	STDocPartGallery_txtBox            STDocPartGallery = "txtBox"
	STDocPartGallery_pgNumT            STDocPartGallery = "pgNumT"
	STDocPartGallery_pgNumB            STDocPartGallery = "pgNumB"
	STDocPartGallery_pgNumMargins      STDocPartGallery = "pgNumMargins"
	STDocPartGallery_tblOfContents     STDocPartGallery = "tblOfContents"
	STDocPartGallery_bib               STDocPartGallery = "bib"
	STDocPartGallery_custQuickParts    STDocPartGallery = "custQuickParts"
	STDocPartGallery_custCoverPg       STDocPartGallery = "custCoverPg"
	STDocPartGallery_custEq            STDocPartGallery = "custEq"
	STDocPartGallery_custFtrs          STDocPartGallery = "custFtrs"
	STDocPartGallery_custHdrs          STDocPartGallery = "custHdrs"
	STDocPartGallery_custPgNum         STDocPartGallery = "custPgNum"
	STDocPartGallery_custTbls          STDocPartGallery = "custTbls"
	STDocPartGallery_custWatermarks    STDocPartGallery = "custWatermarks"
	STDocPartGallery_custAutoTxt       STDocPartGallery = "custAutoTxt"
	STDocPartGallery_custTxtBox        STDocPartGallery = "custTxtBox"
	STDocPartGallery_custPgNumT        STDocPartGallery = "custPgNumT"
	STDocPartGallery_custPgNumB        STDocPartGallery = "custPgNumB"
	STDocPartGallery_custPgNumMargins  STDocPartGallery = "custPgNumMargins"
	STDocPartGallery_custTblOfContents STDocPartGallery = "custTblOfContents"
	STDocPartGallery_custBib           STDocPartGallery = "custBib"
	STDocPartGallery_custom1           STDocPartGallery = "custom1"
	STDocPartGallery_custom2           STDocPartGallery = "custom2"
	STDocPartGallery_custom3           STDocPartGallery = "custom3"
	STDocPartGallery_custom4           STDocPartGallery = "custom4"
	STDocPartGallery_custom5           STDocPartGallery = "custom5"
)

// CTDocPartGallery ...
type CTDocPartGallery struct {
	XMLName xml.Name `xml:"CT_DocPartGallery"`
	ValAttr string   `xml:"val,attr"`
}

// CTDocPartCategory ...
type CTDocPartCategory struct {
	XMLName xml.Name          `xml:"CT_DocPartCategory"`
	Name    *CTString         `xml:"name"`
	Gallery *CTDocPartGallery `xml:"gallery"`
}

// CTDocPartName ...
type CTDocPartName struct {
	XMLName       xml.Name `xml:"CT_DocPartName"`
	ValAttr       string   `xml:"val,attr"`
	DecoratedAttr *STOnOff `xml:"decorated,attr,omitempty"`
}

// CTDocPartPr ...
type CTDocPartPr struct {
	XMLName     xml.Name            `xml:"CT_DocPartPr"`
	Name        *CTDocPartName      `xml:"name"`
	Style       *CTString           `xml:"style"`
	Category    *CTDocPartCategory  `xml:"category"`
	Types       *CTDocPartTypes     `xml:"types"`
	Behaviors   *CTDocPartBehaviors `xml:"behaviors"`
	Description *CTString           `xml:"description"`
	Guid        *CTGuid             `xml:"guid"`
}

// CTDocPart ...
type CTDocPart struct {
	XMLName     xml.Name     `xml:"CT_DocPart"`
	DocPartPr   *CTDocPartPr `xml:"docPartPr"`
	DocPartBody *CTBody      `xml:"docPartBody"`
}

// CTDocParts ...
type CTDocParts struct {
	XMLName xml.Name     `xml:"CT_DocParts"`
	DocPart []*CTDocPart `xml:"docPart"`
}

// Settings ...
type Settings *CTSettings

// WebSettings ...
type WebSettings *CTWebSettings

// Fonts ...
type Fonts *CTFontsList

// Numbering ...
type Numbering *CTNumbering

// Styles ...
type Styles *CTStyles

// STCaptionPos ...
type STCaptionPos string

const (
	STCaptionPos_above STCaptionPos = "above"
	STCaptionPos_below STCaptionPos = "below"
	STCaptionPos_left  STCaptionPos = "left"
	STCaptionPos_right STCaptionPos = "right"
)

// CTCaption ...
type CTCaption struct {
	XMLName     xml.Name `xml:"CT_Caption"`
	NameAttr    string   `xml:"name,attr"`
	PosAttr     string   `xml:"pos,attr,omitempty"`
	ChapNumAttr *STOnOff `xml:"chapNum,attr,omitempty"`
	HeadingAttr int      `xml:"heading,attr,omitempty"`
	NoLabelAttr *STOnOff `xml:"noLabel,attr,omitempty"`
	NumFmtAttr  string   `xml:"numFmt,attr,omitempty"`
	SepAttr     string   `xml:"sep,attr,omitempty"`
}

// CTAutoCaption ...
type CTAutoCaption struct {
	XMLName     xml.Name `xml:"CT_AutoCaption"`
	NameAttr    string   `xml:"name,attr"`
	CaptionAttr string   `xml:"caption,attr"`
}

// CTAutoCaptions ...
type CTAutoCaptions struct {
	XMLName     xml.Name         `xml:"CT_AutoCaptions"`
	AutoCaption []*CTAutoCaption `xml:"autoCaption"`
}

// CTCaptions ...
type CTCaptions struct {
	XMLName      xml.Name        `xml:"CT_Captions"`
	Caption      []*CTCaption    `xml:"caption"`
	AutoCaptions *CTAutoCaptions `xml:"autoCaptions"`
}

// CTDocumentBase ...
type CTDocumentBase struct {
	XMLName    xml.Name      `xml:"CT_DocumentBase"`
	Background *CTBackground `xml:"background"`
}

// CTDocument ...
type CTDocument struct {
	XMLName         xml.Name `xml:"CT_Document"`
	ConformanceAttr string   `xml:"conformance,attr,omitempty"`
	Body            *CTBody  `xml:"body"`
}

// CTGlossaryDocument ...
type CTGlossaryDocument struct {
	XMLName  xml.Name    `xml:"CT_GlossaryDocument"`
	DocParts *CTDocParts `xml:"docParts"`
}

// Document ...
type Document *CTDocument

// GlossaryDocument ...
type GlossaryDocument *CTGlossaryDocument
