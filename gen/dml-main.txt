// Code generated by xgen. DO NOT EDIT.

package ooxml

import (
	"encoding/xml"
)

// CTAudioFile ...
type CTAudioFile struct {
	XMLName         xml.Name                  `xml:"CT_AudioFile"`
	RLinkAttr       *Link                     `xml:"r:link,attr"`
	ContentTypeAttr string                    `xml:"contentType,attr,omitempty"`
	ExtLst          *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTVideoFile ...
type CTVideoFile struct {
	XMLName         xml.Name                  `xml:"CT_VideoFile"`
	RLinkAttr       string                    `xml:"r:link,attr"`
	ContentTypeAttr string                    `xml:"contentType,attr,omitempty"`
	ExtLst          *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTQuickTimeFile ...
type CTQuickTimeFile struct {
	XMLName   xml.Name                  `xml:"CT_QuickTimeFile"`
	RLinkAttr string                    `xml:"r:link,attr"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTAudioCDTime ...
type CTAudioCDTime struct {
	XMLName   xml.Name `xml:"CT_AudioCDTime"`
	TrackAttr byte     `xml:"track,attr"`
	TimeAttr  uint32   `xml:"time,attr,omitempty"`
}

// CTAudioCD ...
type CTAudioCD struct {
	XMLName xml.Name                  `xml:"CT_AudioCD"`
	St      *CTAudioCDTime            `xml:"st"`
	End     *CTAudioCDTime            `xml:"end"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// EGMedia ...
type EGMedia struct {
	XMLName       xml.Name `xml:"EG_Media"`
	AudioCd       *CTAudioCD
	WavAudioFile  *CTEmbeddedWAVAudioFile
	AudioFile     *CTAudioFile
	VideoFile     *CTVideoFile
	QuickTimeFile *CTQuickTimeFile
}

// VideoFile ...
type VideoFile *CTVideoFile

// STStyleMatrixColumnIndex ...
type STStyleMatrixColumnIndex uint32

// STFontCollectionIndex ...
type STFontCollectionIndex string

const (
	STFontCollectionIndex_major STFontCollectionIndex = "major"
	STFontCollectionIndex_minor STFontCollectionIndex = "minor"
	STFontCollectionIndex_none  STFontCollectionIndex = "none"
)

// STColorSchemeIndex ...
type STColorSchemeIndex string

const (
	STColorSchemeIndex_dk1      STColorSchemeIndex = "dk1"
	STColorSchemeIndex_lt1      STColorSchemeIndex = "lt1"
	STColorSchemeIndex_dk2      STColorSchemeIndex = "dk2"
	STColorSchemeIndex_lt2      STColorSchemeIndex = "lt2"
	STColorSchemeIndex_accent1  STColorSchemeIndex = "accent1"
	STColorSchemeIndex_accent2  STColorSchemeIndex = "accent2"
	STColorSchemeIndex_accent3  STColorSchemeIndex = "accent3"
	STColorSchemeIndex_accent4  STColorSchemeIndex = "accent4"
	STColorSchemeIndex_accent5  STColorSchemeIndex = "accent5"
	STColorSchemeIndex_accent6  STColorSchemeIndex = "accent6"
	STColorSchemeIndex_hlink    STColorSchemeIndex = "hlink"
	STColorSchemeIndex_folHlink STColorSchemeIndex = "folHlink"
)

// CTColorScheme ...
type CTColorScheme struct {
	XMLName  xml.Name                  `xml:"CT_ColorScheme"`
	NameAttr string                    `xml:"name,attr"`
	Dk1      *CTColor                  `xml:"dk1"`
	Lt1      *CTColor                  `xml:"lt1"`
	Dk2      *CTColor                  `xml:"dk2"`
	Lt2      *CTColor                  `xml:"lt2"`
	Accent1  *CTColor                  `xml:"accent1"`
	Accent2  *CTColor                  `xml:"accent2"`
	Accent3  *CTColor                  `xml:"accent3"`
	Accent4  *CTColor                  `xml:"accent4"`
	Accent5  *CTColor                  `xml:"accent5"`
	Accent6  *CTColor                  `xml:"accent6"`
	Hlink    *CTColor                  `xml:"hlink"`
	FolHlink *CTColor                  `xml:"folHlink"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTCustomColor ...
type CTCustomColor struct {
	XMLName       xml.Name `xml:"CT_CustomColor"`
	NameAttr      string   `xml:"name,attr,omitempty"`
	EGColorChoice []*EGColorChoice
}

// CTSupplementalFont ...
type CTSupplementalFont struct {
	XMLName      xml.Name `xml:"CT_SupplementalFont"`
	ScriptAttr   string   `xml:"script,attr"`
	TypefaceAttr string   `xml:"typeface,attr"`
}

// CTCustomColorList ...
type CTCustomColorList struct {
	XMLName xml.Name         `xml:"CT_CustomColorList"`
	CustClr []*CTCustomColor `xml:"custClr"`
}

// CTFontCollection ...
type CTFontCollection struct {
	XMLName xml.Name                  `xml:"CT_FontCollection"`
	Latin   *CTTextFont               `xml:"latin"`
	Ea      *CTTextFont               `xml:"ea"`
	Cs      *CTTextFont               `xml:"cs"`
	Font    []*CTSupplementalFont     `xml:"font"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTEffectStyleItem ...
type CTEffectStyleItem struct {
	XMLName            xml.Name `xml:"CT_EffectStyleItem"`
	EGEffectProperties []*EGEffectProperties
	Scene3d            *CTScene3D `xml:"scene3d"`
	Sp3d               *CTShape3D `xml:"sp3d"`
}

// CTFontScheme ...
type CTFontScheme struct {
	XMLName   xml.Name                  `xml:"CT_FontScheme"`
	NameAttr  string                    `xml:"name,attr"`
	MajorFont *CTFontCollection         `xml:"majorFont"`
	MinorFont *CTFontCollection         `xml:"minorFont"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTFillStyleList ...
type CTFillStyleList struct {
	XMLName          xml.Name `xml:"CT_FillStyleList"`
	EGFillProperties []*EGFillProperties
}

// CTLineStyleList ...
type CTLineStyleList struct {
	XMLName xml.Name            `xml:"CT_LineStyleList"`
	Ln      []*CTLineProperties `xml:"ln"`
}

// CTEffectStyleList ...
type CTEffectStyleList struct {
	XMLName     xml.Name             `xml:"CT_EffectStyleList"`
	EffectStyle []*CTEffectStyleItem `xml:"effectStyle"`
}

// CTBackgroundFillStyleList ...
type CTBackgroundFillStyleList struct {
	XMLName          xml.Name `xml:"CT_BackgroundFillStyleList"`
	EGFillProperties []*EGFillProperties
}

// CTStyleMatrix ...
type CTStyleMatrix struct {
	XMLName        xml.Name                   `xml:"CT_StyleMatrix"`
	NameAttr       string                     `xml:"name,attr,omitempty"`
	FillStyleLst   *CTFillStyleList           `xml:"fillStyleLst"`
	LnStyleLst     *CTLineStyleList           `xml:"lnStyleLst"`
	EffectStyleLst *CTEffectStyleList         `xml:"effectStyleLst"`
	BgFillStyleLst *CTBackgroundFillStyleList `xml:"bgFillStyleLst"`
}

// CTBaseStyles ...
type CTBaseStyles struct {
	XMLName    xml.Name                  `xml:"CT_BaseStyles"`
	ClrScheme  *CTColorScheme            `xml:"clrScheme"`
	FontScheme *CTFontScheme             `xml:"fontScheme"`
	FmtScheme  *CTStyleMatrix            `xml:"fmtScheme"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTOfficeArtExtension ...
type CTOfficeArtExtension struct {
	XMLName xml.Name `xml:"CT_OfficeArtExtension"`
	UriAttr string   `xml:"uri,attr"`
}

// STCoordinate ...
type STCoordinate struct {
	XMLName                 xml.Name `xml:"ST_Coordinate"`
	STCoordinateUnqualified *STCoordinateUnqualified
	STUniversalMeasure      *STUniversalMeasure
}

// STCoordinateUnqualified ...
type STCoordinateUnqualified int64

// STCoordinate32 ...
type STCoordinate32 struct {
	XMLName                   xml.Name `xml:"ST_Coordinate32"`
	STCoordinate32Unqualified *STCoordinate32Unqualified
	STUniversalMeasure        string
}

// STCoordinate32Unqualified ...
type STCoordinate32Unqualified int

// STPositiveCoordinate ...
type STPositiveCoordinate int64

// STPositiveCoordinate32 ...
type STPositiveCoordinate32 int

// STAngle ...
type STAngle int

// CTAngle ...
type CTAngle struct {
	XMLName xml.Name `xml:"CT_Angle"`
	ValAttr int      `xml:"val,attr"`
}

// STFixedAngle ...
type STFixedAngle int

// STPositiveFixedAngle ...
type STPositiveFixedAngle int

// CTPositiveFixedAngle ...
type CTPositiveFixedAngle struct {
	XMLName xml.Name `xml:"CT_PositiveFixedAngle"`
	ValAttr int      `xml:"val,attr"`
}

// STPercentage ...
type STPercentage struct {
	XMLName             xml.Name `xml:"ST_Percentage"`
	STPercentageDecimal *STPercentageDecimal
	STPercentage        string
}

// STPercentageDecimal ...
type STPercentageDecimal int

// CTPercentage ...
type CTPercentage struct {
	XMLName xml.Name      `xml:"CT_Percentage"`
	ValAttr *STPercentage `xml:"val,attr"`
}

// STPositivePercentage ...
type STPositivePercentage struct {
	XMLName                     xml.Name `xml:"ST_PositivePercentage"`
	STPositivePercentageDecimal *STPositivePercentageDecimal
	STPositivePercentage        string
}

// STPositivePercentageDecimal ...
type STPositivePercentageDecimal int

// CTPositivePercentage ...
type CTPositivePercentage struct {
	XMLName xml.Name              `xml:"CT_PositivePercentage"`
	ValAttr *STPositivePercentage `xml:"val,attr"`
}

// STFixedPercentage ...
type STFixedPercentage struct {
	XMLName                  xml.Name `xml:"ST_FixedPercentage"`
	STFixedPercentage        string
	STFixedPercentageDecimal *STFixedPercentageDecimal
}

// STFixedPercentageDecimal ...
type STFixedPercentageDecimal int

// CTFixedPercentage ...
type CTFixedPercentage struct {
	XMLName xml.Name           `xml:"CT_FixedPercentage"`
	ValAttr *STFixedPercentage `xml:"val,attr"`
}

// STPositiveFixedPercentage ...
type STPositiveFixedPercentage struct {
	XMLName                          xml.Name `xml:"ST_PositiveFixedPercentage"`
	STPositiveFixedPercentageDecimal *STPositiveFixedPercentageDecimal
	STPositiveFixedPercentage        string
}

// STPositiveFixedPercentageDecimal ...
type STPositiveFixedPercentageDecimal int

// CTPositiveFixedPercentage ...
type CTPositiveFixedPercentage struct {
	XMLName xml.Name                   `xml:"CT_PositiveFixedPercentage"`
	ValAttr *STPositiveFixedPercentage `xml:"val,attr"`
}

// CTRatio ...
type CTRatio struct {
	XMLName xml.Name `xml:"CT_Ratio"`
	NAttr   int64    `xml:"n,attr"`
	DAttr   int64    `xml:"d,attr"`
}

// CTPoint2D ...
type CTPoint2D struct {
	XMLName xml.Name      `xml:"CT_Point2D"`
	XAttr   *STCoordinate `xml:"x,attr"`
	YAttr   *STCoordinate `xml:"y,attr"`
}

// CTPositiveSize2D ...
type CTPositiveSize2D struct {
	XMLName xml.Name `xml:"CT_PositiveSize2D"`
	CxAttr  int64    `xml:"cx,attr"`
	CyAttr  int64    `xml:"cy,attr"`
}

// CTComplementTransform ...
type CTComplementTransform struct {
	XMLName xml.Name `xml:"CT_ComplementTransform"`
}

// CTInverseTransform ...
type CTInverseTransform struct {
	XMLName xml.Name `xml:"CT_InverseTransform"`
}

// CTGrayscaleTransform ...
type CTGrayscaleTransform struct {
	XMLName xml.Name `xml:"CT_GrayscaleTransform"`
}

// CTGammaTransform ...
type CTGammaTransform struct {
	XMLName xml.Name `xml:"CT_GammaTransform"`
}

// CTInverseGammaTransform ...
type CTInverseGammaTransform struct {
	XMLName xml.Name `xml:"CT_InverseGammaTransform"`
}

// EGColorTransform ...
type EGColorTransform struct {
	XMLName  xml.Name `xml:"EG_ColorTransform"`
	Tint     *CTPositiveFixedPercentage
	Shade    *CTPositiveFixedPercentage
	Comp     *CTComplementTransform
	Inv      *CTInverseTransform
	Gray     *CTGrayscaleTransform
	Alpha    *CTPositiveFixedPercentage
	AlphaOff *CTFixedPercentage
	AlphaMod *CTPositivePercentage
	Hue      *CTPositiveFixedAngle
	HueOff   *CTAngle
	HueMod   *CTPositivePercentage
	Sat      *CTPercentage
	SatOff   *CTPercentage
	SatMod   *CTPercentage
	Lum      *CTPercentage
	LumOff   *CTPercentage
	LumMod   *CTPercentage
	Red      *CTPercentage
	RedOff   *CTPercentage
	RedMod   *CTPercentage
	Green    *CTPercentage
	GreenOff *CTPercentage
	GreenMod *CTPercentage
	Blue     *CTPercentage
	BlueOff  *CTPercentage
	BlueMod  *CTPercentage
	Gamma    *CTGammaTransform
	InvGamma *CTInverseGammaTransform
}

// CTScRgbColor ...
type CTScRgbColor struct {
	XMLName          xml.Name      `xml:"CT_ScRgbColor"`
	RAttr            *STPercentage `xml:"r,attr"`
	GAttr            *STPercentage `xml:"g,attr"`
	BAttr            *STPercentage `xml:"b,attr"`
	EGColorTransform []*EGColorTransform
}

// CTSRgbColor ...
type CTSRgbColor struct {
	XMLName          xml.Name `xml:"CT_SRgbColor"`
	ValAttr          []byte   `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// CTHslColor ...
type CTHslColor struct {
	XMLName          xml.Name      `xml:"CT_HslColor"`
	HueAttr          int           `xml:"hue,attr"`
	SatAttr          *STPercentage `xml:"sat,attr"`
	LumAttr          *STPercentage `xml:"lum,attr"`
	EGColorTransform []*EGColorTransform
}

// STSystemColorVal ...
type STSystemColorVal string

const (
	STSystemColorVal_scrollBar               STSystemColorVal = "scrollBar"
	STSystemColorVal_background              STSystemColorVal = "background"
	STSystemColorVal_activeCaption           STSystemColorVal = "activeCaption"
	STSystemColorVal_inactiveCaption         STSystemColorVal = "inactiveCaption"
	STSystemColorVal_menu                    STSystemColorVal = "menu"
	STSystemColorVal_window                  STSystemColorVal = "window"
	STSystemColorVal_windowFrame             STSystemColorVal = "windowFrame"
	STSystemColorVal_menuText                STSystemColorVal = "menuText"
	STSystemColorVal_windowText              STSystemColorVal = "windowText"
	STSystemColorVal_captionText             STSystemColorVal = "captionText"
	STSystemColorVal_activeBorder            STSystemColorVal = "activeBorder"
	STSystemColorVal_inactiveBorder          STSystemColorVal = "inactiveBorder"
	STSystemColorVal_appWorkspace            STSystemColorVal = "appWorkspace"
	STSystemColorVal_highlight               STSystemColorVal = "highlight"
	STSystemColorVal_highlightText           STSystemColorVal = "highlightText"
	STSystemColorVal_btnFace                 STSystemColorVal = "btnFace"
	STSystemColorVal_btnShadow               STSystemColorVal = "btnShadow"
	STSystemColorVal_grayText                STSystemColorVal = "grayText"
	STSystemColorVal_btnText                 STSystemColorVal = "btnText"
	STSystemColorVal_inactiveCaptionText     STSystemColorVal = "inactiveCaptionText"
	STSystemColorVal_btnHighlight            STSystemColorVal = "btnHighlight"
	STSystemColorVal_3dDkShadow              STSystemColorVal = "3dDkShadow"
	STSystemColorVal_3dLight                 STSystemColorVal = "3dLight"
	STSystemColorVal_infoText                STSystemColorVal = "infoText"
	STSystemColorVal_infoBk                  STSystemColorVal = "infoBk"
	STSystemColorVal_hotLight                STSystemColorVal = "hotLight"
	STSystemColorVal_gradientActiveCaption   STSystemColorVal = "gradientActiveCaption"
	STSystemColorVal_gradientInactiveCaption STSystemColorVal = "gradientInactiveCaption"
	STSystemColorVal_menuHighlight           STSystemColorVal = "menuHighlight"
	STSystemColorVal_menuBar                 STSystemColorVal = "menuBar"
)

// CTSystemColor ...
type CTSystemColor struct {
	XMLName          xml.Name `xml:"CT_SystemColor"`
	ValAttr          string   `xml:"val,attr"`
	LastClrAttr      []byte   `xml:"lastClr,attr,omitempty"`
	EGColorTransform []*EGColorTransform
}

// STSchemeColorVal ...
type STSchemeColorVal string

const (
	STSchemeColorVal_bg1      STSchemeColorVal = "bg1"
	STSchemeColorVal_tx1      STSchemeColorVal = "tx1"
	STSchemeColorVal_bg2      STSchemeColorVal = "bg2"
	STSchemeColorVal_tx2      STSchemeColorVal = "tx2"
	STSchemeColorVal_accent1  STSchemeColorVal = "accent1"
	STSchemeColorVal_accent2  STSchemeColorVal = "accent2"
	STSchemeColorVal_accent3  STSchemeColorVal = "accent3"
	STSchemeColorVal_accent4  STSchemeColorVal = "accent4"
	STSchemeColorVal_accent5  STSchemeColorVal = "accent5"
	STSchemeColorVal_accent6  STSchemeColorVal = "accent6"
	STSchemeColorVal_hlink    STSchemeColorVal = "hlink"
	STSchemeColorVal_folHlink STSchemeColorVal = "folHlink"
	STSchemeColorVal_phClr    STSchemeColorVal = "phClr"
	STSchemeColorVal_dk1      STSchemeColorVal = "dk1"
	STSchemeColorVal_lt1      STSchemeColorVal = "lt1"
	STSchemeColorVal_dk2      STSchemeColorVal = "dk2"
	STSchemeColorVal_lt2      STSchemeColorVal = "lt2"
)

// CTSchemeColor ...
type CTSchemeColor struct {
	XMLName          xml.Name `xml:"CT_SchemeColor"`
	ValAttr          string   `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// STPresetColorVal ...
type STPresetColorVal string

const (
	STPresetColorVal_aliceBlue            STPresetColorVal = "aliceBlue"
	STPresetColorVal_antiqueWhite         STPresetColorVal = "antiqueWhite"
	STPresetColorVal_aqua                 STPresetColorVal = "aqua"
	STPresetColorVal_aquamarine           STPresetColorVal = "aquamarine"
	STPresetColorVal_azure                STPresetColorVal = "azure"
	STPresetColorVal_beige                STPresetColorVal = "beige"
	STPresetColorVal_bisque               STPresetColorVal = "bisque"
	STPresetColorVal_black                STPresetColorVal = "black"
	STPresetColorVal_blanchedAlmond       STPresetColorVal = "blanchedAlmond"
	STPresetColorVal_blue                 STPresetColorVal = "blue"
	STPresetColorVal_blueViolet           STPresetColorVal = "blueViolet"
	STPresetColorVal_brown                STPresetColorVal = "brown"
	STPresetColorVal_burlyWood            STPresetColorVal = "burlyWood"
	STPresetColorVal_cadetBlue            STPresetColorVal = "cadetBlue"
	STPresetColorVal_chartreuse           STPresetColorVal = "chartreuse"
	STPresetColorVal_chocolate            STPresetColorVal = "chocolate"
	STPresetColorVal_coral                STPresetColorVal = "coral"
	STPresetColorVal_cornflowerBlue       STPresetColorVal = "cornflowerBlue"
	STPresetColorVal_cornsilk             STPresetColorVal = "cornsilk"
	STPresetColorVal_crimson              STPresetColorVal = "crimson"
	STPresetColorVal_cyan                 STPresetColorVal = "cyan"
	STPresetColorVal_darkBlue             STPresetColorVal = "darkBlue"
	STPresetColorVal_darkCyan             STPresetColorVal = "darkCyan"
	STPresetColorVal_darkGoldenrod        STPresetColorVal = "darkGoldenrod"
	STPresetColorVal_darkGray             STPresetColorVal = "darkGray"
	STPresetColorVal_darkGrey             STPresetColorVal = "darkGrey"
	STPresetColorVal_darkGreen            STPresetColorVal = "darkGreen"
	STPresetColorVal_darkKhaki            STPresetColorVal = "darkKhaki"
	STPresetColorVal_darkMagenta          STPresetColorVal = "darkMagenta"
	STPresetColorVal_darkOliveGreen       STPresetColorVal = "darkOliveGreen"
	STPresetColorVal_darkOrange           STPresetColorVal = "darkOrange"
	STPresetColorVal_darkOrchid           STPresetColorVal = "darkOrchid"
	STPresetColorVal_darkRed              STPresetColorVal = "darkRed"
	STPresetColorVal_darkSalmon           STPresetColorVal = "darkSalmon"
	STPresetColorVal_darkSeaGreen         STPresetColorVal = "darkSeaGreen"
	STPresetColorVal_darkSlateBlue        STPresetColorVal = "darkSlateBlue"
	STPresetColorVal_darkSlateGray        STPresetColorVal = "darkSlateGray"
	STPresetColorVal_darkSlateGrey        STPresetColorVal = "darkSlateGrey"
	STPresetColorVal_darkTurquoise        STPresetColorVal = "darkTurquoise"
	STPresetColorVal_darkViolet           STPresetColorVal = "darkViolet"
	STPresetColorVal_dkBlue               STPresetColorVal = "dkBlue"
	STPresetColorVal_dkCyan               STPresetColorVal = "dkCyan"
	STPresetColorVal_dkGoldenrod          STPresetColorVal = "dkGoldenrod"
	STPresetColorVal_dkGray               STPresetColorVal = "dkGray"
	STPresetColorVal_dkGrey               STPresetColorVal = "dkGrey"
	STPresetColorVal_dkGreen              STPresetColorVal = "dkGreen"
	STPresetColorVal_dkKhaki              STPresetColorVal = "dkKhaki"
	STPresetColorVal_dkMagenta            STPresetColorVal = "dkMagenta"
	STPresetColorVal_dkOliveGreen         STPresetColorVal = "dkOliveGreen"
	STPresetColorVal_dkOrange             STPresetColorVal = "dkOrange"
	STPresetColorVal_dkOrchid             STPresetColorVal = "dkOrchid"
	STPresetColorVal_dkRed                STPresetColorVal = "dkRed"
	STPresetColorVal_dkSalmon             STPresetColorVal = "dkSalmon"
	STPresetColorVal_dkSeaGreen           STPresetColorVal = "dkSeaGreen"
	STPresetColorVal_dkSlateBlue          STPresetColorVal = "dkSlateBlue"
	STPresetColorVal_dkSlateGray          STPresetColorVal = "dkSlateGray"
	STPresetColorVal_dkSlateGrey          STPresetColorVal = "dkSlateGrey"
	STPresetColorVal_dkTurquoise          STPresetColorVal = "dkTurquoise"
	STPresetColorVal_dkViolet             STPresetColorVal = "dkViolet"
	STPresetColorVal_deepPink             STPresetColorVal = "deepPink"
	STPresetColorVal_deepSkyBlue          STPresetColorVal = "deepSkyBlue"
	STPresetColorVal_dimGray              STPresetColorVal = "dimGray"
	STPresetColorVal_dimGrey              STPresetColorVal = "dimGrey"
	STPresetColorVal_dodgerBlue           STPresetColorVal = "dodgerBlue"
	STPresetColorVal_firebrick            STPresetColorVal = "firebrick"
	STPresetColorVal_floralWhite          STPresetColorVal = "floralWhite"
	STPresetColorVal_forestGreen          STPresetColorVal = "forestGreen"
	STPresetColorVal_fuchsia              STPresetColorVal = "fuchsia"
	STPresetColorVal_gainsboro            STPresetColorVal = "gainsboro"
	STPresetColorVal_ghostWhite           STPresetColorVal = "ghostWhite"
	STPresetColorVal_gold                 STPresetColorVal = "gold"
	STPresetColorVal_goldenrod            STPresetColorVal = "goldenrod"
	STPresetColorVal_gray                 STPresetColorVal = "gray"
	STPresetColorVal_grey                 STPresetColorVal = "grey"
	STPresetColorVal_green                STPresetColorVal = "green"
	STPresetColorVal_greenYellow          STPresetColorVal = "greenYellow"
	STPresetColorVal_honeydew             STPresetColorVal = "honeydew"
	STPresetColorVal_hotPink              STPresetColorVal = "hotPink"
	STPresetColorVal_indianRed            STPresetColorVal = "indianRed"
	STPresetColorVal_indigo               STPresetColorVal = "indigo"
	STPresetColorVal_ivory                STPresetColorVal = "ivory"
	STPresetColorVal_khaki                STPresetColorVal = "khaki"
	STPresetColorVal_lavender             STPresetColorVal = "lavender"
	STPresetColorVal_lavenderBlush        STPresetColorVal = "lavenderBlush"
	STPresetColorVal_lawnGreen            STPresetColorVal = "lawnGreen"
	STPresetColorVal_lemonChiffon         STPresetColorVal = "lemonChiffon"
	STPresetColorVal_lightBlue            STPresetColorVal = "lightBlue"
	STPresetColorVal_lightCoral           STPresetColorVal = "lightCoral"
	STPresetColorVal_lightCyan            STPresetColorVal = "lightCyan"
	STPresetColorVal_lightGoldenrodYellow STPresetColorVal = "lightGoldenrodYellow"
	STPresetColorVal_lightGray            STPresetColorVal = "lightGray"
	STPresetColorVal_lightGrey            STPresetColorVal = "lightGrey"
	STPresetColorVal_lightGreen           STPresetColorVal = "lightGreen"
	STPresetColorVal_lightPink            STPresetColorVal = "lightPink"
	STPresetColorVal_lightSalmon          STPresetColorVal = "lightSalmon"
	STPresetColorVal_lightSeaGreen        STPresetColorVal = "lightSeaGreen"
	STPresetColorVal_lightSkyBlue         STPresetColorVal = "lightSkyBlue"
	STPresetColorVal_lightSlateGray       STPresetColorVal = "lightSlateGray"
	STPresetColorVal_lightSlateGrey       STPresetColorVal = "lightSlateGrey"
	STPresetColorVal_lightSteelBlue       STPresetColorVal = "lightSteelBlue"
	STPresetColorVal_lightYellow          STPresetColorVal = "lightYellow"
	STPresetColorVal_ltBlue               STPresetColorVal = "ltBlue"
	STPresetColorVal_ltCoral              STPresetColorVal = "ltCoral"
	STPresetColorVal_ltCyan               STPresetColorVal = "ltCyan"
	STPresetColorVal_ltGoldenrodYellow    STPresetColorVal = "ltGoldenrodYellow"
	STPresetColorVal_ltGray               STPresetColorVal = "ltGray"
	STPresetColorVal_ltGrey               STPresetColorVal = "ltGrey"
	STPresetColorVal_ltGreen              STPresetColorVal = "ltGreen"
	STPresetColorVal_ltPink               STPresetColorVal = "ltPink"
	STPresetColorVal_ltSalmon             STPresetColorVal = "ltSalmon"
	STPresetColorVal_ltSeaGreen           STPresetColorVal = "ltSeaGreen"
	STPresetColorVal_ltSkyBlue            STPresetColorVal = "ltSkyBlue"
	STPresetColorVal_ltSlateGray          STPresetColorVal = "ltSlateGray"
	STPresetColorVal_ltSlateGrey          STPresetColorVal = "ltSlateGrey"
	STPresetColorVal_ltSteelBlue          STPresetColorVal = "ltSteelBlue"
	STPresetColorVal_ltYellow             STPresetColorVal = "ltYellow"
	STPresetColorVal_lime                 STPresetColorVal = "lime"
	STPresetColorVal_limeGreen            STPresetColorVal = "limeGreen"
	STPresetColorVal_linen                STPresetColorVal = "linen"
	STPresetColorVal_magenta              STPresetColorVal = "magenta"
	STPresetColorVal_maroon               STPresetColorVal = "maroon"
	STPresetColorVal_medAquamarine        STPresetColorVal = "medAquamarine"
	STPresetColorVal_medBlue              STPresetColorVal = "medBlue"
	STPresetColorVal_medOrchid            STPresetColorVal = "medOrchid"
	STPresetColorVal_medPurple            STPresetColorVal = "medPurple"
	STPresetColorVal_medSeaGreen          STPresetColorVal = "medSeaGreen"
	STPresetColorVal_medSlateBlue         STPresetColorVal = "medSlateBlue"
	STPresetColorVal_medSpringGreen       STPresetColorVal = "medSpringGreen"
	STPresetColorVal_medTurquoise         STPresetColorVal = "medTurquoise"
	STPresetColorVal_medVioletRed         STPresetColorVal = "medVioletRed"
	STPresetColorVal_mediumAquamarine     STPresetColorVal = "mediumAquamarine"
	STPresetColorVal_mediumBlue           STPresetColorVal = "mediumBlue"
	STPresetColorVal_mediumOrchid         STPresetColorVal = "mediumOrchid"
	STPresetColorVal_mediumPurple         STPresetColorVal = "mediumPurple"
	STPresetColorVal_mediumSeaGreen       STPresetColorVal = "mediumSeaGreen"
	STPresetColorVal_mediumSlateBlue      STPresetColorVal = "mediumSlateBlue"
	STPresetColorVal_mediumSpringGreen    STPresetColorVal = "mediumSpringGreen"
	STPresetColorVal_mediumTurquoise      STPresetColorVal = "mediumTurquoise"
	STPresetColorVal_mediumVioletRed      STPresetColorVal = "mediumVioletRed"
	STPresetColorVal_midnightBlue         STPresetColorVal = "midnightBlue"
	STPresetColorVal_mintCream            STPresetColorVal = "mintCream"
	STPresetColorVal_mistyRose            STPresetColorVal = "mistyRose"
	STPresetColorVal_moccasin             STPresetColorVal = "moccasin"
	STPresetColorVal_navajoWhite          STPresetColorVal = "navajoWhite"
	STPresetColorVal_navy                 STPresetColorVal = "navy"
	STPresetColorVal_oldLace              STPresetColorVal = "oldLace"
	STPresetColorVal_olive                STPresetColorVal = "olive"
	STPresetColorVal_oliveDrab            STPresetColorVal = "oliveDrab"
	STPresetColorVal_orange               STPresetColorVal = "orange"
	STPresetColorVal_orangeRed            STPresetColorVal = "orangeRed"
	STPresetColorVal_orchid               STPresetColorVal = "orchid"
	STPresetColorVal_paleGoldenrod        STPresetColorVal = "paleGoldenrod"
	STPresetColorVal_paleGreen            STPresetColorVal = "paleGreen"
	STPresetColorVal_paleTurquoise        STPresetColorVal = "paleTurquoise"
	STPresetColorVal_paleVioletRed        STPresetColorVal = "paleVioletRed"
	STPresetColorVal_papayaWhip           STPresetColorVal = "papayaWhip"
	STPresetColorVal_peachPuff            STPresetColorVal = "peachPuff"
	STPresetColorVal_peru                 STPresetColorVal = "peru"
	STPresetColorVal_pink                 STPresetColorVal = "pink"
	STPresetColorVal_plum                 STPresetColorVal = "plum"
	STPresetColorVal_powderBlue           STPresetColorVal = "powderBlue"
	STPresetColorVal_purple               STPresetColorVal = "purple"
	STPresetColorVal_red                  STPresetColorVal = "red"
	STPresetColorVal_rosyBrown            STPresetColorVal = "rosyBrown"
	STPresetColorVal_royalBlue            STPresetColorVal = "royalBlue"
	STPresetColorVal_saddleBrown          STPresetColorVal = "saddleBrown"
	STPresetColorVal_salmon               STPresetColorVal = "salmon"
	STPresetColorVal_sandyBrown           STPresetColorVal = "sandyBrown"
	STPresetColorVal_seaGreen             STPresetColorVal = "seaGreen"
	STPresetColorVal_seaShell             STPresetColorVal = "seaShell"
	STPresetColorVal_sienna               STPresetColorVal = "sienna"
	STPresetColorVal_silver               STPresetColorVal = "silver"
	STPresetColorVal_skyBlue              STPresetColorVal = "skyBlue"
	STPresetColorVal_slateBlue            STPresetColorVal = "slateBlue"
	STPresetColorVal_slateGray            STPresetColorVal = "slateGray"
	STPresetColorVal_slateGrey            STPresetColorVal = "slateGrey"
	STPresetColorVal_snow                 STPresetColorVal = "snow"
	STPresetColorVal_springGreen          STPresetColorVal = "springGreen"
	STPresetColorVal_steelBlue            STPresetColorVal = "steelBlue"
	STPresetColorVal_tan                  STPresetColorVal = "tan"
	STPresetColorVal_teal                 STPresetColorVal = "teal"
	STPresetColorVal_thistle              STPresetColorVal = "thistle"
	STPresetColorVal_tomato               STPresetColorVal = "tomato"
	STPresetColorVal_turquoise            STPresetColorVal = "turquoise"
	STPresetColorVal_violet               STPresetColorVal = "violet"
	STPresetColorVal_wheat                STPresetColorVal = "wheat"
	STPresetColorVal_white                STPresetColorVal = "white"
	STPresetColorVal_whiteSmoke           STPresetColorVal = "whiteSmoke"
	STPresetColorVal_yellow               STPresetColorVal = "yellow"
	STPresetColorVal_yellowGreen          STPresetColorVal = "yellowGreen"
)

// CTPresetColor ...
type CTPresetColor struct {
	XMLName          xml.Name `xml:"CT_PresetColor"`
	ValAttr          string   `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// EGOfficeArtExtensionList ...
type EGOfficeArtExtensionList struct {
	XMLName xml.Name `xml:"EG_OfficeArtExtensionList"`
	Ext     []*CTOfficeArtExtension
}

// CTOfficeArtExtensionList ...
type CTOfficeArtExtensionList struct {
	XMLName                  xml.Name `xml:"CT_OfficeArtExtensionList"`
	EGOfficeArtExtensionList []*EGOfficeArtExtensionList
}

// CTScale2D ...
type CTScale2D struct {
	XMLName xml.Name `xml:"CT_Scale2D"`
	Sx      *CTRatio `xml:"sx"`
	Sy      *CTRatio `xml:"sy"`
}

// CTTransform2D ...
type CTTransform2D struct {
	XMLName   xml.Name          `xml:"CT_Transform2D"`
	RotAttr   int               `xml:"rot,attr,omitempty"`
	FlipHAttr bool              `xml:"flipH,attr,omitempty"`
	FlipVAttr bool              `xml:"flipV,attr,omitempty"`
	Off       *CTPoint2D        `xml:"off"`
	Ext       *CTPositiveSize2D `xml:"ext"`
}

// CTGroupTransform2D ...
type CTGroupTransform2D struct {
	XMLName   xml.Name          `xml:"CT_GroupTransform2D"`
	RotAttr   int               `xml:"rot,attr,omitempty"`
	FlipHAttr bool              `xml:"flipH,attr,omitempty"`
	FlipVAttr bool              `xml:"flipV,attr,omitempty"`
	Off       *CTPoint2D        `xml:"off"`
	Ext       *CTPositiveSize2D `xml:"ext"`
	ChOff     *CTPoint2D        `xml:"chOff"`
	ChExt     *CTPositiveSize2D `xml:"chExt"`
}

// CTPoint3D ...
type CTPoint3D struct {
	XMLName xml.Name      `xml:"CT_Point3D"`
	XAttr   *STCoordinate `xml:"x,attr"`
	YAttr   *STCoordinate `xml:"y,attr"`
	ZAttr   *STCoordinate `xml:"z,attr"`
}

// CTVector3D ...
type CTVector3D struct {
	XMLName xml.Name      `xml:"CT_Vector3D"`
	DxAttr  *STCoordinate `xml:"dx,attr"`
	DyAttr  *STCoordinate `xml:"dy,attr"`
	DzAttr  *STCoordinate `xml:"dz,attr"`
}

// CTSphereCoords ...
type CTSphereCoords struct {
	XMLName xml.Name `xml:"CT_SphereCoords"`
	LatAttr int      `xml:"lat,attr"`
	LonAttr int      `xml:"lon,attr"`
	RevAttr int      `xml:"rev,attr"`
}

// CTRelativeRect ...
type CTRelativeRect struct {
	XMLName xml.Name      `xml:"CT_RelativeRect"`
	LAttr   *STPercentage `xml:"l,attr,omitempty"`
	TAttr   *STPercentage `xml:"t,attr,omitempty"`
	RAttr   *STPercentage `xml:"r,attr,omitempty"`
	BAttr   *STPercentage `xml:"b,attr,omitempty"`
}

// STRectAlignment ...
type STRectAlignment string

const (
	STRectAlignment_tl  STRectAlignment = "tl"
	STRectAlignment_t   STRectAlignment = "t"
	STRectAlignment_tr  STRectAlignment = "tr"
	STRectAlignment_l   STRectAlignment = "l"
	STRectAlignment_ctr STRectAlignment = "ctr"
	STRectAlignment_r   STRectAlignment = "r"
	STRectAlignment_bl  STRectAlignment = "bl"
	STRectAlignment_b   STRectAlignment = "b"
	STRectAlignment_br  STRectAlignment = "br"
)

// EGColorChoice ...
type EGColorChoice struct {
	XMLName   xml.Name `xml:"EG_ColorChoice"`
	ScrgbClr  *CTScRgbColor
	SrgbClr   *CTSRgbColor
	HslClr    *CTHslColor
	SysClr    *CTSystemColor
	SchemeClr *CTSchemeColor
	PrstClr   *CTPresetColor
}

// CTColor ...
type CTColor struct {
	XMLName       xml.Name `xml:"CT_Color"`
	EGColorChoice *EGColorChoice
}

// CTColorMRU ...
type CTColorMRU struct {
	XMLName       xml.Name `xml:"CT_ColorMRU"`
	EGColorChoice []*EGColorChoice
}

// STBlackWhiteMode ...
type STBlackWhiteMode string

const (
	STBlackWhiteMode_clr        STBlackWhiteMode = "clr"
	STBlackWhiteMode_auto       STBlackWhiteMode = "auto"
	STBlackWhiteMode_gray       STBlackWhiteMode = "gray"
	STBlackWhiteMode_ltGray     STBlackWhiteMode = "ltGray"
	STBlackWhiteMode_invGray    STBlackWhiteMode = "invGray"
	STBlackWhiteMode_grayWhite  STBlackWhiteMode = "grayWhite"
	STBlackWhiteMode_blackGray  STBlackWhiteMode = "blackGray"
	STBlackWhiteMode_blackWhite STBlackWhiteMode = "blackWhite"
	STBlackWhiteMode_black      STBlackWhiteMode = "black"
	STBlackWhiteMode_white      STBlackWhiteMode = "white"
	STBlackWhiteMode_hidden     STBlackWhiteMode = "hidden"
)

// AGBlob ...
type AGBlob struct {
	XMLName    xml.Name `xml:"AG_Blob"`
	REmbedAttr string   `xml:"r:embed,attr,omitempty"`
	RLinkAttr  string   `xml:"r:link,attr,omitempty"`
}

// CTEmbeddedWAVAudioFile ...
type CTEmbeddedWAVAudioFile struct {
	XMLName    xml.Name `xml:"CT_EmbeddedWAVAudioFile"`
	REmbedAttr string   `xml:"r:embed,attr"`
	NameAttr   string   `xml:"name,attr,omitempty"`
}

// CTHyperlink ...
type CTHyperlink struct {
	XMLName            xml.Name                  `xml:"CT_Hyperlink"`
	RIdAttr            string                    `xml:"r:id,attr,omitempty"`
	InvalidUrlAttr     string                    `xml:"invalidUrl,attr,omitempty"`
	ActionAttr         string                    `xml:"action,attr,omitempty"`
	TgtFrameAttr       string                    `xml:"tgtFrame,attr,omitempty"`
	TooltipAttr        string                    `xml:"tooltip,attr,omitempty"`
	HistoryAttr        bool                      `xml:"history,attr,omitempty"`
	HighlightClickAttr bool                      `xml:"highlightClick,attr,omitempty"`
	EndSndAttr         bool                      `xml:"endSnd,attr,omitempty"`
	Snd                *CTEmbeddedWAVAudioFile   `xml:"snd"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// STDrawingElementId ...
type STDrawingElementId uint32

// AGLocking ...
type AGLocking struct {
	XMLName                xml.Name `xml:"AG_Locking"`
	NoGrpAttr              bool     `xml:"noGrp,attr,omitempty"`
	NoSelectAttr           bool     `xml:"noSelect,attr,omitempty"`
	NoRotAttr              bool     `xml:"noRot,attr,omitempty"`
	NoChangeAspectAttr     bool     `xml:"noChangeAspect,attr,omitempty"`
	NoMoveAttr             bool     `xml:"noMove,attr,omitempty"`
	NoResizeAttr           bool     `xml:"noResize,attr,omitempty"`
	NoEditPointsAttr       bool     `xml:"noEditPoints,attr,omitempty"`
	NoAdjustHandlesAttr    bool     `xml:"noAdjustHandles,attr,omitempty"`
	NoChangeArrowheadsAttr bool     `xml:"noChangeArrowheads,attr,omitempty"`
	NoChangeShapeTypeAttr  bool     `xml:"noChangeShapeType,attr,omitempty"`
}

// CTConnectorLocking ...
type CTConnectorLocking struct {
	XMLName   xml.Name `xml:"CT_ConnectorLocking"`
	AGLocking *AGLocking
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTShapeLocking ...
type CTShapeLocking struct {
	XMLName        xml.Name `xml:"CT_ShapeLocking"`
	AGLocking      *AGLocking
	NoTextEditAttr bool                      `xml:"noTextEdit,attr,omitempty"`
	ExtLst         *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTPictureLocking ...
type CTPictureLocking struct {
	XMLName    xml.Name `xml:"CT_PictureLocking"`
	AGLocking  *AGLocking
	NoCropAttr bool                      `xml:"noCrop,attr,omitempty"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGroupLocking ...
type CTGroupLocking struct {
	XMLName            xml.Name                  `xml:"CT_GroupLocking"`
	NoGrpAttr          bool                      `xml:"noGrp,attr,omitempty"`
	NoUngrpAttr        bool                      `xml:"noUngrp,attr,omitempty"`
	NoSelectAttr       bool                      `xml:"noSelect,attr,omitempty"`
	NoRotAttr          bool                      `xml:"noRot,attr,omitempty"`
	NoChangeAspectAttr bool                      `xml:"noChangeAspect,attr,omitempty"`
	NoMoveAttr         bool                      `xml:"noMove,attr,omitempty"`
	NoResizeAttr       bool                      `xml:"noResize,attr,omitempty"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGraphicalObjectFrameLocking ...
type CTGraphicalObjectFrameLocking struct {
	XMLName            xml.Name                  `xml:"CT_GraphicalObjectFrameLocking"`
	NoGrpAttr          bool                      `xml:"noGrp,attr,omitempty"`
	NoDrilldownAttr    bool                      `xml:"noDrilldown,attr,omitempty"`
	NoSelectAttr       bool                      `xml:"noSelect,attr,omitempty"`
	NoChangeAspectAttr bool                      `xml:"noChangeAspect,attr,omitempty"`
	NoMoveAttr         bool                      `xml:"noMove,attr,omitempty"`
	NoResizeAttr       bool                      `xml:"noResize,attr,omitempty"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTContentPartLocking ...
type CTContentPartLocking struct {
	XMLName   xml.Name `xml:"CT_ContentPartLocking"`
	AGLocking *AGLocking
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualDrawingProps ...
type CTNonVisualDrawingProps struct {
	XMLName    xml.Name                  `xml:"CT_NonVisualDrawingProps"`
	IdAttr     uint32                    `xml:"id,attr"`
	NameAttr   string                    `xml:"name,attr"`
	DescrAttr  string                    `xml:"descr,attr,omitempty"`
	HiddenAttr bool                      `xml:"hidden,attr,omitempty"`
	TitleAttr  string                    `xml:"title,attr,omitempty"`
	HlinkClick *CTHyperlink              `xml:"hlinkClick"`
	HlinkHover *CTHyperlink              `xml:"hlinkHover"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualDrawingShapeProps ...
type CTNonVisualDrawingShapeProps struct {
	XMLName   xml.Name                  `xml:"CT_NonVisualDrawingShapeProps"`
	TxBoxAttr bool                      `xml:"txBox,attr,omitempty"`
	SpLocks   *CTShapeLocking           `xml:"spLocks"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualConnectorProperties ...
type CTNonVisualConnectorProperties struct {
	XMLName    xml.Name                  `xml:"CT_NonVisualConnectorProperties"`
	CxnSpLocks *CTConnectorLocking       `xml:"cxnSpLocks"`
	StCxn      *CTConnection             `xml:"stCxn"`
	EndCxn     *CTConnection             `xml:"endCxn"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualPictureProperties ...
type CTNonVisualPictureProperties struct {
	XMLName                  xml.Name                  `xml:"CT_NonVisualPictureProperties"`
	PreferRelativeResizeAttr bool                      `xml:"preferRelativeResize,attr,omitempty"`
	PicLocks                 *CTPictureLocking         `xml:"picLocks"`
	ExtLst                   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualGroupDrawingShapeProps ...
type CTNonVisualGroupDrawingShapeProps struct {
	XMLName    xml.Name                  `xml:"CT_NonVisualGroupDrawingShapeProps"`
	GrpSpLocks *CTGroupLocking           `xml:"grpSpLocks"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualGraphicFrameProperties ...
type CTNonVisualGraphicFrameProperties struct {
	XMLName           xml.Name                       `xml:"CT_NonVisualGraphicFrameProperties"`
	GraphicFrameLocks *CTGraphicalObjectFrameLocking `xml:"graphicFrameLocks"`
	ExtLst            *CTOfficeArtExtensionList      `xml:"extLst"`
}

// CTNonVisualContentPartProperties ...
type CTNonVisualContentPartProperties struct {
	XMLName       xml.Name                  `xml:"CT_NonVisualContentPartProperties"`
	IsCommentAttr bool                      `xml:"isComment,attr,omitempty"`
	CpLocks       *CTContentPartLocking     `xml:"cpLocks"`
	ExtLst        *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGraphicalObjectData ...
type CTGraphicalObjectData struct {
	XMLName xml.Name `xml:"CT_GraphicalObjectData"`
	UriAttr string   `xml:"uri,attr"`
}

// CTGraphicalObject ...
type CTGraphicalObject struct {
	XMLName     xml.Name               `xml:"CT_GraphicalObject"`
	GraphicData *CTGraphicalObjectData `xml:"graphicData"`
}

// Graphic ...
type Graphic *CTGraphicalObject

// STChartBuildStep ...
type STChartBuildStep string

const (
	STChartBuildStep_category     STChartBuildStep = "category"
	STChartBuildStep_ptInCategory STChartBuildStep = "ptInCategory"
	STChartBuildStep_series       STChartBuildStep = "series"
	STChartBuildStep_ptInSeries   STChartBuildStep = "ptInSeries"
	STChartBuildStep_allPts       STChartBuildStep = "allPts"
	STChartBuildStep_gridLegend   STChartBuildStep = "gridLegend"
)

// STDgmBuildStep ...
type STDgmBuildStep string

const (
	STDgmBuildStep_sp STDgmBuildStep = "sp"
	STDgmBuildStep_bg STDgmBuildStep = "bg"
)

// CTAnimationDgmElement ...
type CTAnimationDgmElement struct {
	XMLName     xml.Name `xml:"CT_AnimationDgmElement"`
	IdAttr      string   `xml:"id,attr,omitempty"`
	BldStepAttr string   `xml:"bldStep,attr,omitempty"`
}

// CTAnimationChartElement ...
type CTAnimationChartElement struct {
	XMLName         xml.Name `xml:"CT_AnimationChartElement"`
	SeriesIdxAttr   int      `xml:"seriesIdx,attr,omitempty"`
	CategoryIdxAttr int      `xml:"categoryIdx,attr,omitempty"`
	BldStepAttr     string   `xml:"bldStep,attr"`
}

// CTAnimationElementChoice ...
type CTAnimationElementChoice struct {
	XMLName xml.Name                 `xml:"CT_AnimationElementChoice"`
	Dgm     *CTAnimationDgmElement   `xml:"dgm"`
	Chart   *CTAnimationChartElement `xml:"chart"`
}

// STAnimationBuildType ...
type STAnimationBuildType string

const (
	STAnimationBuildType_allAtOnce STAnimationBuildType = "allAtOnce"
)

// STAnimationDgmOnlyBuildType ...
type STAnimationDgmOnlyBuildType string

const (
	STAnimationDgmOnlyBuildType_one       STAnimationDgmOnlyBuildType = "one"
	STAnimationDgmOnlyBuildType_lvlOne    STAnimationDgmOnlyBuildType = "lvlOne"
	STAnimationDgmOnlyBuildType_lvlAtOnce STAnimationDgmOnlyBuildType = "lvlAtOnce"
)

// STAnimationDgmBuildType ...
type STAnimationDgmBuildType struct {
	XMLName                     xml.Name `xml:"ST_AnimationDgmBuildType"`
	STAnimationBuildType        string
	STAnimationDgmOnlyBuildType string
}

// CTAnimationDgmBuildProperties ...
type CTAnimationDgmBuildProperties struct {
	XMLName xml.Name                 `xml:"CT_AnimationDgmBuildProperties"`
	BldAttr *STAnimationDgmBuildType `xml:"bld,attr,omitempty"`
	RevAttr bool                     `xml:"rev,attr,omitempty"`
}

// STAnimationChartOnlyBuildType ...
type STAnimationChartOnlyBuildType string

const (
	STAnimationChartOnlyBuildType_series     STAnimationChartOnlyBuildType = "series"
	STAnimationChartOnlyBuildType_category   STAnimationChartOnlyBuildType = "category"
	STAnimationChartOnlyBuildType_seriesEl   STAnimationChartOnlyBuildType = "seriesEl"
	STAnimationChartOnlyBuildType_categoryEl STAnimationChartOnlyBuildType = "categoryEl"
)

// STAnimationChartBuildType ...
type STAnimationChartBuildType struct {
	XMLName                       xml.Name `xml:"ST_AnimationChartBuildType"`
	STAnimationBuildType          string
	STAnimationChartOnlyBuildType string
}

// CTAnimationChartBuildProperties ...
type CTAnimationChartBuildProperties struct {
	XMLName    xml.Name                   `xml:"CT_AnimationChartBuildProperties"`
	BldAttr    *STAnimationChartBuildType `xml:"bld,attr,omitempty"`
	AnimBgAttr bool                       `xml:"animBg,attr,omitempty"`
}

// CTAnimationGraphicalObjectBuildProperties ...
type CTAnimationGraphicalObjectBuildProperties struct {
	XMLName  xml.Name                         `xml:"CT_AnimationGraphicalObjectBuildProperties"`
	BldDgm   *CTAnimationDgmBuildProperties   `xml:"bldDgm"`
	BldChart *CTAnimationChartBuildProperties `xml:"bldChart"`
}

// CTBackgroundFormatting ...
type CTBackgroundFormatting struct {
	XMLName            xml.Name `xml:"CT_BackgroundFormatting"`
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
}

// CTWholeE2oFormatting ...
type CTWholeE2oFormatting struct {
	XMLName            xml.Name `xml:"CT_WholeE2oFormatting"`
	EGEffectProperties []*EGEffectProperties
	Ln                 *CTLineProperties `xml:"ln"`
}

// CTGvmlUseShapeRectangle ...
type CTGvmlUseShapeRectangle struct {
	XMLName xml.Name `xml:"CT_GvmlUseShapeRectangle"`
}

// CTGvmlTextShape ...
type CTGvmlTextShape struct {
	XMLName   xml.Name                  `xml:"CT_GvmlTextShape"`
	TxBody    *CTTextBody               `xml:"txBody"`
	UseSpRect *CTGvmlUseShapeRectangle  `xml:"useSpRect"`
	Xfrm      *CTTransform2D            `xml:"xfrm"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlShapeNonVisual ...
type CTGvmlShapeNonVisual struct {
	XMLName xml.Name                      `xml:"CT_GvmlShapeNonVisual"`
	CNvPr   *CTNonVisualDrawingProps      `xml:"cNvPr"`
	CNvSpPr *CTNonVisualDrawingShapeProps `xml:"cNvSpPr"`
}

// CTGvmlShape ...
type CTGvmlShape struct {
	XMLName xml.Name                  `xml:"CT_GvmlShape"`
	NvSpPr  *CTGvmlShapeNonVisual     `xml:"nvSpPr"`
	SpPr    *CTShapeProperties        `xml:"spPr"`
	TxSp    *CTGvmlTextShape          `xml:"txSp"`
	Style   *CTShapeStyle             `xml:"style"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlConnectorNonVisual ...
type CTGvmlConnectorNonVisual struct {
	XMLName    xml.Name                        `xml:"CT_GvmlConnectorNonVisual"`
	CNvPr      *CTNonVisualDrawingProps        `xml:"cNvPr"`
	CNvCxnSpPr *CTNonVisualConnectorProperties `xml:"cNvCxnSpPr"`
}

// CTGvmlConnector ...
type CTGvmlConnector struct {
	XMLName   xml.Name                  `xml:"CT_GvmlConnector"`
	NvCxnSpPr *CTGvmlConnectorNonVisual `xml:"nvCxnSpPr"`
	SpPr      *CTShapeProperties        `xml:"spPr"`
	Style     *CTShapeStyle             `xml:"style"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlPictureNonVisual ...
type CTGvmlPictureNonVisual struct {
	XMLName  xml.Name                      `xml:"CT_GvmlPictureNonVisual"`
	CNvPr    *CTNonVisualDrawingProps      `xml:"cNvPr"`
	CNvPicPr *CTNonVisualPictureProperties `xml:"cNvPicPr"`
}

// CTGvmlPicture ...
type CTGvmlPicture struct {
	XMLName  xml.Name                  `xml:"CT_GvmlPicture"`
	NvPicPr  *CTGvmlPictureNonVisual   `xml:"nvPicPr"`
	BlipFill *CTBlipFillProperties     `xml:"blipFill"`
	SpPr     *CTShapeProperties        `xml:"spPr"`
	Style    *CTShapeStyle             `xml:"style"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlGraphicFrameNonVisual ...
type CTGvmlGraphicFrameNonVisual struct {
	XMLName           xml.Name                           `xml:"CT_GvmlGraphicFrameNonVisual"`
	CNvPr             *CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGraphicFramePr *CTNonVisualGraphicFrameProperties `xml:"cNvGraphicFramePr"`
}

// CTGvmlGraphicalObjectFrame ...
type CTGvmlGraphicalObjectFrame struct {
	XMLName          xml.Name                     `xml:"CT_GvmlGraphicalObjectFrame"`
	NvGraphicFramePr *CTGvmlGraphicFrameNonVisual `xml:"nvGraphicFramePr"`
	Graphic          *CTGraphicalObject           `xml:"graphic"`
	Xfrm             *CTTransform2D               `xml:"xfrm"`
	ExtLst           *CTOfficeArtExtensionList    `xml:"extLst"`
}

// CTGvmlGroupShapeNonVisual ...
type CTGvmlGroupShapeNonVisual struct {
	XMLName    xml.Name                           `xml:"CT_GvmlGroupShapeNonVisual"`
	CNvPr      *CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGrpSpPr *CTNonVisualGroupDrawingShapeProps `xml:"cNvGrpSpPr"`
}

// CTGvmlGroupShape ...
type CTGvmlGroupShape struct {
	XMLName      xml.Name                    `xml:"CT_GvmlGroupShape"`
	NvGrpSpPr    *CTGvmlGroupShapeNonVisual  `xml:"nvGrpSpPr"`
	GrpSpPr      *CTGroupShapeProperties     `xml:"grpSpPr"`
	TxSp         *CTGvmlTextShape            `xml:"txSp"`
	Sp           *CTGvmlShape                `xml:"sp"`
	CxnSp        *CTGvmlConnector            `xml:"cxnSp"`
	Pic          *CTGvmlPicture              `xml:"pic"`
	GraphicFrame *CTGvmlGraphicalObjectFrame `xml:"graphicFrame"`
	GrpSp        *CTGvmlGroupShape           `xml:"grpSp"`
	ExtLst       *CTOfficeArtExtensionList   `xml:"extLst"`
}

// STPresetCameraType ...
type STPresetCameraType string

const (
	STPresetCameraType_legacyObliqueTopLeft                STPresetCameraType = "legacyObliqueTopLeft"
	STPresetCameraType_legacyObliqueTop                    STPresetCameraType = "legacyObliqueTop"
	STPresetCameraType_legacyObliqueTopRight               STPresetCameraType = "legacyObliqueTopRight"
	STPresetCameraType_legacyObliqueLeft                   STPresetCameraType = "legacyObliqueLeft"
	STPresetCameraType_legacyObliqueFront                  STPresetCameraType = "legacyObliqueFront"
	STPresetCameraType_legacyObliqueRight                  STPresetCameraType = "legacyObliqueRight"
	STPresetCameraType_legacyObliqueBottomLeft             STPresetCameraType = "legacyObliqueBottomLeft"
	STPresetCameraType_legacyObliqueBottom                 STPresetCameraType = "legacyObliqueBottom"
	STPresetCameraType_legacyObliqueBottomRight            STPresetCameraType = "legacyObliqueBottomRight"
	STPresetCameraType_legacyPerspectiveTopLeft            STPresetCameraType = "legacyPerspectiveTopLeft"
	STPresetCameraType_legacyPerspectiveTop                STPresetCameraType = "legacyPerspectiveTop"
	STPresetCameraType_legacyPerspectiveTopRight           STPresetCameraType = "legacyPerspectiveTopRight"
	STPresetCameraType_legacyPerspectiveLeft               STPresetCameraType = "legacyPerspectiveLeft"
	STPresetCameraType_legacyPerspectiveFront              STPresetCameraType = "legacyPerspectiveFront"
	STPresetCameraType_legacyPerspectiveRight              STPresetCameraType = "legacyPerspectiveRight"
	STPresetCameraType_legacyPerspectiveBottomLeft         STPresetCameraType = "legacyPerspectiveBottomLeft"
	STPresetCameraType_legacyPerspectiveBottom             STPresetCameraType = "legacyPerspectiveBottom"
	STPresetCameraType_legacyPerspectiveBottomRight        STPresetCameraType = "legacyPerspectiveBottomRight"
	STPresetCameraType_orthographicFront                   STPresetCameraType = "orthographicFront"
	STPresetCameraType_isometricTopUp                      STPresetCameraType = "isometricTopUp"
	STPresetCameraType_isometricTopDown                    STPresetCameraType = "isometricTopDown"
	STPresetCameraType_isometricBottomUp                   STPresetCameraType = "isometricBottomUp"
	STPresetCameraType_isometricBottomDown                 STPresetCameraType = "isometricBottomDown"
	STPresetCameraType_isometricLeftUp                     STPresetCameraType = "isometricLeftUp"
	STPresetCameraType_isometricLeftDown                   STPresetCameraType = "isometricLeftDown"
	STPresetCameraType_isometricRightUp                    STPresetCameraType = "isometricRightUp"
	STPresetCameraType_isometricRightDown                  STPresetCameraType = "isometricRightDown"
	STPresetCameraType_isometricOffAxis1Left               STPresetCameraType = "isometricOffAxis1Left"
	STPresetCameraType_isometricOffAxis1Right              STPresetCameraType = "isometricOffAxis1Right"
	STPresetCameraType_isometricOffAxis1Top                STPresetCameraType = "isometricOffAxis1Top"
	STPresetCameraType_isometricOffAxis2Left               STPresetCameraType = "isometricOffAxis2Left"
	STPresetCameraType_isometricOffAxis2Right              STPresetCameraType = "isometricOffAxis2Right"
	STPresetCameraType_isometricOffAxis2Top                STPresetCameraType = "isometricOffAxis2Top"
	STPresetCameraType_isometricOffAxis3Left               STPresetCameraType = "isometricOffAxis3Left"
	STPresetCameraType_isometricOffAxis3Right              STPresetCameraType = "isometricOffAxis3Right"
	STPresetCameraType_isometricOffAxis3Bottom             STPresetCameraType = "isometricOffAxis3Bottom"
	STPresetCameraType_isometricOffAxis4Left               STPresetCameraType = "isometricOffAxis4Left"
	STPresetCameraType_isometricOffAxis4Right              STPresetCameraType = "isometricOffAxis4Right"
	STPresetCameraType_isometricOffAxis4Bottom             STPresetCameraType = "isometricOffAxis4Bottom"
	STPresetCameraType_obliqueTopLeft                      STPresetCameraType = "obliqueTopLeft"
	STPresetCameraType_obliqueTop                          STPresetCameraType = "obliqueTop"
	STPresetCameraType_obliqueTopRight                     STPresetCameraType = "obliqueTopRight"
	STPresetCameraType_obliqueLeft                         STPresetCameraType = "obliqueLeft"
	STPresetCameraType_obliqueRight                        STPresetCameraType = "obliqueRight"
	STPresetCameraType_obliqueBottomLeft                   STPresetCameraType = "obliqueBottomLeft"
	STPresetCameraType_obliqueBottom                       STPresetCameraType = "obliqueBottom"
	STPresetCameraType_obliqueBottomRight                  STPresetCameraType = "obliqueBottomRight"
	STPresetCameraType_perspectiveFront                    STPresetCameraType = "perspectiveFront"
	STPresetCameraType_perspectiveLeft                     STPresetCameraType = "perspectiveLeft"
	STPresetCameraType_perspectiveRight                    STPresetCameraType = "perspectiveRight"
	STPresetCameraType_perspectiveAbove                    STPresetCameraType = "perspectiveAbove"
	STPresetCameraType_perspectiveBelow                    STPresetCameraType = "perspectiveBelow"
	STPresetCameraType_perspectiveAboveLeftFacing          STPresetCameraType = "perspectiveAboveLeftFacing"
	STPresetCameraType_perspectiveAboveRightFacing         STPresetCameraType = "perspectiveAboveRightFacing"
	STPresetCameraType_perspectiveContrastingLeftFacing    STPresetCameraType = "perspectiveContrastingLeftFacing"
	STPresetCameraType_perspectiveContrastingRightFacing   STPresetCameraType = "perspectiveContrastingRightFacing"
	STPresetCameraType_perspectiveHeroicLeftFacing         STPresetCameraType = "perspectiveHeroicLeftFacing"
	STPresetCameraType_perspectiveHeroicRightFacing        STPresetCameraType = "perspectiveHeroicRightFacing"
	STPresetCameraType_perspectiveHeroicExtremeLeftFacing  STPresetCameraType = "perspectiveHeroicExtremeLeftFacing"
	STPresetCameraType_perspectiveHeroicExtremeRightFacing STPresetCameraType = "perspectiveHeroicExtremeRightFacing"
	STPresetCameraType_perspectiveRelaxed                  STPresetCameraType = "perspectiveRelaxed"
	STPresetCameraType_perspectiveRelaxedModerately        STPresetCameraType = "perspectiveRelaxedModerately"
)

// STFOVAngle ...
type STFOVAngle int

// CTCamera ...
type CTCamera struct {
	XMLName  xml.Name              `xml:"CT_Camera"`
	PrstAttr string                `xml:"prst,attr"`
	FovAttr  int                   `xml:"fov,attr,omitempty"`
	ZoomAttr *STPositivePercentage `xml:"zoom,attr,omitempty"`
	Rot      *CTSphereCoords       `xml:"rot"`
}

// STLightRigDirection ...
type STLightRigDirection string

const (
	STLightRigDirection_tl STLightRigDirection = "tl"
	STLightRigDirection_t  STLightRigDirection = "t"
	STLightRigDirection_tr STLightRigDirection = "tr"
	STLightRigDirection_l  STLightRigDirection = "l"
	STLightRigDirection_r  STLightRigDirection = "r"
	STLightRigDirection_bl STLightRigDirection = "bl"
	STLightRigDirection_b  STLightRigDirection = "b"
	STLightRigDirection_br STLightRigDirection = "br"
)

// STLightRigType ...
type STLightRigType string

const (
	STLightRigType_legacyFlat1   STLightRigType = "legacyFlat1"
	STLightRigType_legacyFlat2   STLightRigType = "legacyFlat2"
	STLightRigType_legacyFlat3   STLightRigType = "legacyFlat3"
	STLightRigType_legacyFlat4   STLightRigType = "legacyFlat4"
	STLightRigType_legacyNormal1 STLightRigType = "legacyNormal1"
	STLightRigType_legacyNormal2 STLightRigType = "legacyNormal2"
	STLightRigType_legacyNormal3 STLightRigType = "legacyNormal3"
	STLightRigType_legacyNormal4 STLightRigType = "legacyNormal4"
	STLightRigType_legacyHarsh1  STLightRigType = "legacyHarsh1"
	STLightRigType_legacyHarsh2  STLightRigType = "legacyHarsh2"
	STLightRigType_legacyHarsh3  STLightRigType = "legacyHarsh3"
	STLightRigType_legacyHarsh4  STLightRigType = "legacyHarsh4"
	STLightRigType_threePt       STLightRigType = "threePt"
	STLightRigType_balanced      STLightRigType = "balanced"
	STLightRigType_soft          STLightRigType = "soft"
	STLightRigType_harsh         STLightRigType = "harsh"
	STLightRigType_flood         STLightRigType = "flood"
	STLightRigType_contrasting   STLightRigType = "contrasting"
	STLightRigType_morning       STLightRigType = "morning"
	STLightRigType_sunrise       STLightRigType = "sunrise"
	STLightRigType_sunset        STLightRigType = "sunset"
	STLightRigType_chilly        STLightRigType = "chilly"
	STLightRigType_freezing      STLightRigType = "freezing"
	STLightRigType_flat          STLightRigType = "flat"
	STLightRigType_twoPt         STLightRigType = "twoPt"
	STLightRigType_glow          STLightRigType = "glow"
	STLightRigType_brightRoom    STLightRigType = "brightRoom"
)

// CTLightRig ...
type CTLightRig struct {
	XMLName xml.Name        `xml:"CT_LightRig"`
	RigAttr string          `xml:"rig,attr"`
	DirAttr string          `xml:"dir,attr"`
	Rot     *CTSphereCoords `xml:"rot"`
}

// CTScene3D ...
type CTScene3D struct {
	XMLName  xml.Name                  `xml:"CT_Scene3D"`
	Camera   *CTCamera                 `xml:"camera"`
	LightRig *CTLightRig               `xml:"lightRig"`
	Backdrop *CTBackdrop               `xml:"backdrop"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBackdrop ...
type CTBackdrop struct {
	XMLName xml.Name                  `xml:"CT_Backdrop"`
	Anchor  *CTPoint3D                `xml:"anchor"`
	Norm    *CTVector3D               `xml:"norm"`
	Up      *CTVector3D               `xml:"up"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// STBevelPresetType ...
type STBevelPresetType string

const (
	STBevelPresetType_relaxedInset STBevelPresetType = "relaxedInset"
	STBevelPresetType_circle       STBevelPresetType = "circle"
	STBevelPresetType_slope        STBevelPresetType = "slope"
	STBevelPresetType_cross        STBevelPresetType = "cross"
	STBevelPresetType_angle        STBevelPresetType = "angle"
	STBevelPresetType_softRound    STBevelPresetType = "softRound"
	STBevelPresetType_convex       STBevelPresetType = "convex"
	STBevelPresetType_coolSlant    STBevelPresetType = "coolSlant"
	STBevelPresetType_divot        STBevelPresetType = "divot"
	STBevelPresetType_riblet       STBevelPresetType = "riblet"
	STBevelPresetType_hardEdge     STBevelPresetType = "hardEdge"
	STBevelPresetType_artDeco      STBevelPresetType = "artDeco"
)

// CTBevel ...
type CTBevel struct {
	XMLName  xml.Name `xml:"CT_Bevel"`
	WAttr    int64    `xml:"w,attr,omitempty"`
	HAttr    int64    `xml:"h,attr,omitempty"`
	PrstAttr string   `xml:"prst,attr,omitempty"`
}

// STPresetMaterialType ...
type STPresetMaterialType string

const (
	STPresetMaterialType_legacyMatte       STPresetMaterialType = "legacyMatte"
	STPresetMaterialType_legacyPlastic     STPresetMaterialType = "legacyPlastic"
	STPresetMaterialType_legacyMetal       STPresetMaterialType = "legacyMetal"
	STPresetMaterialType_legacyWireframe   STPresetMaterialType = "legacyWireframe"
	STPresetMaterialType_matte             STPresetMaterialType = "matte"
	STPresetMaterialType_plastic           STPresetMaterialType = "plastic"
	STPresetMaterialType_metal             STPresetMaterialType = "metal"
	STPresetMaterialType_warmMatte         STPresetMaterialType = "warmMatte"
	STPresetMaterialType_translucentPowder STPresetMaterialType = "translucentPowder"
	STPresetMaterialType_powder            STPresetMaterialType = "powder"
	STPresetMaterialType_dkEdge            STPresetMaterialType = "dkEdge"
	STPresetMaterialType_softEdge          STPresetMaterialType = "softEdge"
	STPresetMaterialType_clear             STPresetMaterialType = "clear"
	STPresetMaterialType_flat              STPresetMaterialType = "flat"
	STPresetMaterialType_softmetal         STPresetMaterialType = "softmetal"
)

// CTShape3D ...
type CTShape3D struct {
	XMLName          xml.Name                  `xml:"CT_Shape3D"`
	ZAttr            *STCoordinate             `xml:"z,attr,omitempty"`
	ExtrusionHAttr   int64                     `xml:"extrusionH,attr,omitempty"`
	ContourWAttr     int64                     `xml:"contourW,attr,omitempty"`
	PrstMaterialAttr string                    `xml:"prstMaterial,attr,omitempty"`
	BevelT           *CTBevel                  `xml:"bevelT"`
	BevelB           *CTBevel                  `xml:"bevelB"`
	ExtrusionClr     *CTColor                  `xml:"extrusionClr"`
	ContourClr       *CTColor                  `xml:"contourClr"`
	ExtLst           *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTFlatText ...
type CTFlatText struct {
	XMLName xml.Name      `xml:"CT_FlatText"`
	ZAttr   *STCoordinate `xml:"z,attr,omitempty"`
}

// EGText3D ...
type EGText3D struct {
	XMLName xml.Name `xml:"EG_Text3D"`
	Sp3d    *CTShape3D
	FlatTx  *CTFlatText
}

// CTAlphaBiLevelEffect ...
type CTAlphaBiLevelEffect struct {
	XMLName    xml.Name                   `xml:"CT_AlphaBiLevelEffect"`
	ThreshAttr *STPositiveFixedPercentage `xml:"thresh,attr"`
}

// CTAlphaCeilingEffect ...
type CTAlphaCeilingEffect struct {
	XMLName xml.Name `xml:"CT_AlphaCeilingEffect"`
}

// CTAlphaFloorEffect ...
type CTAlphaFloorEffect struct {
	XMLName xml.Name `xml:"CT_AlphaFloorEffect"`
}

// CTAlphaInverseEffect ...
type CTAlphaInverseEffect struct {
	XMLName       xml.Name `xml:"CT_AlphaInverseEffect"`
	EGColorChoice []*EGColorChoice
}

// CTAlphaModulateFixedEffect ...
type CTAlphaModulateFixedEffect struct {
	XMLName xml.Name              `xml:"CT_AlphaModulateFixedEffect"`
	AmtAttr *STPositivePercentage `xml:"amt,attr,omitempty"`
}

// CTAlphaOutsetEffect ...
type CTAlphaOutsetEffect struct {
	XMLName xml.Name      `xml:"CT_AlphaOutsetEffect"`
	RadAttr *STCoordinate `xml:"rad,attr,omitempty"`
}

// CTAlphaReplaceEffect ...
type CTAlphaReplaceEffect struct {
	XMLName xml.Name                   `xml:"CT_AlphaReplaceEffect"`
	AAttr   *STPositiveFixedPercentage `xml:"a,attr"`
}

// CTBiLevelEffect ...
type CTBiLevelEffect struct {
	XMLName    xml.Name                   `xml:"CT_BiLevelEffect"`
	ThreshAttr *STPositiveFixedPercentage `xml:"thresh,attr"`
}

// CTBlurEffect ...
type CTBlurEffect struct {
	XMLName  xml.Name `xml:"CT_BlurEffect"`
	RadAttr  int64    `xml:"rad,attr,omitempty"`
	GrowAttr bool     `xml:"grow,attr,omitempty"`
}

// CTColorChangeEffect ...
type CTColorChangeEffect struct {
	XMLName  xml.Name `xml:"CT_ColorChangeEffect"`
	UseAAttr bool     `xml:"useA,attr,omitempty"`
	ClrFrom  *CTColor `xml:"clrFrom"`
	ClrTo    *CTColor `xml:"clrTo"`
}

// CTColorReplaceEffect ...
type CTColorReplaceEffect struct {
	XMLName       xml.Name `xml:"CT_ColorReplaceEffect"`
	EGColorChoice []*EGColorChoice
}

// CTDuotoneEffect ...
type CTDuotoneEffect struct {
	XMLName       xml.Name `xml:"CT_DuotoneEffect"`
	EGColorChoice []*EGColorChoice
}

// CTGlowEffect ...
type CTGlowEffect struct {
	XMLName       xml.Name `xml:"CT_GlowEffect"`
	RadAttr       int64    `xml:"rad,attr,omitempty"`
	EGColorChoice []*EGColorChoice
}

// CTGrayscaleEffect ...
type CTGrayscaleEffect struct {
	XMLName xml.Name `xml:"CT_GrayscaleEffect"`
}

// CTHSLEffect ...
type CTHSLEffect struct {
	XMLName xml.Name           `xml:"CT_HSLEffect"`
	HueAttr int                `xml:"hue,attr,omitempty"`
	SatAttr *STFixedPercentage `xml:"sat,attr,omitempty"`
	LumAttr *STFixedPercentage `xml:"lum,attr,omitempty"`
}

// CTInnerShadowEffect ...
type CTInnerShadowEffect struct {
	XMLName       xml.Name `xml:"CT_InnerShadowEffect"`
	BlurRadAttr   int64    `xml:"blurRad,attr,omitempty"`
	DistAttr      int64    `xml:"dist,attr,omitempty"`
	DirAttr       int      `xml:"dir,attr,omitempty"`
	EGColorChoice []*EGColorChoice
}

// CTLuminanceEffect ...
type CTLuminanceEffect struct {
	XMLName      xml.Name           `xml:"CT_LuminanceEffect"`
	BrightAttr   *STFixedPercentage `xml:"bright,attr,omitempty"`
	ContrastAttr *STFixedPercentage `xml:"contrast,attr,omitempty"`
}

// CTOuterShadowEffect ...
type CTOuterShadowEffect struct {
	XMLName          xml.Name      `xml:"CT_OuterShadowEffect"`
	BlurRadAttr      int64         `xml:"blurRad,attr,omitempty"`
	DistAttr         int64         `xml:"dist,attr,omitempty"`
	DirAttr          int           `xml:"dir,attr,omitempty"`
	SxAttr           *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr           *STPercentage `xml:"sy,attr,omitempty"`
	KxAttr           int           `xml:"kx,attr,omitempty"`
	KyAttr           int           `xml:"ky,attr,omitempty"`
	AlgnAttr         string        `xml:"algn,attr,omitempty"`
	RotWithShapeAttr bool          `xml:"rotWithShape,attr,omitempty"`
	EGColorChoice    []*EGColorChoice
}

// STPresetShadowVal ...
type STPresetShadowVal string

const (
	STPresetShadowVal_shdw1  STPresetShadowVal = "shdw1"
	STPresetShadowVal_shdw2  STPresetShadowVal = "shdw2"
	STPresetShadowVal_shdw3  STPresetShadowVal = "shdw3"
	STPresetShadowVal_shdw4  STPresetShadowVal = "shdw4"
	STPresetShadowVal_shdw5  STPresetShadowVal = "shdw5"
	STPresetShadowVal_shdw6  STPresetShadowVal = "shdw6"
	STPresetShadowVal_shdw7  STPresetShadowVal = "shdw7"
	STPresetShadowVal_shdw8  STPresetShadowVal = "shdw8"
	STPresetShadowVal_shdw9  STPresetShadowVal = "shdw9"
	STPresetShadowVal_shdw10 STPresetShadowVal = "shdw10"
	STPresetShadowVal_shdw11 STPresetShadowVal = "shdw11"
	STPresetShadowVal_shdw12 STPresetShadowVal = "shdw12"
	STPresetShadowVal_shdw13 STPresetShadowVal = "shdw13"
	STPresetShadowVal_shdw14 STPresetShadowVal = "shdw14"
	STPresetShadowVal_shdw15 STPresetShadowVal = "shdw15"
	STPresetShadowVal_shdw16 STPresetShadowVal = "shdw16"
	STPresetShadowVal_shdw17 STPresetShadowVal = "shdw17"
	STPresetShadowVal_shdw18 STPresetShadowVal = "shdw18"
	STPresetShadowVal_shdw19 STPresetShadowVal = "shdw19"
	STPresetShadowVal_shdw20 STPresetShadowVal = "shdw20"
)

// CTPresetShadowEffect ...
type CTPresetShadowEffect struct {
	XMLName       xml.Name `xml:"CT_PresetShadowEffect"`
	PrstAttr      string   `xml:"prst,attr"`
	DistAttr      int64    `xml:"dist,attr,omitempty"`
	DirAttr       int      `xml:"dir,attr,omitempty"`
	EGColorChoice []*EGColorChoice
}

// CTReflectionEffect ...
type CTReflectionEffect struct {
	XMLName          xml.Name                   `xml:"CT_ReflectionEffect"`
	BlurRadAttr      int64                      `xml:"blurRad,attr,omitempty"`
	StAAttr          *STPositiveFixedPercentage `xml:"stA,attr,omitempty"`
	StPosAttr        *STPositiveFixedPercentage `xml:"stPos,attr,omitempty"`
	EndAAttr         *STPositiveFixedPercentage `xml:"endA,attr,omitempty"`
	EndPosAttr       *STPositiveFixedPercentage `xml:"endPos,attr,omitempty"`
	DistAttr         int64                      `xml:"dist,attr,omitempty"`
	DirAttr          int                        `xml:"dir,attr,omitempty"`
	FadeDirAttr      int                        `xml:"fadeDir,attr,omitempty"`
	SxAttr           *STPercentage              `xml:"sx,attr,omitempty"`
	SyAttr           *STPercentage              `xml:"sy,attr,omitempty"`
	KxAttr           int                        `xml:"kx,attr,omitempty"`
	KyAttr           int                        `xml:"ky,attr,omitempty"`
	AlgnAttr         string                     `xml:"algn,attr,omitempty"`
	RotWithShapeAttr bool                       `xml:"rotWithShape,attr,omitempty"`
}

// CTRelativeOffsetEffect ...
type CTRelativeOffsetEffect struct {
	XMLName xml.Name      `xml:"CT_RelativeOffsetEffect"`
	TxAttr  *STPercentage `xml:"tx,attr,omitempty"`
	TyAttr  *STPercentage `xml:"ty,attr,omitempty"`
}

// CTSoftEdgesEffect ...
type CTSoftEdgesEffect struct {
	XMLName xml.Name `xml:"CT_SoftEdgesEffect"`
	RadAttr int64    `xml:"rad,attr"`
}

// CTTintEffect ...
type CTTintEffect struct {
	XMLName xml.Name           `xml:"CT_TintEffect"`
	HueAttr int                `xml:"hue,attr,omitempty"`
	AmtAttr *STFixedPercentage `xml:"amt,attr,omitempty"`
}

// CTTransformEffect ...
type CTTransformEffect struct {
	XMLName xml.Name      `xml:"CT_TransformEffect"`
	SxAttr  *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr  *STPercentage `xml:"sy,attr,omitempty"`
	KxAttr  int           `xml:"kx,attr,omitempty"`
	KyAttr  int           `xml:"ky,attr,omitempty"`
	TxAttr  *STCoordinate `xml:"tx,attr,omitempty"`
	TyAttr  *STCoordinate `xml:"ty,attr,omitempty"`
}

// CTNoFillProperties ...
type CTNoFillProperties struct {
	XMLName xml.Name `xml:"CT_NoFillProperties"`
}

// CTSolidColorFillProperties ...
type CTSolidColorFillProperties struct {
	XMLName       xml.Name `xml:"CT_SolidColorFillProperties"`
	EGColorChoice []*EGColorChoice
}

// CTLinearShadeProperties ...
type CTLinearShadeProperties struct {
	XMLName    xml.Name `xml:"CT_LinearShadeProperties"`
	AngAttr    int      `xml:"ang,attr,omitempty"`
	ScaledAttr bool     `xml:"scaled,attr,omitempty"`
}

// STPathShadeType ...
type STPathShadeType string

const (
	STPathShadeType_shape  STPathShadeType = "shape"
	STPathShadeType_circle STPathShadeType = "circle"
	STPathShadeType_rect   STPathShadeType = "rect"
)

// CTPathShadeProperties ...
type CTPathShadeProperties struct {
	XMLName    xml.Name        `xml:"CT_PathShadeProperties"`
	PathAttr   string          `xml:"path,attr,omitempty"`
	FillToRect *CTRelativeRect `xml:"fillToRect"`
}

// EGShadeProperties ...
type EGShadeProperties struct {
	XMLName xml.Name `xml:"EG_ShadeProperties"`
	Lin     *CTLinearShadeProperties
	Path    *CTPathShadeProperties
}

// STTileFlipMode ...
type STTileFlipMode string

const (
	STTileFlipMode_none STTileFlipMode = "none"
	STTileFlipMode_x    STTileFlipMode = "x"
	STTileFlipMode_y    STTileFlipMode = "y"
	STTileFlipMode_xy   STTileFlipMode = "xy"
)

// CTGradientStop ...
type CTGradientStop struct {
	XMLName       xml.Name                   `xml:"CT_GradientStop"`
	PosAttr       *STPositiveFixedPercentage `xml:"pos,attr"`
	EGColorChoice []*EGColorChoice
}

// CTGradientStopList ...
type CTGradientStopList struct {
	XMLName xml.Name          `xml:"CT_GradientStopList"`
	Gs      []*CTGradientStop `xml:"gs"`
}

// CTGradientFillProperties ...
type CTGradientFillProperties struct {
	XMLName           xml.Name `xml:"CT_GradientFillProperties"`
	FlipAttr          string   `xml:"flip,attr,omitempty"`
	RotWithShapeAttr  bool     `xml:"rotWithShape,attr,omitempty"`
	EGShadeProperties []*EGShadeProperties
	GsLst             *CTGradientStopList `xml:"gsLst"`
	TileRect          *CTRelativeRect     `xml:"tileRect"`
}

// CTTileInfoProperties ...
type CTTileInfoProperties struct {
	XMLName  xml.Name      `xml:"CT_TileInfoProperties"`
	TxAttr   *STCoordinate `xml:"tx,attr,omitempty"`
	TyAttr   *STCoordinate `xml:"ty,attr,omitempty"`
	SxAttr   *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr   *STPercentage `xml:"sy,attr,omitempty"`
	FlipAttr string        `xml:"flip,attr,omitempty"`
	AlgnAttr string        `xml:"algn,attr,omitempty"`
}

// CTStretchInfoProperties ...
type CTStretchInfoProperties struct {
	XMLName  xml.Name        `xml:"CT_StretchInfoProperties"`
	FillRect *CTRelativeRect `xml:"fillRect"`
}

// EGFillModeProperties ...
type EGFillModeProperties struct {
	XMLName xml.Name `xml:"EG_FillModeProperties"`
	Tile    *CTTileInfoProperties
	Stretch *CTStretchInfoProperties
}

// STBlipCompression ...
type STBlipCompression string

const (
	STBlipCompression_email   STBlipCompression = "email"
	STBlipCompression_screen  STBlipCompression = "screen"
	STBlipCompression_print   STBlipCompression = "print"
	STBlipCompression_hqprint STBlipCompression = "hqprint"
	STBlipCompression_none    STBlipCompression = "none"
)

// CTBlip ...
type CTBlip struct {
	XMLName      xml.Name `xml:"CT_Blip"`
	AGBlob       *AGBlob
	CstateAttr   string                      `xml:"cstate,attr,omitempty"`
	AlphaBiLevel *CTAlphaBiLevelEffect       `xml:"alphaBiLevel"`
	AlphaCeiling *CTAlphaCeilingEffect       `xml:"alphaCeiling"`
	AlphaFloor   *CTAlphaFloorEffect         `xml:"alphaFloor"`
	AlphaInv     *CTAlphaInverseEffect       `xml:"alphaInv"`
	AlphaMod     *CTAlphaModulateEffect      `xml:"alphaMod"`
	AlphaModFix  *CTAlphaModulateFixedEffect `xml:"alphaModFix"`
	AlphaRepl    *CTAlphaReplaceEffect       `xml:"alphaRepl"`
	BiLevel      *CTBiLevelEffect            `xml:"biLevel"`
	Blur         *CTBlurEffect               `xml:"blur"`
	ClrChange    *CTColorChangeEffect        `xml:"clrChange"`
	ClrRepl      *CTColorReplaceEffect       `xml:"clrRepl"`
	Duotone      *CTDuotoneEffect            `xml:"duotone"`
	FillOverlay  *CTFillOverlayEffect        `xml:"fillOverlay"`
	Grayscl      *CTGrayscaleEffect          `xml:"grayscl"`
	Hsl          *CTHSLEffect                `xml:"hsl"`
	Lum          *CTLuminanceEffect          `xml:"lum"`
	Tint         *CTTintEffect               `xml:"tint"`
	ExtLst       *CTOfficeArtExtensionList   `xml:"extLst"`
}

// CTBlipFillProperties ...
type CTBlipFillProperties struct {
	XMLName              xml.Name `xml:"CT_BlipFillProperties"`
	DpiAttr              uint32   `xml:"dpi,attr,omitempty"`
	RotWithShapeAttr     bool     `xml:"rotWithShape,attr,omitempty"`
	EGFillModeProperties []*EGFillModeProperties
	Blip                 *CTBlip         `xml:"blip"`
	SrcRect              *CTRelativeRect `xml:"srcRect"`
}

// STPresetPatternVal ...
type STPresetPatternVal string

const (
	STPresetPatternVal_pct5       STPresetPatternVal = "pct5"
	STPresetPatternVal_pct10      STPresetPatternVal = "pct10"
	STPresetPatternVal_pct20      STPresetPatternVal = "pct20"
	STPresetPatternVal_pct25      STPresetPatternVal = "pct25"
	STPresetPatternVal_pct30      STPresetPatternVal = "pct30"
	STPresetPatternVal_pct40      STPresetPatternVal = "pct40"
	STPresetPatternVal_pct50      STPresetPatternVal = "pct50"
	STPresetPatternVal_pct60      STPresetPatternVal = "pct60"
	STPresetPatternVal_pct70      STPresetPatternVal = "pct70"
	STPresetPatternVal_pct75      STPresetPatternVal = "pct75"
	STPresetPatternVal_pct80      STPresetPatternVal = "pct80"
	STPresetPatternVal_pct90      STPresetPatternVal = "pct90"
	STPresetPatternVal_horz       STPresetPatternVal = "horz"
	STPresetPatternVal_vert       STPresetPatternVal = "vert"
	STPresetPatternVal_ltHorz     STPresetPatternVal = "ltHorz"
	STPresetPatternVal_ltVert     STPresetPatternVal = "ltVert"
	STPresetPatternVal_dkHorz     STPresetPatternVal = "dkHorz"
	STPresetPatternVal_dkVert     STPresetPatternVal = "dkVert"
	STPresetPatternVal_narHorz    STPresetPatternVal = "narHorz"
	STPresetPatternVal_narVert    STPresetPatternVal = "narVert"
	STPresetPatternVal_dashHorz   STPresetPatternVal = "dashHorz"
	STPresetPatternVal_dashVert   STPresetPatternVal = "dashVert"
	STPresetPatternVal_cross      STPresetPatternVal = "cross"
	STPresetPatternVal_dnDiag     STPresetPatternVal = "dnDiag"
	STPresetPatternVal_upDiag     STPresetPatternVal = "upDiag"
	STPresetPatternVal_ltDnDiag   STPresetPatternVal = "ltDnDiag"
	STPresetPatternVal_ltUpDiag   STPresetPatternVal = "ltUpDiag"
	STPresetPatternVal_dkDnDiag   STPresetPatternVal = "dkDnDiag"
	STPresetPatternVal_dkUpDiag   STPresetPatternVal = "dkUpDiag"
	STPresetPatternVal_wdDnDiag   STPresetPatternVal = "wdDnDiag"
	STPresetPatternVal_wdUpDiag   STPresetPatternVal = "wdUpDiag"
	STPresetPatternVal_dashDnDiag STPresetPatternVal = "dashDnDiag"
	STPresetPatternVal_dashUpDiag STPresetPatternVal = "dashUpDiag"
	STPresetPatternVal_diagCross  STPresetPatternVal = "diagCross"
	STPresetPatternVal_smCheck    STPresetPatternVal = "smCheck"
	STPresetPatternVal_lgCheck    STPresetPatternVal = "lgCheck"
	STPresetPatternVal_smGrid     STPresetPatternVal = "smGrid"
	STPresetPatternVal_lgGrid     STPresetPatternVal = "lgGrid"
	STPresetPatternVal_dotGrid    STPresetPatternVal = "dotGrid"
	STPresetPatternVal_smConfetti STPresetPatternVal = "smConfetti"
	STPresetPatternVal_lgConfetti STPresetPatternVal = "lgConfetti"
	STPresetPatternVal_horzBrick  STPresetPatternVal = "horzBrick"
	STPresetPatternVal_diagBrick  STPresetPatternVal = "diagBrick"
	STPresetPatternVal_solidDmnd  STPresetPatternVal = "solidDmnd"
	STPresetPatternVal_openDmnd   STPresetPatternVal = "openDmnd"
	STPresetPatternVal_dotDmnd    STPresetPatternVal = "dotDmnd"
	STPresetPatternVal_plaid      STPresetPatternVal = "plaid"
	STPresetPatternVal_sphere     STPresetPatternVal = "sphere"
	STPresetPatternVal_weave      STPresetPatternVal = "weave"
	STPresetPatternVal_divot      STPresetPatternVal = "divot"
	STPresetPatternVal_shingle    STPresetPatternVal = "shingle"
	STPresetPatternVal_wave       STPresetPatternVal = "wave"
	STPresetPatternVal_trellis    STPresetPatternVal = "trellis"
	STPresetPatternVal_zigZag     STPresetPatternVal = "zigZag"
)

// CTPatternFillProperties ...
type CTPatternFillProperties struct {
	XMLName  xml.Name `xml:"CT_PatternFillProperties"`
	PrstAttr string   `xml:"prst,attr,omitempty"`
	FgClr    *CTColor `xml:"fgClr"`
	BgClr    *CTColor `xml:"bgClr"`
}

// CTGroupFillProperties ...
type CTGroupFillProperties struct {
	XMLName xml.Name `xml:"CT_GroupFillProperties"`
}

// EGFillProperties ...
type EGFillProperties struct {
	XMLName   xml.Name `xml:"EG_FillProperties"`
	NoFill    *CTNoFillProperties
	SolidFill *CTSolidColorFillProperties
	GradFill  *CTGradientFillProperties
	BlipFill  *CTBlipFillProperties
	PattFill  *CTPatternFillProperties
	GrpFill   *CTGroupFillProperties
}

// CTFillProperties ...
type CTFillProperties struct {
	XMLName          xml.Name `xml:"CT_FillProperties"`
	EGFillProperties []*EGFillProperties
}

// CTFillEffect ...
type CTFillEffect struct {
	XMLName          xml.Name `xml:"CT_FillEffect"`
	EGFillProperties []*EGFillProperties
}

// STBlendMode ...
type STBlendMode string

const (
	STBlendMode_over    STBlendMode = "over"
	STBlendMode_mult    STBlendMode = "mult"
	STBlendMode_screen  STBlendMode = "screen"
	STBlendMode_darken  STBlendMode = "darken"
	STBlendMode_lighten STBlendMode = "lighten"
)

// CTFillOverlayEffect ...
type CTFillOverlayEffect struct {
	XMLName          xml.Name `xml:"CT_FillOverlayEffect"`
	BlendAttr        string   `xml:"blend,attr"`
	EGFillProperties []*EGFillProperties
}

// CTEffectReference ...
type CTEffectReference struct {
	XMLName xml.Name `xml:"CT_EffectReference"`
	RefAttr string   `xml:"ref,attr"`
}

// EGEffect ...
type EGEffect struct {
	XMLName      xml.Name `xml:"EG_Effect"`
	Cont         *CTEffectContainer
	Effect       *CTEffectReference
	AlphaBiLevel *CTAlphaBiLevelEffect
	AlphaCeiling *CTAlphaCeilingEffect
	AlphaFloor   *CTAlphaFloorEffect
	AlphaInv     *CTAlphaInverseEffect
	AlphaMod     *CTAlphaModulateEffect
	AlphaModFix  *CTAlphaModulateFixedEffect
	AlphaOutset  *CTAlphaOutsetEffect
	AlphaRepl    *CTAlphaReplaceEffect
	BiLevel      *CTBiLevelEffect
	Blend        *CTBlendEffect
	Blur         *CTBlurEffect
	ClrChange    *CTColorChangeEffect
	ClrRepl      *CTColorReplaceEffect
	Duotone      *CTDuotoneEffect
	Fill         *CTFillEffect
	FillOverlay  *CTFillOverlayEffect
	Glow         *CTGlowEffect
	Grayscl      *CTGrayscaleEffect
	Hsl          *CTHSLEffect
	InnerShdw    *CTInnerShadowEffect
	Lum          *CTLuminanceEffect
	OuterShdw    *CTOuterShadowEffect
	PrstShdw     *CTPresetShadowEffect
	Reflection   *CTReflectionEffect
	RelOff       *CTRelativeOffsetEffect
	SoftEdge     *CTSoftEdgesEffect
	Tint         *CTTintEffect
	Xfrm         *CTTransformEffect
}

// STEffectContainerType ...
type STEffectContainerType string

const (
	STEffectContainerType_sib  STEffectContainerType = "sib"
	STEffectContainerType_tree STEffectContainerType = "tree"
)

// CTEffectContainer ...
type CTEffectContainer struct {
	XMLName  xml.Name `xml:"CT_EffectContainer"`
	TypeAttr string   `xml:"type,attr,omitempty"`
	NameAttr string   `xml:"name,attr,omitempty"`
	EGEffect []*EGEffect
}

// CTAlphaModulateEffect ...
type CTAlphaModulateEffect struct {
	XMLName xml.Name           `xml:"CT_AlphaModulateEffect"`
	Cont    *CTEffectContainer `xml:"cont"`
}

// CTBlendEffect ...
type CTBlendEffect struct {
	XMLName   xml.Name           `xml:"CT_BlendEffect"`
	BlendAttr string             `xml:"blend,attr"`
	Cont      *CTEffectContainer `xml:"cont"`
}

// CTEffectList ...
type CTEffectList struct {
	XMLName     xml.Name              `xml:"CT_EffectList"`
	Blur        *CTBlurEffect         `xml:"blur"`
	FillOverlay *CTFillOverlayEffect  `xml:"fillOverlay"`
	Glow        *CTGlowEffect         `xml:"glow"`
	InnerShdw   *CTInnerShadowEffect  `xml:"innerShdw"`
	OuterShdw   *CTOuterShadowEffect  `xml:"outerShdw"`
	PrstShdw    *CTPresetShadowEffect `xml:"prstShdw"`
	Reflection  *CTReflectionEffect   `xml:"reflection"`
	SoftEdge    *CTSoftEdgesEffect    `xml:"softEdge"`
}

// EGEffectProperties ...
type EGEffectProperties struct {
	XMLName   xml.Name `xml:"EG_EffectProperties"`
	EffectLst *CTEffectList
	EffectDag *CTEffectContainer
}

// CTEffectProperties ...
type CTEffectProperties struct {
	XMLName            xml.Name `xml:"CT_EffectProperties"`
	EGEffectProperties []*EGEffectProperties
}

// Blip ...
type Blip *CTBlip

// STShapeType ...
type STShapeType string

const (
	STShapeType_line                       STShapeType = "line"
	STShapeType_lineInv                    STShapeType = "lineInv"
	STShapeType_triangle                   STShapeType = "triangle"
	STShapeType_rtTriangle                 STShapeType = "rtTriangle"
	STShapeType_rect                       STShapeType = "rect"
	STShapeType_diamond                    STShapeType = "diamond"
	STShapeType_parallelogram              STShapeType = "parallelogram"
	STShapeType_trapezoid                  STShapeType = "trapezoid"
	STShapeType_nonIsoscelesTrapezoid      STShapeType = "nonIsoscelesTrapezoid"
	STShapeType_pentagon                   STShapeType = "pentagon"
	STShapeType_hexagon                    STShapeType = "hexagon"
	STShapeType_heptagon                   STShapeType = "heptagon"
	STShapeType_octagon                    STShapeType = "octagon"
	STShapeType_decagon                    STShapeType = "decagon"
	STShapeType_dodecagon                  STShapeType = "dodecagon"
	STShapeType_star4                      STShapeType = "star4"
	STShapeType_star5                      STShapeType = "star5"
	STShapeType_star6                      STShapeType = "star6"
	STShapeType_star7                      STShapeType = "star7"
	STShapeType_star8                      STShapeType = "star8"
	STShapeType_star10                     STShapeType = "star10"
	STShapeType_star12                     STShapeType = "star12"
	STShapeType_star16                     STShapeType = "star16"
	STShapeType_star24                     STShapeType = "star24"
	STShapeType_star32                     STShapeType = "star32"
	STShapeType_roundRect                  STShapeType = "roundRect"
	STShapeType_round1Rect                 STShapeType = "round1Rect"
	STShapeType_round2SameRect             STShapeType = "round2SameRect"
	STShapeType_round2DiagRect             STShapeType = "round2DiagRect"
	STShapeType_snipRoundRect              STShapeType = "snipRoundRect"
	STShapeType_snip1Rect                  STShapeType = "snip1Rect"
	STShapeType_snip2SameRect              STShapeType = "snip2SameRect"
	STShapeType_snip2DiagRect              STShapeType = "snip2DiagRect"
	STShapeType_plaque                     STShapeType = "plaque"
	STShapeType_ellipse                    STShapeType = "ellipse"
	STShapeType_teardrop                   STShapeType = "teardrop"
	STShapeType_homePlate                  STShapeType = "homePlate"
	STShapeType_chevron                    STShapeType = "chevron"
	STShapeType_pieWedge                   STShapeType = "pieWedge"
	STShapeType_pie                        STShapeType = "pie"
	STShapeType_blockArc                   STShapeType = "blockArc"
	STShapeType_donut                      STShapeType = "donut"
	STShapeType_noSmoking                  STShapeType = "noSmoking"
	STShapeType_rightArrow                 STShapeType = "rightArrow"
	STShapeType_leftArrow                  STShapeType = "leftArrow"
	STShapeType_upArrow                    STShapeType = "upArrow"
	STShapeType_downArrow                  STShapeType = "downArrow"
	STShapeType_stripedRightArrow          STShapeType = "stripedRightArrow"
	STShapeType_notchedRightArrow          STShapeType = "notchedRightArrow"
	STShapeType_bentUpArrow                STShapeType = "bentUpArrow"
	STShapeType_leftRightArrow             STShapeType = "leftRightArrow"
	STShapeType_upDownArrow                STShapeType = "upDownArrow"
	STShapeType_leftUpArrow                STShapeType = "leftUpArrow"
	STShapeType_leftRightUpArrow           STShapeType = "leftRightUpArrow"
	STShapeType_quadArrow                  STShapeType = "quadArrow"
	STShapeType_leftArrowCallout           STShapeType = "leftArrowCallout"
	STShapeType_rightArrowCallout          STShapeType = "rightArrowCallout"
	STShapeType_upArrowCallout             STShapeType = "upArrowCallout"
	STShapeType_downArrowCallout           STShapeType = "downArrowCallout"
	STShapeType_leftRightArrowCallout      STShapeType = "leftRightArrowCallout"
	STShapeType_upDownArrowCallout         STShapeType = "upDownArrowCallout"
	STShapeType_quadArrowCallout           STShapeType = "quadArrowCallout"
	STShapeType_bentArrow                  STShapeType = "bentArrow"
	STShapeType_uturnArrow                 STShapeType = "uturnArrow"
	STShapeType_circularArrow              STShapeType = "circularArrow"
	STShapeType_leftCircularArrow          STShapeType = "leftCircularArrow"
	STShapeType_leftRightCircularArrow     STShapeType = "leftRightCircularArrow"
	STShapeType_curvedRightArrow           STShapeType = "curvedRightArrow"
	STShapeType_curvedLeftArrow            STShapeType = "curvedLeftArrow"
	STShapeType_curvedUpArrow              STShapeType = "curvedUpArrow"
	STShapeType_curvedDownArrow            STShapeType = "curvedDownArrow"
	STShapeType_swooshArrow                STShapeType = "swooshArrow"
	STShapeType_cube                       STShapeType = "cube"
	STShapeType_can                        STShapeType = "can"
	STShapeType_lightningBolt              STShapeType = "lightningBolt"
	STShapeType_heart                      STShapeType = "heart"
	STShapeType_sun                        STShapeType = "sun"
	STShapeType_moon                       STShapeType = "moon"
	STShapeType_smileyFace                 STShapeType = "smileyFace"
	STShapeType_irregularSeal1             STShapeType = "irregularSeal1"
	STShapeType_irregularSeal2             STShapeType = "irregularSeal2"
	STShapeType_foldedCorner               STShapeType = "foldedCorner"
	STShapeType_bevel                      STShapeType = "bevel"
	STShapeType_frame                      STShapeType = "frame"
	STShapeType_halfFrame                  STShapeType = "halfFrame"
	STShapeType_corner                     STShapeType = "corner"
	STShapeType_diagStripe                 STShapeType = "diagStripe"
	STShapeType_chord                      STShapeType = "chord"
	STShapeType_arc                        STShapeType = "arc"
	STShapeType_leftBracket                STShapeType = "leftBracket"
	STShapeType_rightBracket               STShapeType = "rightBracket"
	STShapeType_leftBrace                  STShapeType = "leftBrace"
	STShapeType_rightBrace                 STShapeType = "rightBrace"
	STShapeType_bracketPair                STShapeType = "bracketPair"
	STShapeType_bracePair                  STShapeType = "bracePair"
	STShapeType_straightConnector1         STShapeType = "straightConnector1"
	STShapeType_bentConnector2             STShapeType = "bentConnector2"
	STShapeType_bentConnector3             STShapeType = "bentConnector3"
	STShapeType_bentConnector4             STShapeType = "bentConnector4"
	STShapeType_bentConnector5             STShapeType = "bentConnector5"
	STShapeType_curvedConnector2           STShapeType = "curvedConnector2"
	STShapeType_curvedConnector3           STShapeType = "curvedConnector3"
	STShapeType_curvedConnector4           STShapeType = "curvedConnector4"
	STShapeType_curvedConnector5           STShapeType = "curvedConnector5"
	STShapeType_callout1                   STShapeType = "callout1"
	STShapeType_callout2                   STShapeType = "callout2"
	STShapeType_callout3                   STShapeType = "callout3"
	STShapeType_accentCallout1             STShapeType = "accentCallout1"
	STShapeType_accentCallout2             STShapeType = "accentCallout2"
	STShapeType_accentCallout3             STShapeType = "accentCallout3"
	STShapeType_borderCallout1             STShapeType = "borderCallout1"
	STShapeType_borderCallout2             STShapeType = "borderCallout2"
	STShapeType_borderCallout3             STShapeType = "borderCallout3"
	STShapeType_accentBorderCallout1       STShapeType = "accentBorderCallout1"
	STShapeType_accentBorderCallout2       STShapeType = "accentBorderCallout2"
	STShapeType_accentBorderCallout3       STShapeType = "accentBorderCallout3"
	STShapeType_wedgeRectCallout           STShapeType = "wedgeRectCallout"
	STShapeType_wedgeRoundRectCallout      STShapeType = "wedgeRoundRectCallout"
	STShapeType_wedgeEllipseCallout        STShapeType = "wedgeEllipseCallout"
	STShapeType_cloudCallout               STShapeType = "cloudCallout"
	STShapeType_cloud                      STShapeType = "cloud"
	STShapeType_ribbon                     STShapeType = "ribbon"
	STShapeType_ribbon2                    STShapeType = "ribbon2"
	STShapeType_ellipseRibbon              STShapeType = "ellipseRibbon"
	STShapeType_ellipseRibbon2             STShapeType = "ellipseRibbon2"
	STShapeType_leftRightRibbon            STShapeType = "leftRightRibbon"
	STShapeType_verticalScroll             STShapeType = "verticalScroll"
	STShapeType_horizontalScroll           STShapeType = "horizontalScroll"
	STShapeType_wave                       STShapeType = "wave"
	STShapeType_doubleWave                 STShapeType = "doubleWave"
	STShapeType_plus                       STShapeType = "plus"
	STShapeType_flowChartProcess           STShapeType = "flowChartProcess"
	STShapeType_flowChartDecision          STShapeType = "flowChartDecision"
	STShapeType_flowChartInputOutput       STShapeType = "flowChartInputOutput"
	STShapeType_flowChartPredefinedProcess STShapeType = "flowChartPredefinedProcess"
	STShapeType_flowChartInternalStorage   STShapeType = "flowChartInternalStorage"
	STShapeType_flowChartDocument          STShapeType = "flowChartDocument"
	STShapeType_flowChartMultidocument     STShapeType = "flowChartMultidocument"
	STShapeType_flowChartTerminator        STShapeType = "flowChartTerminator"
	STShapeType_flowChartPreparation       STShapeType = "flowChartPreparation"
	STShapeType_flowChartManualInput       STShapeType = "flowChartManualInput"
	STShapeType_flowChartManualOperation   STShapeType = "flowChartManualOperation"
	STShapeType_flowChartConnector         STShapeType = "flowChartConnector"
	STShapeType_flowChartPunchedCard       STShapeType = "flowChartPunchedCard"
	STShapeType_flowChartPunchedTape       STShapeType = "flowChartPunchedTape"
	STShapeType_flowChartSummingJunction   STShapeType = "flowChartSummingJunction"
	STShapeType_flowChartOr                STShapeType = "flowChartOr"
	STShapeType_flowChartCollate           STShapeType = "flowChartCollate"
	STShapeType_flowChartSort              STShapeType = "flowChartSort"
	STShapeType_flowChartExtract           STShapeType = "flowChartExtract"
	STShapeType_flowChartMerge             STShapeType = "flowChartMerge"
	STShapeType_flowChartOfflineStorage    STShapeType = "flowChartOfflineStorage"
	STShapeType_flowChartOnlineStorage     STShapeType = "flowChartOnlineStorage"
	STShapeType_flowChartMagneticTape      STShapeType = "flowChartMagneticTape"
	STShapeType_flowChartMagneticDisk      STShapeType = "flowChartMagneticDisk"
	STShapeType_flowChartMagneticDrum      STShapeType = "flowChartMagneticDrum"
	STShapeType_flowChartDisplay           STShapeType = "flowChartDisplay"
	STShapeType_flowChartDelay             STShapeType = "flowChartDelay"
	STShapeType_flowChartAlternateProcess  STShapeType = "flowChartAlternateProcess"
	STShapeType_flowChartOffpageConnector  STShapeType = "flowChartOffpageConnector"
	STShapeType_actionButtonBlank          STShapeType = "actionButtonBlank"
	STShapeType_actionButtonHome           STShapeType = "actionButtonHome"
	STShapeType_actionButtonHelp           STShapeType = "actionButtonHelp"
	STShapeType_actionButtonInformation    STShapeType = "actionButtonInformation"
	STShapeType_actionButtonForwardNext    STShapeType = "actionButtonForwardNext"
	STShapeType_actionButtonBackPrevious   STShapeType = "actionButtonBackPrevious"
	STShapeType_actionButtonEnd            STShapeType = "actionButtonEnd"
	STShapeType_actionButtonBeginning      STShapeType = "actionButtonBeginning"
	STShapeType_actionButtonReturn         STShapeType = "actionButtonReturn"
	STShapeType_actionButtonDocument       STShapeType = "actionButtonDocument"
	STShapeType_actionButtonSound          STShapeType = "actionButtonSound"
	STShapeType_actionButtonMovie          STShapeType = "actionButtonMovie"
	STShapeType_gear6                      STShapeType = "gear6"
	STShapeType_gear9                      STShapeType = "gear9"
	STShapeType_funnel                     STShapeType = "funnel"
	STShapeType_mathPlus                   STShapeType = "mathPlus"
	STShapeType_mathMinus                  STShapeType = "mathMinus"
	STShapeType_mathMultiply               STShapeType = "mathMultiply"
	STShapeType_mathDivide                 STShapeType = "mathDivide"
	STShapeType_mathEqual                  STShapeType = "mathEqual"
	STShapeType_mathNotEqual               STShapeType = "mathNotEqual"
	STShapeType_cornerTabs                 STShapeType = "cornerTabs"
	STShapeType_squareTabs                 STShapeType = "squareTabs"
	STShapeType_plaqueTabs                 STShapeType = "plaqueTabs"
	STShapeType_chartX                     STShapeType = "chartX"
	STShapeType_chartStar                  STShapeType = "chartStar"
	STShapeType_chartPlus                  STShapeType = "chartPlus"
)

// STTextShapeType ...
type STTextShapeType string

const (
	STTextShapeType_textNoShape               STTextShapeType = "textNoShape"
	STTextShapeType_textPlain                 STTextShapeType = "textPlain"
	STTextShapeType_textStop                  STTextShapeType = "textStop"
	STTextShapeType_textTriangle              STTextShapeType = "textTriangle"
	STTextShapeType_textTriangleInverted      STTextShapeType = "textTriangleInverted"
	STTextShapeType_textChevron               STTextShapeType = "textChevron"
	STTextShapeType_textChevronInverted       STTextShapeType = "textChevronInverted"
	STTextShapeType_textRingInside            STTextShapeType = "textRingInside"
	STTextShapeType_textRingOutside           STTextShapeType = "textRingOutside"
	STTextShapeType_textArchUp                STTextShapeType = "textArchUp"
	STTextShapeType_textArchDown              STTextShapeType = "textArchDown"
	STTextShapeType_textCircle                STTextShapeType = "textCircle"
	STTextShapeType_textButton                STTextShapeType = "textButton"
	STTextShapeType_textArchUpPour            STTextShapeType = "textArchUpPour"
	STTextShapeType_textArchDownPour          STTextShapeType = "textArchDownPour"
	STTextShapeType_textCirclePour            STTextShapeType = "textCirclePour"
	STTextShapeType_textButtonPour            STTextShapeType = "textButtonPour"
	STTextShapeType_textCurveUp               STTextShapeType = "textCurveUp"
	STTextShapeType_textCurveDown             STTextShapeType = "textCurveDown"
	STTextShapeType_textCanUp                 STTextShapeType = "textCanUp"
	STTextShapeType_textCanDown               STTextShapeType = "textCanDown"
	STTextShapeType_textWave1                 STTextShapeType = "textWave1"
	STTextShapeType_textWave2                 STTextShapeType = "textWave2"
	STTextShapeType_textDoubleWave1           STTextShapeType = "textDoubleWave1"
	STTextShapeType_textWave4                 STTextShapeType = "textWave4"
	STTextShapeType_textInflate               STTextShapeType = "textInflate"
	STTextShapeType_textDeflate               STTextShapeType = "textDeflate"
	STTextShapeType_textInflateBottom         STTextShapeType = "textInflateBottom"
	STTextShapeType_textDeflateBottom         STTextShapeType = "textDeflateBottom"
	STTextShapeType_textInflateTop            STTextShapeType = "textInflateTop"
	STTextShapeType_textDeflateTop            STTextShapeType = "textDeflateTop"
	STTextShapeType_textDeflateInflate        STTextShapeType = "textDeflateInflate"
	STTextShapeType_textDeflateInflateDeflate STTextShapeType = "textDeflateInflateDeflate"
	STTextShapeType_textFadeRight             STTextShapeType = "textFadeRight"
	STTextShapeType_textFadeLeft              STTextShapeType = "textFadeLeft"
	STTextShapeType_textFadeUp                STTextShapeType = "textFadeUp"
	STTextShapeType_textFadeDown              STTextShapeType = "textFadeDown"
	STTextShapeType_textSlantUp               STTextShapeType = "textSlantUp"
	STTextShapeType_textSlantDown             STTextShapeType = "textSlantDown"
	STTextShapeType_textCascadeUp             STTextShapeType = "textCascadeUp"
	STTextShapeType_textCascadeDown           STTextShapeType = "textCascadeDown"
)

// STGeomGuideName ...
type STGeomGuideName string

// STGeomGuideFormula ...
type STGeomGuideFormula string

// CTGeomGuide ...
type CTGeomGuide struct {
	XMLName  xml.Name `xml:"CT_GeomGuide"`
	NameAttr string   `xml:"name,attr"`
	FmlaAttr string   `xml:"fmla,attr"`
}

// CTGeomGuideList ...
type CTGeomGuideList struct {
	XMLName xml.Name       `xml:"CT_GeomGuideList"`
	Gd      []*CTGeomGuide `xml:"gd"`
}

// STAdjCoordinate ...
type STAdjCoordinate struct {
	XMLName         xml.Name `xml:"ST_AdjCoordinate"`
	STCoordinate    *STCoordinate
	STGeomGuideName string
}

// STAdjAngle ...
type STAdjAngle struct {
	XMLName         xml.Name `xml:"ST_AdjAngle"`
	STAngle         int
	STGeomGuideName string
}

// CTAdjPoint2D ...
type CTAdjPoint2D struct {
	XMLName xml.Name         `xml:"CT_AdjPoint2D"`
	XAttr   *STAdjCoordinate `xml:"x,attr"`
	YAttr   *STAdjCoordinate `xml:"y,attr"`
}

// CTGeomRect ...
type CTGeomRect struct {
	XMLName xml.Name         `xml:"CT_GeomRect"`
	LAttr   *STAdjCoordinate `xml:"l,attr"`
	TAttr   *STAdjCoordinate `xml:"t,attr"`
	RAttr   *STAdjCoordinate `xml:"r,attr"`
	BAttr   *STAdjCoordinate `xml:"b,attr"`
}

// CTXYAdjustHandle ...
type CTXYAdjustHandle struct {
	XMLName    xml.Name         `xml:"CT_XYAdjustHandle"`
	GdRefXAttr string           `xml:"gdRefX,attr,omitempty"`
	MinXAttr   *STAdjCoordinate `xml:"minX,attr,omitempty"`
	MaxXAttr   *STAdjCoordinate `xml:"maxX,attr,omitempty"`
	GdRefYAttr string           `xml:"gdRefY,attr,omitempty"`
	MinYAttr   *STAdjCoordinate `xml:"minY,attr,omitempty"`
	MaxYAttr   *STAdjCoordinate `xml:"maxY,attr,omitempty"`
	Pos        *CTAdjPoint2D    `xml:"pos"`
}

// CTPolarAdjustHandle ...
type CTPolarAdjustHandle struct {
	XMLName      xml.Name         `xml:"CT_PolarAdjustHandle"`
	GdRefRAttr   string           `xml:"gdRefR,attr,omitempty"`
	MinRAttr     *STAdjCoordinate `xml:"minR,attr,omitempty"`
	MaxRAttr     *STAdjCoordinate `xml:"maxR,attr,omitempty"`
	GdRefAngAttr string           `xml:"gdRefAng,attr,omitempty"`
	MinAngAttr   *STAdjAngle      `xml:"minAng,attr,omitempty"`
	MaxAngAttr   *STAdjAngle      `xml:"maxAng,attr,omitempty"`
	Pos          *CTAdjPoint2D    `xml:"pos"`
}

// CTConnectionSite ...
type CTConnectionSite struct {
	XMLName xml.Name      `xml:"CT_ConnectionSite"`
	AngAttr *STAdjAngle   `xml:"ang,attr"`
	Pos     *CTAdjPoint2D `xml:"pos"`
}

// CTAdjustHandleList ...
type CTAdjustHandleList struct {
	XMLName xml.Name             `xml:"CT_AdjustHandleList"`
	AhXY    *CTXYAdjustHandle    `xml:"ahXY"`
	AhPolar *CTPolarAdjustHandle `xml:"ahPolar"`
}

// CTConnectionSiteList ...
type CTConnectionSiteList struct {
	XMLName xml.Name            `xml:"CT_ConnectionSiteList"`
	Cxn     []*CTConnectionSite `xml:"cxn"`
}

// CTConnection ...
type CTConnection struct {
	XMLName xml.Name `xml:"CT_Connection"`
	IdAttr  uint32   `xml:"id,attr"`
	IdxAttr uint32   `xml:"idx,attr"`
}

// CTPath2DMoveTo ...
type CTPath2DMoveTo struct {
	XMLName xml.Name      `xml:"CT_Path2DMoveTo"`
	Pt      *CTAdjPoint2D `xml:"pt"`
}

// CTPath2DLineTo ...
type CTPath2DLineTo struct {
	XMLName xml.Name      `xml:"CT_Path2DLineTo"`
	Pt      *CTAdjPoint2D `xml:"pt"`
}

// CTPath2DArcTo ...
type CTPath2DArcTo struct {
	XMLName   xml.Name         `xml:"CT_Path2DArcTo"`
	WRAttr    *STAdjCoordinate `xml:"wR,attr"`
	HRAttr    *STAdjCoordinate `xml:"hR,attr"`
	StAngAttr *STAdjAngle      `xml:"stAng,attr"`
	SwAngAttr *STAdjAngle      `xml:"swAng,attr"`
}

// CTPath2DQuadBezierTo ...
type CTPath2DQuadBezierTo struct {
	XMLName xml.Name        `xml:"CT_Path2DQuadBezierTo"`
	Pt      []*CTAdjPoint2D `xml:"pt"`
}

// CTPath2DCubicBezierTo ...
type CTPath2DCubicBezierTo struct {
	XMLName xml.Name        `xml:"CT_Path2DCubicBezierTo"`
	Pt      []*CTAdjPoint2D `xml:"pt"`
}

// CTPath2DClose ...
type CTPath2DClose struct {
	XMLName xml.Name `xml:"CT_Path2DClose"`
}

// STPathFillMode ...
type STPathFillMode string

const (
	STPathFillMode_none        STPathFillMode = "none"
	STPathFillMode_norm        STPathFillMode = "norm"
	STPathFillMode_lighten     STPathFillMode = "lighten"
	STPathFillMode_lightenLess STPathFillMode = "lightenLess"
	STPathFillMode_darken      STPathFillMode = "darken"
	STPathFillMode_darkenLess  STPathFillMode = "darkenLess"
)

// CTPath2D ...
type CTPath2D struct {
	XMLName         xml.Name               `xml:"CT_Path2D"`
	WAttr           int64                  `xml:"w,attr,omitempty"`
	HAttr           int64                  `xml:"h,attr,omitempty"`
	FillAttr        string                 `xml:"fill,attr,omitempty"`
	StrokeAttr      bool                   `xml:"stroke,attr,omitempty"`
	ExtrusionOkAttr bool                   `xml:"extrusionOk,attr,omitempty"`
	Close           *CTPath2DClose         `xml:"close"`
	MoveTo          *CTPath2DMoveTo        `xml:"moveTo"`
	LnTo            *CTPath2DLineTo        `xml:"lnTo"`
	ArcTo           *CTPath2DArcTo         `xml:"arcTo"`
	QuadBezTo       *CTPath2DQuadBezierTo  `xml:"quadBezTo"`
	CubicBezTo      *CTPath2DCubicBezierTo `xml:"cubicBezTo"`
}

// CTPath2DList ...
type CTPath2DList struct {
	XMLName xml.Name    `xml:"CT_Path2DList"`
	Path    []*CTPath2D `xml:"path"`
}

// CTPresetGeometry2D ...
type CTPresetGeometry2D struct {
	XMLName  xml.Name         `xml:"CT_PresetGeometry2D"`
	PrstAttr string           `xml:"prst,attr"`
	AvLst    *CTGeomGuideList `xml:"avLst"`
}

// CTPresetTextShape ...
type CTPresetTextShape struct {
	XMLName  xml.Name         `xml:"CT_PresetTextShape"`
	PrstAttr string           `xml:"prst,attr"`
	AvLst    *CTGeomGuideList `xml:"avLst"`
}

// CTCustomGeometry2D ...
type CTCustomGeometry2D struct {
	XMLName xml.Name              `xml:"CT_CustomGeometry2D"`
	AvLst   *CTGeomGuideList      `xml:"avLst"`
	GdLst   *CTGeomGuideList      `xml:"gdLst"`
	AhLst   *CTAdjustHandleList   `xml:"ahLst"`
	CxnLst  *CTConnectionSiteList `xml:"cxnLst"`
	Rect    *CTGeomRect           `xml:"rect"`
	PathLst *CTPath2DList         `xml:"pathLst"`
}

// EGGeometry ...
type EGGeometry struct {
	XMLName  xml.Name `xml:"EG_Geometry"`
	CustGeom *CTCustomGeometry2D
	PrstGeom *CTPresetGeometry2D
}

// EGTextGeometry ...
type EGTextGeometry struct {
	XMLName    xml.Name `xml:"EG_TextGeometry"`
	CustGeom   *CTCustomGeometry2D
	PrstTxWarp *CTPresetTextShape
}

// STLineEndType ...
type STLineEndType string

const (
	STLineEndType_none     STLineEndType = "none"
	STLineEndType_triangle STLineEndType = "triangle"
	STLineEndType_stealth  STLineEndType = "stealth"
	STLineEndType_diamond  STLineEndType = "diamond"
	STLineEndType_oval     STLineEndType = "oval"
	STLineEndType_arrow    STLineEndType = "arrow"
)

// STLineEndWidth ...
type STLineEndWidth string

const (
	STLineEndWidth_sm  STLineEndWidth = "sm"
	STLineEndWidth_med STLineEndWidth = "med"
	STLineEndWidth_lg  STLineEndWidth = "lg"
)

// STLineEndLength ...
type STLineEndLength string

const (
	STLineEndLength_sm  STLineEndLength = "sm"
	STLineEndLength_med STLineEndLength = "med"
	STLineEndLength_lg  STLineEndLength = "lg"
)

// CTLineEndProperties ...
type CTLineEndProperties struct {
	XMLName  xml.Name `xml:"CT_LineEndProperties"`
	TypeAttr string   `xml:"type,attr,omitempty"`
	WAttr    string   `xml:"w,attr,omitempty"`
	LenAttr  string   `xml:"len,attr,omitempty"`
}

// EGLineFillProperties ...
type EGLineFillProperties struct {
	XMLName   xml.Name `xml:"EG_LineFillProperties"`
	NoFill    *CTNoFillProperties
	SolidFill *CTSolidColorFillProperties
	GradFill  *CTGradientFillProperties
	PattFill  *CTPatternFillProperties
}

// CTLineJoinBevel ...
type CTLineJoinBevel struct {
	XMLName xml.Name `xml:"CT_LineJoinBevel"`
}

// CTLineJoinRound ...
type CTLineJoinRound struct {
	XMLName xml.Name `xml:"CT_LineJoinRound"`
}

// CTLineJoinMiterProperties ...
type CTLineJoinMiterProperties struct {
	XMLName xml.Name              `xml:"CT_LineJoinMiterProperties"`
	LimAttr *STPositivePercentage `xml:"lim,attr,omitempty"`
}

// EGLineJoinProperties ...
type EGLineJoinProperties struct {
	XMLName xml.Name `xml:"EG_LineJoinProperties"`
	Round   *CTLineJoinRound
	Bevel   *CTLineJoinBevel
	Miter   *CTLineJoinMiterProperties
}

// STPresetLineDashVal ...
type STPresetLineDashVal string

const (
	STPresetLineDashVal_solid         STPresetLineDashVal = "solid"
	STPresetLineDashVal_dot           STPresetLineDashVal = "dot"
	STPresetLineDashVal_dash          STPresetLineDashVal = "dash"
	STPresetLineDashVal_lgDash        STPresetLineDashVal = "lgDash"
	STPresetLineDashVal_dashDot       STPresetLineDashVal = "dashDot"
	STPresetLineDashVal_lgDashDot     STPresetLineDashVal = "lgDashDot"
	STPresetLineDashVal_lgDashDotDot  STPresetLineDashVal = "lgDashDotDot"
	STPresetLineDashVal_sysDash       STPresetLineDashVal = "sysDash"
	STPresetLineDashVal_sysDot        STPresetLineDashVal = "sysDot"
	STPresetLineDashVal_sysDashDot    STPresetLineDashVal = "sysDashDot"
	STPresetLineDashVal_sysDashDotDot STPresetLineDashVal = "sysDashDotDot"
)

// CTPresetLineDashProperties ...
type CTPresetLineDashProperties struct {
	XMLName xml.Name `xml:"CT_PresetLineDashProperties"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTDashStop ...
type CTDashStop struct {
	XMLName xml.Name              `xml:"CT_DashStop"`
	DAttr   *STPositivePercentage `xml:"d,attr"`
	SpAttr  *STPositivePercentage `xml:"sp,attr"`
}

// CTDashStopList ...
type CTDashStopList struct {
	XMLName xml.Name      `xml:"CT_DashStopList"`
	Ds      []*CTDashStop `xml:"ds"`
}

// EGLineDashProperties ...
type EGLineDashProperties struct {
	XMLName  xml.Name `xml:"EG_LineDashProperties"`
	PrstDash *CTPresetLineDashProperties
	CustDash *CTDashStopList
}

// STLineCap ...
type STLineCap string

const (
	STLineCap_rnd  STLineCap = "rnd"
	STLineCap_sq   STLineCap = "sq"
	STLineCap_flat STLineCap = "flat"
)

// STLineWidth ...
type STLineWidth int

// STPenAlignment ...
type STPenAlignment string

const (
	STPenAlignment_ctr STPenAlignment = "ctr"
	STPenAlignment_in  STPenAlignment = "in"
)

// STCompoundLine ...
type STCompoundLine string

const (
	STCompoundLine_sng       STCompoundLine = "sng"
	STCompoundLine_dbl       STCompoundLine = "dbl"
	STCompoundLine_thickThin STCompoundLine = "thickThin"
	STCompoundLine_thinThick STCompoundLine = "thinThick"
	STCompoundLine_tri       STCompoundLine = "tri"
)

// CTLineProperties ...
type CTLineProperties struct {
	XMLName              xml.Name `xml:"CT_LineProperties"`
	WAttr                int      `xml:"w,attr,omitempty"`
	CapAttr              string   `xml:"cap,attr,omitempty"`
	CmpdAttr             string   `xml:"cmpd,attr,omitempty"`
	AlgnAttr             string   `xml:"algn,attr,omitempty"`
	EGLineFillProperties []*EGLineFillProperties
	EGLineDashProperties []*EGLineDashProperties
	EGLineJoinProperties []*EGLineJoinProperties
	HeadEnd              *CTLineEndProperties      `xml:"headEnd"`
	TailEnd              *CTLineEndProperties      `xml:"tailEnd"`
	ExtLst               *CTOfficeArtExtensionList `xml:"extLst"`
}

// STShapeID ...
type STShapeID string

// CTShapeProperties ...
type CTShapeProperties struct {
	XMLName            xml.Name `xml:"CT_ShapeProperties"`
	BwModeAttr         string   `xml:"bwMode,attr,omitempty"`
	EGGeometry         []*EGGeometry
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	Xfrm               *CTTransform2D            `xml:"xfrm"`
	Ln                 *CTLineProperties         `xml:"ln"`
	Scene3d            *CTScene3D                `xml:"scene3d"`
	Sp3d               *CTShape3D                `xml:"sp3d"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGroupShapeProperties ...
type CTGroupShapeProperties struct {
	XMLName            xml.Name `xml:"CT_GroupShapeProperties"`
	BwModeAttr         string   `xml:"bwMode,attr,omitempty"`
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	Xfrm               *CTGroupTransform2D       `xml:"xfrm"`
	Scene3d            *CTScene3D                `xml:"scene3d"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTStyleMatrixReference ...
type CTStyleMatrixReference struct {
	XMLName       xml.Name `xml:"CT_StyleMatrixReference"`
	IdxAttr       uint32   `xml:"idx,attr"`
	EGColorChoice []*EGColorChoice
}

// CTFontReference ...
type CTFontReference struct {
	XMLName       xml.Name `xml:"CT_FontReference"`
	IdxAttr       string   `xml:"idx,attr"`
	EGColorChoice []*EGColorChoice
}

// CTShapeStyle ...
type CTShapeStyle struct {
	XMLName   xml.Name                `xml:"CT_ShapeStyle"`
	LnRef     *CTStyleMatrixReference `xml:"lnRef"`
	FillRef   *CTStyleMatrixReference `xml:"fillRef"`
	EffectRef *CTStyleMatrixReference `xml:"effectRef"`
	FontRef   *CTFontReference        `xml:"fontRef"`
}

// CTDefaultShapeDefinition ...
type CTDefaultShapeDefinition struct {
	XMLName  xml.Name                  `xml:"CT_DefaultShapeDefinition"`
	SpPr     *CTShapeProperties        `xml:"spPr"`
	BodyPr   *CTTextBodyProperties     `xml:"bodyPr"`
	LstStyle *CTTextListStyle          `xml:"lstStyle"`
	Style    *CTShapeStyle             `xml:"style"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTObjectStyleDefaults ...
type CTObjectStyleDefaults struct {
	XMLName xml.Name                  `xml:"CT_ObjectStyleDefaults"`
	SpDef   *CTDefaultShapeDefinition `xml:"spDef"`
	LnDef   *CTDefaultShapeDefinition `xml:"lnDef"`
	TxDef   *CTDefaultShapeDefinition `xml:"txDef"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTEmptyElement ...
type CTEmptyElement struct {
	XMLName xml.Name `xml:"CT_EmptyElement"`
}

// CTColorMapping ...
type CTColorMapping struct {
	XMLName      xml.Name                  `xml:"CT_ColorMapping"`
	Bg1Attr      string                    `xml:"bg1,attr"`
	Tx1Attr      string                    `xml:"tx1,attr"`
	Bg2Attr      string                    `xml:"bg2,attr"`
	Tx2Attr      string                    `xml:"tx2,attr"`
	Accent1Attr  string                    `xml:"accent1,attr"`
	Accent2Attr  string                    `xml:"accent2,attr"`
	Accent3Attr  string                    `xml:"accent3,attr"`
	Accent4Attr  string                    `xml:"accent4,attr"`
	Accent5Attr  string                    `xml:"accent5,attr"`
	Accent6Attr  string                    `xml:"accent6,attr"`
	HlinkAttr    string                    `xml:"hlink,attr"`
	FolHlinkAttr string                    `xml:"folHlink,attr"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTColorMappingOverride ...
type CTColorMappingOverride struct {
	XMLName            xml.Name        `xml:"CT_ColorMappingOverride"`
	MasterClrMapping   *CTEmptyElement `xml:"masterClrMapping"`
	OverrideClrMapping *CTColorMapping `xml:"overrideClrMapping"`
}

// CTColorSchemeAndMapping ...
type CTColorSchemeAndMapping struct {
	XMLName   xml.Name        `xml:"CT_ColorSchemeAndMapping"`
	ClrScheme *CTColorScheme  `xml:"clrScheme"`
	ClrMap    *CTColorMapping `xml:"clrMap"`
}

// CTColorSchemeList ...
type CTColorSchemeList struct {
	XMLName        xml.Name                   `xml:"CT_ColorSchemeList"`
	ExtraClrScheme []*CTColorSchemeAndMapping `xml:"extraClrScheme"`
}

// CTOfficeStyleSheet ...
type CTOfficeStyleSheet struct {
	XMLName           xml.Name                  `xml:"CT_OfficeStyleSheet"`
	NameAttr          string                    `xml:"name,attr,omitempty"`
	ThemeElements     *CTBaseStyles             `xml:"themeElements"`
	ObjectDefaults    *CTObjectStyleDefaults    `xml:"objectDefaults"`
	ExtraClrSchemeLst *CTColorSchemeList        `xml:"extraClrSchemeLst"`
	CustClrLst        *CTCustomColorList        `xml:"custClrLst"`
	ExtLst            *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBaseStylesOverride ...
type CTBaseStylesOverride struct {
	XMLName    xml.Name       `xml:"CT_BaseStylesOverride"`
	ClrScheme  *CTColorScheme `xml:"clrScheme"`
	FontScheme *CTFontScheme  `xml:"fontScheme"`
	FmtScheme  *CTStyleMatrix `xml:"fmtScheme"`
}

// CTClipboardStyleSheet ...
type CTClipboardStyleSheet struct {
	XMLName       xml.Name        `xml:"CT_ClipboardStyleSheet"`
	ThemeElements *CTBaseStyles   `xml:"themeElements"`
	ClrMap        *CTColorMapping `xml:"clrMap"`
}

// Theme ...
type Theme *CTOfficeStyleSheet

// ThemeOverride ...
type ThemeOverride *CTBaseStylesOverride

// ThemeManager ...
type ThemeManager *CTEmptyElement

// CTTableCellProperties ...
type CTTableCellProperties struct {
	XMLName          xml.Name        `xml:"CT_TableCellProperties"`
	MarLAttr         *STCoordinate32 `xml:"marL,attr,omitempty"`
	MarRAttr         *STCoordinate32 `xml:"marR,attr,omitempty"`
	MarTAttr         *STCoordinate32 `xml:"marT,attr,omitempty"`
	MarBAttr         *STCoordinate32 `xml:"marB,attr,omitempty"`
	VertAttr         string          `xml:"vert,attr,omitempty"`
	AnchorAttr       string          `xml:"anchor,attr,omitempty"`
	AnchorCtrAttr    bool            `xml:"anchorCtr,attr,omitempty"`
	HorzOverflowAttr string          `xml:"horzOverflow,attr,omitempty"`
	EGFillProperties []*EGFillProperties
	LnL              *CTLineProperties         `xml:"lnL"`
	LnR              *CTLineProperties         `xml:"lnR"`
	LnT              *CTLineProperties         `xml:"lnT"`
	LnB              *CTLineProperties         `xml:"lnB"`
	LnTlToBr         *CTLineProperties         `xml:"lnTlToBr"`
	LnBlToTr         *CTLineProperties         `xml:"lnBlToTr"`
	Cell3D           *CTCell3D                 `xml:"cell3D"`
	Headers          *CTHeaders                `xml:"headers"`
	ExtLst           *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTHeaders ...
type CTHeaders struct {
	XMLName xml.Name `xml:"CT_Headers"`
	Header  string   `xml:"header"`
}

// CTTableCol ...
type CTTableCol struct {
	XMLName xml.Name                  `xml:"CT_TableCol"`
	WAttr   *STCoordinate             `xml:"w,attr"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableGrid ...
type CTTableGrid struct {
	XMLName xml.Name      `xml:"CT_TableGrid"`
	GridCol []*CTTableCol `xml:"gridCol"`
}

// CTTableCell ...
type CTTableCell struct {
	XMLName      xml.Name                  `xml:"CT_TableCell"`
	RowSpanAttr  int                       `xml:"rowSpan,attr,omitempty"`
	GridSpanAttr int                       `xml:"gridSpan,attr,omitempty"`
	HMergeAttr   bool                      `xml:"hMerge,attr,omitempty"`
	VMergeAttr   bool                      `xml:"vMerge,attr,omitempty"`
	IdAttr       string                    `xml:"id,attr,omitempty"`
	TxBody       *CTTextBody               `xml:"txBody"`
	TcPr         *CTTableCellProperties    `xml:"tcPr"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableRow ...
type CTTableRow struct {
	XMLName xml.Name                  `xml:"CT_TableRow"`
	HAttr   *STCoordinate             `xml:"h,attr"`
	Tc      []*CTTableCell            `xml:"tc"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableProperties ...
type CTTableProperties struct {
	XMLName            xml.Name `xml:"CT_TableProperties"`
	RtlAttr            bool     `xml:"rtl,attr,omitempty"`
	FirstRowAttr       bool     `xml:"firstRow,attr,omitempty"`
	FirstColAttr       bool     `xml:"firstCol,attr,omitempty"`
	LastRowAttr        bool     `xml:"lastRow,attr,omitempty"`
	LastColAttr        bool     `xml:"lastCol,attr,omitempty"`
	BandRowAttr        bool     `xml:"bandRow,attr,omitempty"`
	BandColAttr        bool     `xml:"bandCol,attr,omitempty"`
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	TableStyle         *CTTableStyle             `xml:"tableStyle"`
	TableStyleId       string                    `xml:"tableStyleId"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTable ...
type CTTable struct {
	XMLName xml.Name           `xml:"CT_Table"`
	TblPr   *CTTableProperties `xml:"tblPr"`
	TblGrid *CTTableGrid       `xml:"tblGrid"`
	Tr      []*CTTableRow      `xml:"tr"`
}

// Tbl ...
type Tbl *CTTable

// CTCell3D ...
type CTCell3D struct {
	XMLName          xml.Name                  `xml:"CT_Cell3D"`
	PrstMaterialAttr string                    `xml:"prstMaterial,attr,omitempty"`
	Bevel            *CTBevel                  `xml:"bevel"`
	LightRig         *CTLightRig               `xml:"lightRig"`
	ExtLst           *CTOfficeArtExtensionList `xml:"extLst"`
}

// EGThemeableFillStyle ...
type EGThemeableFillStyle struct {
	XMLName xml.Name `xml:"EG_ThemeableFillStyle"`
	Fill    *CTFillProperties
	FillRef *CTStyleMatrixReference
}

// CTThemeableLineStyle ...
type CTThemeableLineStyle struct {
	XMLName xml.Name                `xml:"CT_ThemeableLineStyle"`
	Ln      *CTLineProperties       `xml:"ln"`
	LnRef   *CTStyleMatrixReference `xml:"lnRef"`
}

// EGThemeableEffectStyle ...
type EGThemeableEffectStyle struct {
	XMLName   xml.Name `xml:"EG_ThemeableEffectStyle"`
	Effect    *CTEffectProperties
	EffectRef *CTStyleMatrixReference
}

// EGThemeableFontStyles ...
type EGThemeableFontStyles struct {
	XMLName xml.Name `xml:"EG_ThemeableFontStyles"`
	Font    *CTFontCollection
	FontRef *CTFontReference
}

// STOnOffStyleType ...
type STOnOffStyleType string

const (
	STOnOffStyleType_on  STOnOffStyleType = "on"
	STOnOffStyleType_off STOnOffStyleType = "off"
	STOnOffStyleType_def STOnOffStyleType = "def"
)

// CTTableStyleTextStyle ...
type CTTableStyleTextStyle struct {
	XMLName               xml.Name `xml:"CT_TableStyleTextStyle"`
	BAttr                 string   `xml:"b,attr,omitempty"`
	IAttr                 string   `xml:"i,attr,omitempty"`
	EGThemeableFontStyles []*EGThemeableFontStyles
	EGColorChoice         []*EGColorChoice
	ExtLst                *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableCellBorderStyle ...
type CTTableCellBorderStyle struct {
	XMLName xml.Name                  `xml:"CT_TableCellBorderStyle"`
	Left    *CTThemeableLineStyle     `xml:"left"`
	Right   *CTThemeableLineStyle     `xml:"right"`
	Top     *CTThemeableLineStyle     `xml:"top"`
	Bottom  *CTThemeableLineStyle     `xml:"bottom"`
	InsideH *CTThemeableLineStyle     `xml:"insideH"`
	InsideV *CTThemeableLineStyle     `xml:"insideV"`
	Tl2br   *CTThemeableLineStyle     `xml:"tl2br"`
	Tr2bl   *CTThemeableLineStyle     `xml:"tr2bl"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableBackgroundStyle ...
type CTTableBackgroundStyle struct {
	XMLName                xml.Name `xml:"CT_TableBackgroundStyle"`
	EGThemeableFillStyle   []*EGThemeableFillStyle
	EGThemeableEffectStyle []*EGThemeableEffectStyle
}

// CTTableStyleCellStyle ...
type CTTableStyleCellStyle struct {
	XMLName              xml.Name `xml:"CT_TableStyleCellStyle"`
	EGThemeableFillStyle []*EGThemeableFillStyle
	TcBdr                *CTTableCellBorderStyle `xml:"tcBdr"`
	Cell3D               *CTCell3D               `xml:"cell3D"`
}

// CTTablePartStyle ...
type CTTablePartStyle struct {
	XMLName   xml.Name               `xml:"CT_TablePartStyle"`
	TcTxStyle *CTTableStyleTextStyle `xml:"tcTxStyle"`
	TcStyle   *CTTableStyleCellStyle `xml:"tcStyle"`
}

// CTTableStyle ...
type CTTableStyle struct {
	XMLName       xml.Name                  `xml:"CT_TableStyle"`
	StyleIdAttr   string                    `xml:"styleId,attr"`
	StyleNameAttr string                    `xml:"styleName,attr"`
	TblBg         *CTTableBackgroundStyle   `xml:"tblBg"`
	WholeTbl      *CTTablePartStyle         `xml:"wholeTbl"`
	Band1H        *CTTablePartStyle         `xml:"band1H"`
	Band2H        *CTTablePartStyle         `xml:"band2H"`
	Band1V        *CTTablePartStyle         `xml:"band1V"`
	Band2V        *CTTablePartStyle         `xml:"band2V"`
	LastCol       *CTTablePartStyle         `xml:"lastCol"`
	FirstCol      *CTTablePartStyle         `xml:"firstCol"`
	LastRow       *CTTablePartStyle         `xml:"lastRow"`
	SeCell        *CTTablePartStyle         `xml:"seCell"`
	SwCell        *CTTablePartStyle         `xml:"swCell"`
	FirstRow      *CTTablePartStyle         `xml:"firstRow"`
	NeCell        *CTTablePartStyle         `xml:"neCell"`
	NwCell        *CTTablePartStyle         `xml:"nwCell"`
	ExtLst        *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableStyleList ...
type CTTableStyleList struct {
	XMLName  xml.Name        `xml:"CT_TableStyleList"`
	DefAttr  string          `xml:"def,attr"`
	TblStyle []*CTTableStyle `xml:"tblStyle"`
}

// TblStyleLst ...
type TblStyleLst *CTTableStyleList

// CTTextParagraph ...
type CTTextParagraph struct {
	XMLName    xml.Name `xml:"CT_TextParagraph"`
	EGTextRun  []*EGTextRun
	PPr        *CTTextParagraphProperties `xml:"pPr"`
	EndParaRPr *CTTextCharacterProperties `xml:"endParaRPr"`
}

// STTextAnchoringType ...
type STTextAnchoringType string

const (
	STTextAnchoringType_t    STTextAnchoringType = "t"
	STTextAnchoringType_ctr  STTextAnchoringType = "ctr"
	STTextAnchoringType_b    STTextAnchoringType = "b"
	STTextAnchoringType_just STTextAnchoringType = "just"
	STTextAnchoringType_dist STTextAnchoringType = "dist"
)

// STTextVertOverflowType ...
type STTextVertOverflowType string

const (
	STTextVertOverflowType_overflow STTextVertOverflowType = "overflow"
	STTextVertOverflowType_ellipsis STTextVertOverflowType = "ellipsis"
	STTextVertOverflowType_clip     STTextVertOverflowType = "clip"
)

// STTextHorzOverflowType ...
type STTextHorzOverflowType string

const (
	STTextHorzOverflowType_overflow STTextHorzOverflowType = "overflow"
	STTextHorzOverflowType_clip     STTextHorzOverflowType = "clip"
)

// STTextVerticalType ...
type STTextVerticalType string

const (
	STTextVerticalType_horz           STTextVerticalType = "horz"
	STTextVerticalType_vert           STTextVerticalType = "vert"
	STTextVerticalType_vert270        STTextVerticalType = "vert270"
	STTextVerticalType_wordArtVert    STTextVerticalType = "wordArtVert"
	STTextVerticalType_eaVert         STTextVerticalType = "eaVert"
	STTextVerticalType_mongolianVert  STTextVerticalType = "mongolianVert"
	STTextVerticalType_wordArtVertRtl STTextVerticalType = "wordArtVertRtl"
)

// STTextWrappingType ...
type STTextWrappingType string

const (
	STTextWrappingType_none   STTextWrappingType = "none"
	STTextWrappingType_square STTextWrappingType = "square"
)

// STTextColumnCount ...
type STTextColumnCount int

// CTTextListStyle ...
type CTTextListStyle struct {
	XMLName xml.Name                   `xml:"CT_TextListStyle"`
	DefPPr  *CTTextParagraphProperties `xml:"defPPr"`
	Lvl1pPr *CTTextParagraphProperties `xml:"lvl1pPr"`
	Lvl2pPr *CTTextParagraphProperties `xml:"lvl2pPr"`
	Lvl3pPr *CTTextParagraphProperties `xml:"lvl3pPr"`
	Lvl4pPr *CTTextParagraphProperties `xml:"lvl4pPr"`
	Lvl5pPr *CTTextParagraphProperties `xml:"lvl5pPr"`
	Lvl6pPr *CTTextParagraphProperties `xml:"lvl6pPr"`
	Lvl7pPr *CTTextParagraphProperties `xml:"lvl7pPr"`
	Lvl8pPr *CTTextParagraphProperties `xml:"lvl8pPr"`
	Lvl9pPr *CTTextParagraphProperties `xml:"lvl9pPr"`
	ExtLst  *CTOfficeArtExtensionList  `xml:"extLst"`
}

// STTextFontScalePercentOrPercentString ...
type STTextFontScalePercentOrPercentString struct {
	XMLName                xml.Name `xml:"ST_TextFontScalePercentOrPercentString"`
	STTextFontScalePercent *STTextFontScalePercent
	STPercentage           string
}

// STTextFontScalePercent ...
type STTextFontScalePercent int

// CTTextNormalAutofit ...
type CTTextNormalAutofit struct {
	XMLName            xml.Name                               `xml:"CT_TextNormalAutofit"`
	FontScaleAttr      *STTextFontScalePercentOrPercentString `xml:"fontScale,attr,omitempty"`
	LnSpcReductionAttr *STTextSpacingPercentOrPercentString   `xml:"lnSpcReduction,attr,omitempty"`
}

// CTTextShapeAutofit ...
type CTTextShapeAutofit struct {
	XMLName xml.Name `xml:"CT_TextShapeAutofit"`
}

// CTTextNoAutofit ...
type CTTextNoAutofit struct {
	XMLName xml.Name `xml:"CT_TextNoAutofit"`
}

// EGTextAutofit ...
type EGTextAutofit struct {
	XMLName     xml.Name `xml:"EG_TextAutofit"`
	NoAutofit   *CTTextNoAutofit
	NormAutofit *CTTextNormalAutofit
	SpAutoFit   *CTTextShapeAutofit
}

// CTTextBodyProperties ...
type CTTextBodyProperties struct {
	XMLName              xml.Name        `xml:"CT_TextBodyProperties"`
	RotAttr              int             `xml:"rot,attr,omitempty"`
	SpcFirstLastParaAttr bool            `xml:"spcFirstLastPara,attr,omitempty"`
	VertOverflowAttr     string          `xml:"vertOverflow,attr,omitempty"`
	HorzOverflowAttr     string          `xml:"horzOverflow,attr,omitempty"`
	VertAttr             string          `xml:"vert,attr,omitempty"`
	WrapAttr             string          `xml:"wrap,attr,omitempty"`
	LInsAttr             *STCoordinate32 `xml:"lIns,attr,omitempty"`
	TInsAttr             *STCoordinate32 `xml:"tIns,attr,omitempty"`
	RInsAttr             *STCoordinate32 `xml:"rIns,attr,omitempty"`
	BInsAttr             *STCoordinate32 `xml:"bIns,attr,omitempty"`
	NumColAttr           int             `xml:"numCol,attr,omitempty"`
	SpcColAttr           int             `xml:"spcCol,attr,omitempty"`
	RtlColAttr           bool            `xml:"rtlCol,attr,omitempty"`
	FromWordArtAttr      bool            `xml:"fromWordArt,attr,omitempty"`
	AnchorAttr           string          `xml:"anchor,attr,omitempty"`
	AnchorCtrAttr        bool            `xml:"anchorCtr,attr,omitempty"`
	ForceAAAttr          bool            `xml:"forceAA,attr,omitempty"`
	UprightAttr          bool            `xml:"upright,attr,omitempty"`
	CompatLnSpcAttr      bool            `xml:"compatLnSpc,attr,omitempty"`
	EGTextAutofit        []*EGTextAutofit
	EGText3D             []*EGText3D
	PrstTxWarp           *CTPresetTextShape        `xml:"prstTxWarp"`
	Scene3d              *CTScene3D                `xml:"scene3d"`
	ExtLst               *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTextBody ...
type CTTextBody struct {
	XMLName  xml.Name              `xml:"CT_TextBody"`
	BodyPr   *CTTextBodyProperties `xml:"bodyPr"`
	LstStyle *CTTextListStyle      `xml:"lstStyle"`
	P        []*CTTextParagraph    `xml:"p"`
}

// STTextBulletStartAtNum ...
type STTextBulletStartAtNum int

// STTextAutonumberScheme ...
type STTextAutonumberScheme string

const (
	STTextAutonumberScheme_alphaLcParenBoth      STTextAutonumberScheme = "alphaLcParenBoth"
	STTextAutonumberScheme_alphaUcParenBoth      STTextAutonumberScheme = "alphaUcParenBoth"
	STTextAutonumberScheme_alphaLcParenR         STTextAutonumberScheme = "alphaLcParenR"
	STTextAutonumberScheme_alphaUcParenR         STTextAutonumberScheme = "alphaUcParenR"
	STTextAutonumberScheme_alphaLcPeriod         STTextAutonumberScheme = "alphaLcPeriod"
	STTextAutonumberScheme_alphaUcPeriod         STTextAutonumberScheme = "alphaUcPeriod"
	STTextAutonumberScheme_arabicParenBoth       STTextAutonumberScheme = "arabicParenBoth"
	STTextAutonumberScheme_arabicParenR          STTextAutonumberScheme = "arabicParenR"
	STTextAutonumberScheme_arabicPeriod          STTextAutonumberScheme = "arabicPeriod"
	STTextAutonumberScheme_arabicPlain           STTextAutonumberScheme = "arabicPlain"
	STTextAutonumberScheme_romanLcParenBoth      STTextAutonumberScheme = "romanLcParenBoth"
	STTextAutonumberScheme_romanUcParenBoth      STTextAutonumberScheme = "romanUcParenBoth"
	STTextAutonumberScheme_romanLcParenR         STTextAutonumberScheme = "romanLcParenR"
	STTextAutonumberScheme_romanUcParenR         STTextAutonumberScheme = "romanUcParenR"
	STTextAutonumberScheme_romanLcPeriod         STTextAutonumberScheme = "romanLcPeriod"
	STTextAutonumberScheme_romanUcPeriod         STTextAutonumberScheme = "romanUcPeriod"
	STTextAutonumberScheme_circleNumDbPlain      STTextAutonumberScheme = "circleNumDbPlain"
	STTextAutonumberScheme_circleNumWdBlackPlain STTextAutonumberScheme = "circleNumWdBlackPlain"
	STTextAutonumberScheme_circleNumWdWhitePlain STTextAutonumberScheme = "circleNumWdWhitePlain"
	STTextAutonumberScheme_arabicDbPeriod        STTextAutonumberScheme = "arabicDbPeriod"
	STTextAutonumberScheme_arabicDbPlain         STTextAutonumberScheme = "arabicDbPlain"
	STTextAutonumberScheme_ea1ChsPeriod          STTextAutonumberScheme = "ea1ChsPeriod"
	STTextAutonumberScheme_ea1ChsPlain           STTextAutonumberScheme = "ea1ChsPlain"
	STTextAutonumberScheme_ea1ChtPeriod          STTextAutonumberScheme = "ea1ChtPeriod"
	STTextAutonumberScheme_ea1ChtPlain           STTextAutonumberScheme = "ea1ChtPlain"
	STTextAutonumberScheme_ea1JpnChsDbPeriod     STTextAutonumberScheme = "ea1JpnChsDbPeriod"
	STTextAutonumberScheme_ea1JpnKorPlain        STTextAutonumberScheme = "ea1JpnKorPlain"
	STTextAutonumberScheme_ea1JpnKorPeriod       STTextAutonumberScheme = "ea1JpnKorPeriod"
	STTextAutonumberScheme_arabic1Minus          STTextAutonumberScheme = "arabic1Minus"
	STTextAutonumberScheme_arabic2Minus          STTextAutonumberScheme = "arabic2Minus"
	STTextAutonumberScheme_hebrew2Minus          STTextAutonumberScheme = "hebrew2Minus"
	STTextAutonumberScheme_thaiAlphaPeriod       STTextAutonumberScheme = "thaiAlphaPeriod"
	STTextAutonumberScheme_thaiAlphaParenR       STTextAutonumberScheme = "thaiAlphaParenR"
	STTextAutonumberScheme_thaiAlphaParenBoth    STTextAutonumberScheme = "thaiAlphaParenBoth"
	STTextAutonumberScheme_thaiNumPeriod         STTextAutonumberScheme = "thaiNumPeriod"
	STTextAutonumberScheme_thaiNumParenR         STTextAutonumberScheme = "thaiNumParenR"
	STTextAutonumberScheme_thaiNumParenBoth      STTextAutonumberScheme = "thaiNumParenBoth"
	STTextAutonumberScheme_hindiAlphaPeriod      STTextAutonumberScheme = "hindiAlphaPeriod"
	STTextAutonumberScheme_hindiNumPeriod        STTextAutonumberScheme = "hindiNumPeriod"
	STTextAutonumberScheme_hindiNumParenR        STTextAutonumberScheme = "hindiNumParenR"
	STTextAutonumberScheme_hindiAlpha1Period     STTextAutonumberScheme = "hindiAlpha1Period"
)

// CTTextBulletColorFollowText ...
type CTTextBulletColorFollowText struct {
	XMLName xml.Name `xml:"CT_TextBulletColorFollowText"`
}

// EGTextBulletColor ...
type EGTextBulletColor struct {
	XMLName xml.Name `xml:"EG_TextBulletColor"`
	BuClrTx *CTTextBulletColorFollowText
	BuClr   *CTColor
}

// STTextBulletSize ...
type STTextBulletSize struct {
	XMLName                 xml.Name `xml:"ST_TextBulletSize"`
	STTextBulletSizePercent *STTextBulletSizePercent
	STTextBulletSizeDecimal *STTextBulletSizeDecimal
}

// STTextBulletSizePercent ...
// Pattern: 0*((2[5-9])|([3-9][0-9])|([1-3][0-9][0-9])|400)%
type STTextBulletSizePercent string

// STTextBulletSizeDecimal ...
type STTextBulletSizeDecimal int

// CTTextBulletSizeFollowText ...
type CTTextBulletSizeFollowText struct {
	XMLName xml.Name `xml:"CT_TextBulletSizeFollowText"`
}

// CTTextBulletSizePercent ...
type CTTextBulletSizePercent struct {
	XMLName xml.Name `xml:"CT_TextBulletSizePercent"`
	ValAttr string   `xml:"val,attr"`
}

// CTTextBulletSizePoint ...
type CTTextBulletSizePoint struct {
	XMLName xml.Name `xml:"CT_TextBulletSizePoint"`
	ValAttr int      `xml:"val,attr"`
}

// EGTextBulletSize ...
type EGTextBulletSize struct {
	XMLName xml.Name `xml:"EG_TextBulletSize"`
	BuSzTx  *CTTextBulletSizeFollowText
	BuSzPct *CTTextBulletSizePercent
	BuSzPts *CTTextBulletSizePoint
}

// CTTextBulletTypefaceFollowText ...
type CTTextBulletTypefaceFollowText struct {
	XMLName xml.Name `xml:"CT_TextBulletTypefaceFollowText"`
}

// EGTextBulletTypeface ...
type EGTextBulletTypeface struct {
	XMLName  xml.Name `xml:"EG_TextBulletTypeface"`
	BuFontTx *CTTextBulletTypefaceFollowText
	BuFont   *CTTextFont
}

// CTTextAutonumberBullet ...
type CTTextAutonumberBullet struct {
	XMLName     xml.Name `xml:"CT_TextAutonumberBullet"`
	TypeAttr    string   `xml:"type,attr"`
	StartAtAttr int      `xml:"startAt,attr,omitempty"`
}

// CTTextCharBullet ...
type CTTextCharBullet struct {
	XMLName  xml.Name `xml:"CT_TextCharBullet"`
	CharAttr string   `xml:"char,attr"`
}

// CTTextBlipBullet ...
type CTTextBlipBullet struct {
	XMLName xml.Name `xml:"CT_TextBlipBullet"`
	Blip    *CTBlip  `xml:"blip"`
}

// CTTextNoBullet ...
type CTTextNoBullet struct {
	XMLName xml.Name `xml:"CT_TextNoBullet"`
}

// EGTextBullet ...
type EGTextBullet struct {
	XMLName   xml.Name `xml:"EG_TextBullet"`
	BuNone    *CTTextNoBullet
	BuAutoNum *CTTextAutonumberBullet
	BuChar    *CTTextCharBullet
	BuBlip    *CTTextBlipBullet
}

// STTextPoint ...
type STTextPoint struct {
	XMLName                xml.Name `xml:"ST_TextPoint"`
	STTextPointUnqualified *STTextPointUnqualified
	STUniversalMeasure     string
}

// STTextPointUnqualified ...
type STTextPointUnqualified int

// STTextNonNegativePoint ...
type STTextNonNegativePoint int

// STTextFontSize ...
type STTextFontSize int

// STTextTypeface ...
type STTextTypeface string

// STPitchFamily ...
type STPitchFamily byte

const (
	STPitchFamily_00 STPitchFamily = "00"
	STPitchFamily_01 STPitchFamily = "01"
	STPitchFamily_02 STPitchFamily = "02"
	STPitchFamily_16 STPitchFamily = "16"
	STPitchFamily_17 STPitchFamily = "17"
	STPitchFamily_18 STPitchFamily = "18"
	STPitchFamily_32 STPitchFamily = "32"
	STPitchFamily_33 STPitchFamily = "33"
	STPitchFamily_34 STPitchFamily = "34"
	STPitchFamily_48 STPitchFamily = "48"
	STPitchFamily_49 STPitchFamily = "49"
	STPitchFamily_50 STPitchFamily = "50"
	STPitchFamily_64 STPitchFamily = "64"
	STPitchFamily_65 STPitchFamily = "65"
	STPitchFamily_66 STPitchFamily = "66"
	STPitchFamily_80 STPitchFamily = "80"
	STPitchFamily_81 STPitchFamily = "81"
	STPitchFamily_82 STPitchFamily = "82"
)

// CTTextFont ...
type CTTextFont struct {
	XMLName         xml.Name `xml:"CT_TextFont"`
	TypefaceAttr    string   `xml:"typeface,attr"`
	PanoseAttr      []byte   `xml:"panose,attr,omitempty"`
	PitchFamilyAttr byte     `xml:"pitchFamily,attr,omitempty"`
	CharsetAttr     byte     `xml:"charset,attr,omitempty"`
}

// STTextUnderlineType ...
type STTextUnderlineType string

const (
	STTextUnderlineType_none            STTextUnderlineType = "none"
	STTextUnderlineType_words           STTextUnderlineType = "words"
	STTextUnderlineType_sng             STTextUnderlineType = "sng"
	STTextUnderlineType_dbl             STTextUnderlineType = "dbl"
	STTextUnderlineType_heavy           STTextUnderlineType = "heavy"
	STTextUnderlineType_dotted          STTextUnderlineType = "dotted"
	STTextUnderlineType_dottedHeavy     STTextUnderlineType = "dottedHeavy"
	STTextUnderlineType_dash            STTextUnderlineType = "dash"
	STTextUnderlineType_dashHeavy       STTextUnderlineType = "dashHeavy"
	STTextUnderlineType_dashLong        STTextUnderlineType = "dashLong"
	STTextUnderlineType_dashLongHeavy   STTextUnderlineType = "dashLongHeavy"
	STTextUnderlineType_dotDash         STTextUnderlineType = "dotDash"
	STTextUnderlineType_dotDashHeavy    STTextUnderlineType = "dotDashHeavy"
	STTextUnderlineType_dotDotDash      STTextUnderlineType = "dotDotDash"
	STTextUnderlineType_dotDotDashHeavy STTextUnderlineType = "dotDotDashHeavy"
	STTextUnderlineType_wavy            STTextUnderlineType = "wavy"
	STTextUnderlineType_wavyHeavy       STTextUnderlineType = "wavyHeavy"
	STTextUnderlineType_wavyDbl         STTextUnderlineType = "wavyDbl"
)

// CTTextUnderlineLineFollowText ...
type CTTextUnderlineLineFollowText struct {
	XMLName xml.Name `xml:"CT_TextUnderlineLineFollowText"`
}

// CTTextUnderlineFillFollowText ...
type CTTextUnderlineFillFollowText struct {
	XMLName xml.Name `xml:"CT_TextUnderlineFillFollowText"`
}

// CTTextUnderlineFillGroupWrapper ...
type CTTextUnderlineFillGroupWrapper struct {
	XMLName          xml.Name `xml:"CT_TextUnderlineFillGroupWrapper"`
	EGFillProperties []*EGFillProperties
}

// EGTextUnderlineLine ...
type EGTextUnderlineLine struct {
	XMLName xml.Name `xml:"EG_TextUnderlineLine"`
	ULnTx   *CTTextUnderlineLineFollowText
	ULn     *CTLineProperties
}

// EGTextUnderlineFill ...
type EGTextUnderlineFill struct {
	XMLName xml.Name `xml:"EG_TextUnderlineFill"`
	UFillTx *CTTextUnderlineFillFollowText
	UFill   *CTTextUnderlineFillGroupWrapper
}

// STTextStrikeType ...
type STTextStrikeType string

const (
	STTextStrikeType_noStrike  STTextStrikeType = "noStrike"
	STTextStrikeType_sngStrike STTextStrikeType = "sngStrike"
	STTextStrikeType_dblStrike STTextStrikeType = "dblStrike"
)

// STTextCapsType ...
type STTextCapsType string

const (
	STTextCapsType_none  STTextCapsType = "none"
	STTextCapsType_small STTextCapsType = "small"
	STTextCapsType_all   STTextCapsType = "all"
)

// CTTextCharacterProperties ...
type CTTextCharacterProperties struct {
	XMLName             xml.Name      `xml:"CT_TextCharacterProperties"`
	KumimojiAttr        bool          `xml:"kumimoji,attr,omitempty"`
	LangAttr            string        `xml:"lang,attr,omitempty"`
	AltLangAttr         string        `xml:"altLang,attr,omitempty"`
	SzAttr              int           `xml:"sz,attr,omitempty"`
	BAttr               bool          `xml:"b,attr,omitempty"`
	IAttr               bool          `xml:"i,attr,omitempty"`
	UAttr               string        `xml:"u,attr,omitempty"`
	StrikeAttr          string        `xml:"strike,attr,omitempty"`
	KernAttr            int           `xml:"kern,attr,omitempty"`
	CapAttr             string        `xml:"cap,attr,omitempty"`
	SpcAttr             *STTextPoint  `xml:"spc,attr,omitempty"`
	NormalizeHAttr      bool          `xml:"normalizeH,attr,omitempty"`
	BaselineAttr        *STPercentage `xml:"baseline,attr,omitempty"`
	NoProofAttr         bool          `xml:"noProof,attr,omitempty"`
	DirtyAttr           bool          `xml:"dirty,attr,omitempty"`
	ErrAttr             bool          `xml:"err,attr,omitempty"`
	SmtCleanAttr        bool          `xml:"smtClean,attr,omitempty"`
	SmtIdAttr           uint32        `xml:"smtId,attr,omitempty"`
	BmkAttr             string        `xml:"bmk,attr,omitempty"`
	EGFillProperties    []*EGFillProperties
	EGEffectProperties  []*EGEffectProperties
	EGTextUnderlineLine []*EGTextUnderlineLine
	EGTextUnderlineFill []*EGTextUnderlineFill
	Ln                  *CTLineProperties         `xml:"ln"`
	Highlight           *CTColor                  `xml:"highlight"`
	Latin               *CTTextFont               `xml:"latin"`
	Ea                  *CTTextFont               `xml:"ea"`
	Cs                  *CTTextFont               `xml:"cs"`
	Sym                 *CTTextFont               `xml:"sym"`
	HlinkClick          *CTHyperlink              `xml:"hlinkClick"`
	HlinkMouseOver      *CTHyperlink              `xml:"hlinkMouseOver"`
	Rtl                 *CTBoolean                `xml:"rtl"`
	ExtLst              *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBoolean ...
type CTBoolean struct {
	XMLName xml.Name `xml:"CT_Boolean"`
	ValAttr *STOnOff `xml:"val,attr,omitempty"`
}

// STTextSpacingPoint ...
type STTextSpacingPoint int

// STTextSpacingPercentOrPercentString ...
type STTextSpacingPercentOrPercentString struct {
	XMLName              xml.Name `xml:"ST_TextSpacingPercentOrPercentString"`
	STTextSpacingPercent *STTextSpacingPercent
	STPercentage         string
}

// STTextSpacingPercent ...
type STTextSpacingPercent int

// CTTextSpacingPercent ...
type CTTextSpacingPercent struct {
	XMLName xml.Name                             `xml:"CT_TextSpacingPercent"`
	ValAttr *STTextSpacingPercentOrPercentString `xml:"val,attr"`
}

// CTTextSpacingPoint ...
type CTTextSpacingPoint struct {
	XMLName xml.Name `xml:"CT_TextSpacingPoint"`
	ValAttr int      `xml:"val,attr"`
}

// STTextMargin ...
type STTextMargin int

// STTextIndent ...
type STTextIndent int

// STTextTabAlignType ...
type STTextTabAlignType string

const (
	STTextTabAlignType_l   STTextTabAlignType = "l"
	STTextTabAlignType_ctr STTextTabAlignType = "ctr"
	STTextTabAlignType_r   STTextTabAlignType = "r"
	STTextTabAlignType_dec STTextTabAlignType = "dec"
)

// CTTextTabStop ...
type CTTextTabStop struct {
	XMLName  xml.Name        `xml:"CT_TextTabStop"`
	PosAttr  *STCoordinate32 `xml:"pos,attr,omitempty"`
	AlgnAttr string          `xml:"algn,attr,omitempty"`
}

// CTTextTabStopList ...
type CTTextTabStopList struct {
	XMLName xml.Name         `xml:"CT_TextTabStopList"`
	Tab     []*CTTextTabStop `xml:"tab"`
}

// CTTextLineBreak ...
type CTTextLineBreak struct {
	XMLName xml.Name                   `xml:"CT_TextLineBreak"`
	RPr     *CTTextCharacterProperties `xml:"rPr"`
}

// CTTextSpacing ...
type CTTextSpacing struct {
	XMLName xml.Name              `xml:"CT_TextSpacing"`
	SpcPct  *CTTextSpacingPercent `xml:"spcPct"`
	SpcPts  *CTTextSpacingPoint   `xml:"spcPts"`
}

// STTextAlignType ...
type STTextAlignType string

const (
	STTextAlignType_l        STTextAlignType = "l"
	STTextAlignType_ctr      STTextAlignType = "ctr"
	STTextAlignType_r        STTextAlignType = "r"
	STTextAlignType_just     STTextAlignType = "just"
	STTextAlignType_justLow  STTextAlignType = "justLow"
	STTextAlignType_dist     STTextAlignType = "dist"
	STTextAlignType_thaiDist STTextAlignType = "thaiDist"
)

// STTextFontAlignType ...
type STTextFontAlignType string

const (
	STTextFontAlignType_auto STTextFontAlignType = "auto"
	STTextFontAlignType_t    STTextFontAlignType = "t"
	STTextFontAlignType_ctr  STTextFontAlignType = "ctr"
	STTextFontAlignType_base STTextFontAlignType = "base"
	STTextFontAlignType_b    STTextFontAlignType = "b"
)

// STTextIndentLevelType ...
type STTextIndentLevelType int

// CTTextParagraphProperties ...
type CTTextParagraphProperties struct {
	XMLName              xml.Name        `xml:"CT_TextParagraphProperties"`
	MarLAttr             int             `xml:"marL,attr,omitempty"`
	MarRAttr             int             `xml:"marR,attr,omitempty"`
	LvlAttr              int             `xml:"lvl,attr,omitempty"`
	IndentAttr           int             `xml:"indent,attr,omitempty"`
	AlgnAttr             string          `xml:"algn,attr,omitempty"`
	DefTabSzAttr         *STCoordinate32 `xml:"defTabSz,attr,omitempty"`
	RtlAttr              bool            `xml:"rtl,attr,omitempty"`
	EaLnBrkAttr          bool            `xml:"eaLnBrk,attr,omitempty"`
	FontAlgnAttr         string          `xml:"fontAlgn,attr,omitempty"`
	LatinLnBrkAttr       bool            `xml:"latinLnBrk,attr,omitempty"`
	HangingPunctAttr     bool            `xml:"hangingPunct,attr,omitempty"`
	EGTextBulletColor    []*EGTextBulletColor
	EGTextBulletSize     []*EGTextBulletSize
	EGTextBulletTypeface []*EGTextBulletTypeface
	EGTextBullet         []*EGTextBullet
	LnSpc                *CTTextSpacing             `xml:"lnSpc"`
	SpcBef               *CTTextSpacing             `xml:"spcBef"`
	SpcAft               *CTTextSpacing             `xml:"spcAft"`
	TabLst               *CTTextTabStopList         `xml:"tabLst"`
	DefRPr               *CTTextCharacterProperties `xml:"defRPr"`
	ExtLst               *CTOfficeArtExtensionList  `xml:"extLst"`
}

// CTTextField ...
type CTTextField struct {
	XMLName  xml.Name                   `xml:"CT_TextField"`
	IdAttr   string                     `xml:"id,attr"`
	TypeAttr string                     `xml:"type,attr,omitempty"`
	RPr      *CTTextCharacterProperties `xml:"rPr"`
	PPr      *CTTextParagraphProperties `xml:"pPr"`
	T        string                     `xml:"t"`
}

// EGTextRun ...
type EGTextRun struct {
	XMLName xml.Name `xml:"EG_TextRun"`
	R       *CTRegularTextRun
	Br      *CTTextLineBreak
	Fld     *CTTextField
}

// CTRegularTextRun ...
type CTRegularTextRun struct {
	XMLName xml.Name                   `xml:"CT_RegularTextRun"`
	RPr     *CTTextCharacterProperties `xml:"rPr"`
	T       string                     `xml:"t"`
}
