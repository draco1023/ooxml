// Code generated by xgen. DO NOT EDIT.

package ooxml

import (
	"encoding/xml"
)

// CTCTName ...
type CTCTName struct {
	XMLName  xml.Name `xml:"CT_CTName"`
	LangAttr string   `xml:"lang,attr,omitempty"`
	ValAttr  string   `xml:"val,attr"`
}

// CTCTDescription ...
type CTCTDescription struct {
	XMLName  xml.Name `xml:"CT_CTDescription"`
	LangAttr string   `xml:"lang,attr,omitempty"`
	ValAttr  string   `xml:"val,attr"`
}

// CTCTCategory ...
type CTCTCategory struct {
	XMLName  xml.Name `xml:"CT_CTCategory"`
	TypeAttr string   `xml:"type,attr"`
	PriAttr  uint32   `xml:"pri,attr"`
}

// CTCTCategories ...
type CTCTCategories struct {
	XMLName xml.Name        `xml:"CT_CTCategories"`
	Cat     []*CTCTCategory `xml:"cat"`
}

// STClrAppMethod ...
type STClrAppMethod string

const (
	STClrAppMethod_span   STClrAppMethod = "span"
	STClrAppMethod_cycle  STClrAppMethod = "cycle"
	STClrAppMethod_repeat STClrAppMethod = "repeat"
)

// STHueDir ...
type STHueDir string

const (
	STHueDir_cw  STHueDir = "cw"
	STHueDir_ccw STHueDir = "ccw"
)

// CTColors ...
type CTColors struct {
	XMLName        xml.Name `xml:"CT_Colors"`
	MethAttr       string   `xml:"meth,attr,omitempty"`
	HueDirAttr     string   `xml:"hueDir,attr,omitempty"`
	AEGColorChoice []*EGColorChoice
}

// CTCTStyleLabel ...
type CTCTStyleLabel struct {
	XMLName        xml.Name                  `xml:"CT_CTStyleLabel"`
	NameAttr       string                    `xml:"name,attr"`
	FillClrLst     *CTColors                 `xml:"fillClrLst"`
	LinClrLst      *CTColors                 `xml:"linClrLst"`
	EffectClrLst   *CTColors                 `xml:"effectClrLst"`
	TxLinClrLst    *CTColors                 `xml:"txLinClrLst"`
	TxFillClrLst   *CTColors                 `xml:"txFillClrLst"`
	TxEffectClrLst *CTColors                 `xml:"txEffectClrLst"`
	ExtLst         *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTColorTransform ...
type CTColorTransform struct {
	XMLName      xml.Name                  `xml:"CT_ColorTransform"`
	UniqueIdAttr string                    `xml:"uniqueId,attr,omitempty"`
	MinVerAttr   string                    `xml:"minVer,attr,omitempty"`
	Title        []*CTCTName               `xml:"title"`
	Desc         []*CTCTDescription        `xml:"desc"`
	CatLst       *CTCTCategories           `xml:"catLst"`
	StyleLbl     []*CTCTStyleLabel         `xml:"styleLbl"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// ColorsDef ...
type ColorsDef *CTColorTransform

// CTColorTransformHeader ...
type CTColorTransformHeader struct {
	XMLName      xml.Name                  `xml:"CT_ColorTransformHeader"`
	UniqueIdAttr string                    `xml:"uniqueId,attr"`
	MinVerAttr   string                    `xml:"minVer,attr,omitempty"`
	ResIdAttr    int                       `xml:"resId,attr,omitempty"`
	Title        []*CTCTName               `xml:"title"`
	Desc         []*CTCTDescription        `xml:"desc"`
	CatLst       *CTCTCategories           `xml:"catLst"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// ColorsDefHdr ...
type ColorsDefHdr *CTColorTransformHeader

// CTColorTransformHeaderLst ...
type CTColorTransformHeaderLst struct {
	XMLName      xml.Name                  `xml:"CT_ColorTransformHeaderLst"`
	ColorsDefHdr []*CTColorTransformHeader `xml:"colorsDefHdr"`
}

// ColorsDefHdrLst ...
type ColorsDefHdrLst *CTColorTransformHeaderLst

// STPtType ...
type STPtType string

const (
	STPtType_node     STPtType = "node"
	STPtType_asst     STPtType = "asst"
	STPtType_doc      STPtType = "doc"
	STPtType_pres     STPtType = "pres"
	STPtType_parTrans STPtType = "parTrans"
	STPtType_sibTrans STPtType = "sibTrans"
)

// CTPt ...
type CTPt struct {
	XMLName     xml.Name                  `xml:"CT_Pt"`
	ModelIdAttr *STModelId                `xml:"modelId,attr"`
	TypeAttr    string                    `xml:"type,attr,omitempty"`
	CxnIdAttr   *STModelId                `xml:"cxnId,attr,omitempty"`
	PrSet       *CTElemPropSet            `xml:"prSet"`
	SpPr        *CTShapeProperties        `xml:"spPr"`
	T           *CTTextBody               `xml:"t"`
	ExtLst      *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTPtList ...
type CTPtList struct {
	XMLName xml.Name `xml:"CT_PtList"`
	Pt      []*CTPt  `xml:"pt"`
}

// STCxnType ...
type STCxnType string

const (
	STCxnType_parOf               STCxnType = "parOf"
	STCxnType_presOf              STCxnType = "presOf"
	STCxnType_presParOf           STCxnType = "presParOf"
	STCxnType_unknownRelationship STCxnType = "unknownRelationship"
)

// CTCxn ...
type CTCxn struct {
	XMLName        xml.Name                  `xml:"CT_Cxn"`
	ModelIdAttr    *STModelId                `xml:"modelId,attr"`
	TypeAttr       string                    `xml:"type,attr,omitempty"`
	SrcIdAttr      *STModelId                `xml:"srcId,attr"`
	DestIdAttr     *STModelId                `xml:"destId,attr"`
	SrcOrdAttr     uint32                    `xml:"srcOrd,attr"`
	DestOrdAttr    uint32                    `xml:"destOrd,attr"`
	ParTransIdAttr *STModelId                `xml:"parTransId,attr,omitempty"`
	SibTransIdAttr *STModelId                `xml:"sibTransId,attr,omitempty"`
	PresIdAttr     string                    `xml:"presId,attr,omitempty"`
	ExtLst         *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTCxnList ...
type CTCxnList struct {
	XMLName xml.Name `xml:"CT_CxnList"`
	Cxn     []*CTCxn `xml:"cxn"`
}

// CTDataModel ...
type CTDataModel struct {
	XMLName xml.Name                  `xml:"CT_DataModel"`
	PtLst   *CTPtList                 `xml:"ptLst"`
	CxnLst  *CTCxnList                `xml:"cxnLst"`
	Bg      *CTBackgroundFormatting   `xml:"bg"`
	Whole   *CTWholeE2oFormatting     `xml:"whole"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// DataModel ...
type DataModel *CTDataModel

// AGIteratorAttributes ...
type AGIteratorAttributes struct {
	XMLName           xml.Name        `xml:"AG_IteratorAttributes"`
	AxisAttr          *STAxisTypes    `xml:"axis,attr,omitempty"`
	PtTypeAttr        *STElementTypes `xml:"ptType,attr,omitempty"`
	HideLastTransAttr *STBooleans     `xml:"hideLastTrans,attr,omitempty"`
	StAttr            *STInts         `xml:"st,attr,omitempty"`
	CntAttr           *STUnsignedInts `xml:"cnt,attr,omitempty"`
	StepAttr          *STInts         `xml:"step,attr,omitempty"`
}

// AGConstraintAttributes ...
type AGConstraintAttributes struct {
	XMLName     xml.Name `xml:"AG_ConstraintAttributes"`
	TypeAttr    string   `xml:"type,attr"`
	ForAttr     string   `xml:"for,attr,omitempty"`
	ForNameAttr string   `xml:"forName,attr,omitempty"`
	PtTypeAttr  string   `xml:"ptType,attr,omitempty"`
}

// AGConstraintRefAttributes ...
type AGConstraintRefAttributes struct {
	XMLName        xml.Name `xml:"AG_ConstraintRefAttributes"`
	RefTypeAttr    string   `xml:"refType,attr,omitempty"`
	RefForAttr     string   `xml:"refFor,attr,omitempty"`
	RefForNameAttr string   `xml:"refForName,attr,omitempty"`
	RefPtTypeAttr  string   `xml:"refPtType,attr,omitempty"`
}

// CTConstraint ...
type CTConstraint struct {
	XMLName                   xml.Name `xml:"CT_Constraint"`
	AGConstraintAttributes    *AGConstraintAttributes
	AGConstraintRefAttributes *AGConstraintRefAttributes
	OpAttr                    string                    `xml:"op,attr,omitempty"`
	ValAttr                   float64                   `xml:"val,attr,omitempty"`
	FactAttr                  float64                   `xml:"fact,attr,omitempty"`
	ExtLst                    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTConstraints ...
type CTConstraints struct {
	XMLName xml.Name        `xml:"CT_Constraints"`
	Constr  []*CTConstraint `xml:"constr"`
}

// CTNumericRule ...
type CTNumericRule struct {
	XMLName                xml.Name `xml:"CT_NumericRule"`
	AGConstraintAttributes *AGConstraintAttributes
	ValAttr                float64                   `xml:"val,attr,omitempty"`
	FactAttr               float64                   `xml:"fact,attr,omitempty"`
	MaxAttr                float64                   `xml:"max,attr,omitempty"`
	ExtLst                 *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTRules ...
type CTRules struct {
	XMLName xml.Name         `xml:"CT_Rules"`
	Rule    []*CTNumericRule `xml:"rule"`
}

// CTPresentationOf ...
type CTPresentationOf struct {
	XMLName              xml.Name `xml:"CT_PresentationOf"`
	AGIteratorAttributes *AGIteratorAttributes
	ExtLst               *CTOfficeArtExtensionList `xml:"extLst"`
}

// STLayoutShapeType ...
type STLayoutShapeType struct {
	XMLName           xml.Name `xml:"ST_LayoutShapeType"`
	STShapeType       string
	STOutputShapeType *STOutputShapeType
}

// STIndex1 ...
type STIndex1 uint32

// CTAdj ...
type CTAdj struct {
	XMLName xml.Name `xml:"CT_Adj"`
	IdxAttr uint32   `xml:"idx,attr"`
	ValAttr float64  `xml:"val,attr"`
}

// CTAdjLst ...
type CTAdjLst struct {
	XMLName xml.Name `xml:"CT_AdjLst"`
	Adj     []*CTAdj `xml:"adj"`
}

// CTShape ...
type CTShape struct {
	XMLName       xml.Name                  `xml:"CT_Shape"`
	RotAttr       float64                   `xml:"rot,attr,omitempty"`
	TypeAttr      *STLayoutShapeType        `xml:"type,attr,omitempty"`
	RBlipAttr     string                    `xml:"r:blip,attr,omitempty"`
	ZOrderOffAttr int                       `xml:"zOrderOff,attr,omitempty"`
	HideGeomAttr  bool                      `xml:"hideGeom,attr,omitempty"`
	LkTxEntryAttr bool                      `xml:"lkTxEntry,attr,omitempty"`
	BlipPhldrAttr bool                      `xml:"blipPhldr,attr,omitempty"`
	AdjLst        *CTAdjLst                 `xml:"adjLst"`
	ExtLst        *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTParameter ...
type CTParameter struct {
	XMLName  xml.Name        `xml:"CT_Parameter"`
	TypeAttr string          `xml:"type,attr"`
	ValAttr  *STParameterVal `xml:"val,attr"`
}

// CTAlgorithm ...
type CTAlgorithm struct {
	XMLName  xml.Name                  `xml:"CT_Algorithm"`
	TypeAttr string                    `xml:"type,attr"`
	RevAttr  uint32                    `xml:"rev,attr,omitempty"`
	Param    []*CTParameter            `xml:"param"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTLayoutNode ...
type CTLayoutNode struct {
	XMLName      xml.Name                     `xml:"CT_LayoutNode"`
	NameAttr     string                       `xml:"name,attr,omitempty"`
	StyleLblAttr string                       `xml:"styleLbl,attr,omitempty"`
	ChOrderAttr  string                       `xml:"chOrder,attr,omitempty"`
	MoveWithAttr string                       `xml:"moveWith,attr,omitempty"`
	Alg          *CTAlgorithm                 `xml:"alg"`
	Shape        *CTShape                     `xml:"shape"`
	PresOf       *CTPresentationOf            `xml:"presOf"`
	ConstrLst    *CTConstraints               `xml:"constrLst"`
	RuleLst      *CTRules                     `xml:"ruleLst"`
	VarLst       *CTLayoutVariablePropertySet `xml:"varLst"`
	ForEach      *CTForEach                   `xml:"forEach"`
	LayoutNode   *CTLayoutNode                `xml:"layoutNode"`
	Choose       *CTChoose                    `xml:"choose"`
	ExtLst       *CTOfficeArtExtensionList    `xml:"extLst"`
}

// CTForEach ...
type CTForEach struct {
	XMLName              xml.Name `xml:"CT_ForEach"`
	AGIteratorAttributes *AGIteratorAttributes
	NameAttr             string                    `xml:"name,attr,omitempty"`
	RefAttr              string                    `xml:"ref,attr,omitempty"`
	Alg                  *CTAlgorithm              `xml:"alg"`
	Shape                *CTShape                  `xml:"shape"`
	PresOf               *CTPresentationOf         `xml:"presOf"`
	ConstrLst            *CTConstraints            `xml:"constrLst"`
	RuleLst              *CTRules                  `xml:"ruleLst"`
	ForEach              *CTForEach                `xml:"forEach"`
	LayoutNode           *CTLayoutNode             `xml:"layoutNode"`
	Choose               *CTChoose                 `xml:"choose"`
	ExtLst               *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTWhen ...
type CTWhen struct {
	XMLName              xml.Name `xml:"CT_When"`
	AGIteratorAttributes *AGIteratorAttributes
	NameAttr             string                    `xml:"name,attr,omitempty"`
	FuncAttr             string                    `xml:"func,attr"`
	ArgAttr              *STFunctionArgument       `xml:"arg,attr,omitempty"`
	OpAttr               string                    `xml:"op,attr"`
	ValAttr              *STFunctionValue          `xml:"val,attr"`
	Alg                  *CTAlgorithm              `xml:"alg"`
	Shape                *CTShape                  `xml:"shape"`
	PresOf               *CTPresentationOf         `xml:"presOf"`
	ConstrLst            *CTConstraints            `xml:"constrLst"`
	RuleLst              *CTRules                  `xml:"ruleLst"`
	ForEach              *CTForEach                `xml:"forEach"`
	LayoutNode           *CTLayoutNode             `xml:"layoutNode"`
	Choose               *CTChoose                 `xml:"choose"`
	ExtLst               *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTOtherwise ...
type CTOtherwise struct {
	XMLName    xml.Name                  `xml:"CT_Otherwise"`
	NameAttr   string                    `xml:"name,attr,omitempty"`
	Alg        *CTAlgorithm              `xml:"alg"`
	Shape      *CTShape                  `xml:"shape"`
	PresOf     *CTPresentationOf         `xml:"presOf"`
	ConstrLst  *CTConstraints            `xml:"constrLst"`
	RuleLst    *CTRules                  `xml:"ruleLst"`
	ForEach    *CTForEach                `xml:"forEach"`
	LayoutNode *CTLayoutNode             `xml:"layoutNode"`
	Choose     *CTChoose                 `xml:"choose"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTChoose ...
type CTChoose struct {
	XMLName  xml.Name     `xml:"CT_Choose"`
	NameAttr string       `xml:"name,attr,omitempty"`
	If       []*CTWhen    `xml:"if"`
	Else     *CTOtherwise `xml:"else"`
}

// CTSampleData ...
type CTSampleData struct {
	XMLName    xml.Name     `xml:"CT_SampleData"`
	UseDefAttr bool         `xml:"useDef,attr,omitempty"`
	DataModel  *CTDataModel `xml:"dataModel"`
}

// CTCategory ...
type CTCategory struct {
	XMLName  xml.Name `xml:"CT_Category"`
	TypeAttr string   `xml:"type,attr"`
	PriAttr  uint32   `xml:"pri,attr"`
}

// CTCategories ...
type CTCategories struct {
	XMLName xml.Name      `xml:"CT_Categories"`
	Cat     []*CTCategory `xml:"cat"`
}

// CTName ...
type CTName struct {
	XMLName  xml.Name `xml:"CT_Name"`
	LangAttr string   `xml:"lang,attr,omitempty"`
	ValAttr  string   `xml:"val,attr"`
}

// CTDescription ...
type CTDescription struct {
	XMLName  xml.Name `xml:"CT_Description"`
	LangAttr string   `xml:"lang,attr,omitempty"`
	ValAttr  string   `xml:"val,attr"`
}

// CTDiagramDefinition ...
type CTDiagramDefinition struct {
	XMLName      xml.Name                  `xml:"CT_DiagramDefinition"`
	UniqueIdAttr string                    `xml:"uniqueId,attr,omitempty"`
	MinVerAttr   string                    `xml:"minVer,attr,omitempty"`
	DefStyleAttr string                    `xml:"defStyle,attr,omitempty"`
	Title        []*CTName                 `xml:"title"`
	Desc         []*CTDescription          `xml:"desc"`
	CatLst       *CTCategories             `xml:"catLst"`
	SampData     *CTSampleData             `xml:"sampData"`
	StyleData    *CTSampleData             `xml:"styleData"`
	ClrData      *CTSampleData             `xml:"clrData"`
	LayoutNode   *CTLayoutNode             `xml:"layoutNode"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// LayoutDef ...
type LayoutDef *CTDiagramDefinition

// CTDiagramDefinitionHeader ...
type CTDiagramDefinitionHeader struct {
	XMLName      xml.Name                  `xml:"CT_DiagramDefinitionHeader"`
	UniqueIdAttr string                    `xml:"uniqueId,attr"`
	MinVerAttr   string                    `xml:"minVer,attr,omitempty"`
	DefStyleAttr string                    `xml:"defStyle,attr,omitempty"`
	ResIdAttr    int                       `xml:"resId,attr,omitempty"`
	Title        []*CTName                 `xml:"title"`
	Desc         []*CTDescription          `xml:"desc"`
	CatLst       *CTCategories             `xml:"catLst"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// LayoutDefHdr ...
type LayoutDefHdr *CTDiagramDefinitionHeader

// CTDiagramDefinitionHeaderLst ...
type CTDiagramDefinitionHeaderLst struct {
	XMLName      xml.Name                     `xml:"CT_DiagramDefinitionHeaderLst"`
	LayoutDefHdr []*CTDiagramDefinitionHeader `xml:"layoutDefHdr"`
}

// LayoutDefHdrLst ...
type LayoutDefHdrLst *CTDiagramDefinitionHeaderLst

// CTRelIds ...
type CTRelIds struct {
	XMLName xml.Name `xml:"CT_RelIds"`
	RDmAttr string   `xml:"r:dm,attr"`
	RLoAttr string   `xml:"r:lo,attr"`
	RQsAttr string   `xml:"r:qs,attr"`
	RCsAttr string   `xml:"r:cs,attr"`
}

// RelIds ...
type RelIds *CTRelIds

// STParameterVal ...
type STParameterVal struct {
	XMLName                      xml.Name `xml:"ST_ParameterVal"`
	STStartingElement            *STStartingElement
	STConnectorDimension         *STConnectorDimension
	STNodeVerticalAlignment      *STNodeVerticalAlignment
	Double                       float64
	STSecondaryChildAlignment    *STSecondaryChildAlignment
	STNodeHorizontalAlignment    *STNodeHorizontalAlignment
	STTextAnchorHorizontal       *STTextAnchorHorizontal
	STDiagramHorizontalAlignment *STDiagramHorizontalAlignment
	STVerticalAlignment          *STVerticalAlignment
	STConnectorRouting           *STConnectorRouting
	STPyramidAccentTextMargin    *STPyramidAccentTextMargin
	STFlowDirection              *STFlowDirection
	STConnectorPoint             *STConnectorPoint
	STLinearDirection            *STLinearDirection
	STBendPoint                  *STBendPoint
	STAutoTextRotation           *STAutoTextRotation
	STChildDirection             *STChildDirection
	STChildAlignment             *STChildAlignment
	STFallbackDimension          *STFallbackDimension
	STContinueDirection          *STContinueDirection
	STHierarchyAlignment         *STHierarchyAlignment
	STSecondaryLinearDirection   *STSecondaryLinearDirection
	STPyramidAccentPosition      *STPyramidAccentPosition
	STTextBlockDirection         *STTextBlockDirection
	STOffset                     *STOffset
	String                       string
	STTextDirection              *STTextDirection
	STTextAnchorVertical         *STTextAnchorVertical
	Int                          int
	Boolean                      bool
	STArrowheadStyle             *STArrowheadStyle
	STRotationPath               *STRotationPath
	STCenterShapeMapping         *STCenterShapeMapping
	STDiagramTextAlignment       *STDiagramTextAlignment
	STGrowDirection              *STGrowDirection
	STBreakpoint                 *STBreakpoint
}

// STModelId ...
type STModelId struct {
	XMLName xml.Name `xml:"ST_ModelId"`
	Int     int
	STGuid  string
}

// STPrSetCustVal ...
type STPrSetCustVal struct {
	XMLName      xml.Name `xml:"ST_PrSetCustVal"`
	STPercentage string
	Int          int
}

// CTElemPropSet ...
type CTElemPropSet struct {
	XMLName                  xml.Name                     `xml:"CT_ElemPropSet"`
	PresAssocIDAttr          *STModelId                   `xml:"presAssocID,attr,omitempty"`
	PresNameAttr             string                       `xml:"presName,attr,omitempty"`
	PresStyleLblAttr         string                       `xml:"presStyleLbl,attr,omitempty"`
	PresStyleIdxAttr         int                          `xml:"presStyleIdx,attr,omitempty"`
	PresStyleCntAttr         int                          `xml:"presStyleCnt,attr,omitempty"`
	LoTypeIdAttr             string                       `xml:"loTypeId,attr,omitempty"`
	LoCatIdAttr              string                       `xml:"loCatId,attr,omitempty"`
	QsTypeIdAttr             string                       `xml:"qsTypeId,attr,omitempty"`
	QsCatIdAttr              string                       `xml:"qsCatId,attr,omitempty"`
	CsTypeIdAttr             string                       `xml:"csTypeId,attr,omitempty"`
	CsCatIdAttr              string                       `xml:"csCatId,attr,omitempty"`
	Coherent3DOffAttr        bool                         `xml:"coherent3DOff,attr,omitempty"`
	PhldrTAttr               string                       `xml:"phldrT,attr,omitempty"`
	PhldrAttr                bool                         `xml:"phldr,attr,omitempty"`
	CustAngAttr              int                          `xml:"custAng,attr,omitempty"`
	CustFlipVertAttr         bool                         `xml:"custFlipVert,attr,omitempty"`
	CustFlipHorAttr          bool                         `xml:"custFlipHor,attr,omitempty"`
	CustSzXAttr              int                          `xml:"custSzX,attr,omitempty"`
	CustSzYAttr              int                          `xml:"custSzY,attr,omitempty"`
	CustScaleXAttr           *STPrSetCustVal              `xml:"custScaleX,attr,omitempty"`
	CustScaleYAttr           *STPrSetCustVal              `xml:"custScaleY,attr,omitempty"`
	CustTAttr                bool                         `xml:"custT,attr,omitempty"`
	CustLinFactXAttr         *STPrSetCustVal              `xml:"custLinFactX,attr,omitempty"`
	CustLinFactYAttr         *STPrSetCustVal              `xml:"custLinFactY,attr,omitempty"`
	CustLinFactNeighborXAttr *STPrSetCustVal              `xml:"custLinFactNeighborX,attr,omitempty"`
	CustLinFactNeighborYAttr *STPrSetCustVal              `xml:"custLinFactNeighborY,attr,omitempty"`
	CustRadScaleRadAttr      *STPrSetCustVal              `xml:"custRadScaleRad,attr,omitempty"`
	CustRadScaleIncAttr      *STPrSetCustVal              `xml:"custRadScaleInc,attr,omitempty"`
	PresLayoutVars           *CTLayoutVariablePropertySet `xml:"presLayoutVars"`
	Style                    *CTShapeStyle                `xml:"style"`
}

// STDirection ...
type STDirection string

const (
	STDirection_norm STDirection = "norm"
	STDirection_rev  STDirection = "rev"
)

// STHierBranchStyle ...
type STHierBranchStyle string

const (
	STHierBranchStyle_l    STHierBranchStyle = "l"
	STHierBranchStyle_r    STHierBranchStyle = "r"
	STHierBranchStyle_hang STHierBranchStyle = "hang"
	STHierBranchStyle_std  STHierBranchStyle = "std"
	STHierBranchStyle_init STHierBranchStyle = "init"
)

// STAnimOneStr ...
type STAnimOneStr string

const (
	STAnimOneStr_none   STAnimOneStr = "none"
	STAnimOneStr_one    STAnimOneStr = "one"
	STAnimOneStr_branch STAnimOneStr = "branch"
)

// STAnimLvlStr ...
type STAnimLvlStr string

const (
	STAnimLvlStr_none STAnimLvlStr = "none"
	STAnimLvlStr_lvl  STAnimLvlStr = "lvl"
	STAnimLvlStr_ctr  STAnimLvlStr = "ctr"
)

// CTOrgChart ...
type CTOrgChart struct {
	XMLName xml.Name `xml:"CT_OrgChart"`
	ValAttr bool     `xml:"val,attr,omitempty"`
}

// STNodeCount ...
type STNodeCount int

// CTChildMax ...
type CTChildMax struct {
	XMLName xml.Name `xml:"CT_ChildMax"`
	ValAttr int      `xml:"val,attr,omitempty"`
}

// CTChildPref ...
type CTChildPref struct {
	XMLName xml.Name `xml:"CT_ChildPref"`
	ValAttr int      `xml:"val,attr,omitempty"`
}

// CTBulletEnabled ...
type CTBulletEnabled struct {
	XMLName xml.Name `xml:"CT_BulletEnabled"`
	ValAttr bool     `xml:"val,attr,omitempty"`
}

// CTDirection ...
type CTDirection struct {
	XMLName xml.Name `xml:"CT_Direction"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTHierBranchStyle ...
type CTHierBranchStyle struct {
	XMLName xml.Name `xml:"CT_HierBranchStyle"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTAnimOne ...
type CTAnimOne struct {
	XMLName xml.Name `xml:"CT_AnimOne"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTAnimLvl ...
type CTAnimLvl struct {
	XMLName xml.Name `xml:"CT_AnimLvl"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// STResizeHandlesStr ...
type STResizeHandlesStr string

const (
	STResizeHandlesStr_exact STResizeHandlesStr = "exact"
	STResizeHandlesStr_rel   STResizeHandlesStr = "rel"
)

// CTResizeHandles ...
type CTResizeHandles struct {
	XMLName xml.Name `xml:"CT_ResizeHandles"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTLayoutVariablePropertySet ...
type CTLayoutVariablePropertySet struct {
	XMLName       xml.Name           `xml:"CT_LayoutVariablePropertySet"`
	OrgChart      *CTOrgChart        `xml:"orgChart"`
	ChMax         *CTChildMax        `xml:"chMax"`
	ChPref        *CTChildPref       `xml:"chPref"`
	BulletEnabled *CTBulletEnabled   `xml:"bulletEnabled"`
	Dir           *CTDirection       `xml:"dir"`
	HierBranch    *CTHierBranchStyle `xml:"hierBranch"`
	AnimOne       *CTAnimOne         `xml:"animOne"`
	AnimLvl       *CTAnimLvl         `xml:"animLvl"`
	ResizeHandles *CTResizeHandles   `xml:"resizeHandles"`
}

// CTSDName ...
type CTSDName struct {
	XMLName  xml.Name `xml:"CT_SDName"`
	LangAttr string   `xml:"lang,attr,omitempty"`
	ValAttr  string   `xml:"val,attr"`
}

// CTSDDescription ...
type CTSDDescription struct {
	XMLName  xml.Name `xml:"CT_SDDescription"`
	LangAttr string   `xml:"lang,attr,omitempty"`
	ValAttr  string   `xml:"val,attr"`
}

// CTSDCategory ...
type CTSDCategory struct {
	XMLName  xml.Name `xml:"CT_SDCategory"`
	TypeAttr string   `xml:"type,attr"`
	PriAttr  uint32   `xml:"pri,attr"`
}

// CTSDCategories ...
type CTSDCategories struct {
	XMLName xml.Name        `xml:"CT_SDCategories"`
	Cat     []*CTSDCategory `xml:"cat"`
}

// CTTextProps ...
type CTTextProps struct {
	XMLName   xml.Name `xml:"CT_TextProps"`
	AEGText3D []*EGText3D
}

// CTStyleLabel ...
type CTStyleLabel struct {
	XMLName  xml.Name                  `xml:"CT_StyleLabel"`
	NameAttr string                    `xml:"name,attr"`
	Scene3d  *CTScene3D                `xml:"scene3d"`
	Sp3d     *CTShape3D                `xml:"sp3d"`
	TxPr     *CTTextProps              `xml:"txPr"`
	Style    *CTShapeStyle             `xml:"style"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTStyleDefinition ...
type CTStyleDefinition struct {
	XMLName      xml.Name                  `xml:"CT_StyleDefinition"`
	UniqueIdAttr string                    `xml:"uniqueId,attr,omitempty"`
	MinVerAttr   string                    `xml:"minVer,attr,omitempty"`
	Title        []*CTSDName               `xml:"title"`
	Desc         []*CTSDDescription        `xml:"desc"`
	CatLst       *CTSDCategories           `xml:"catLst"`
	Scene3d      *CTScene3D                `xml:"scene3d"`
	StyleLbl     []*CTStyleLabel           `xml:"styleLbl"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// StyleDef ...
type StyleDef *CTStyleDefinition

// CTStyleDefinitionHeader ...
type CTStyleDefinitionHeader struct {
	XMLName      xml.Name                  `xml:"CT_StyleDefinitionHeader"`
	UniqueIdAttr string                    `xml:"uniqueId,attr"`
	MinVerAttr   string                    `xml:"minVer,attr,omitempty"`
	ResIdAttr    int                       `xml:"resId,attr,omitempty"`
	Title        []*CTSDName               `xml:"title"`
	Desc         []*CTSDDescription        `xml:"desc"`
	CatLst       *CTSDCategories           `xml:"catLst"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// StyleDefHdr ...
type StyleDefHdr *CTStyleDefinitionHeader

// CTStyleDefinitionHeaderLst ...
type CTStyleDefinitionHeaderLst struct {
	XMLName     xml.Name                   `xml:"CT_StyleDefinitionHeaderLst"`
	StyleDefHdr []*CTStyleDefinitionHeader `xml:"styleDefHdr"`
}

// StyleDefHdrLst ...
type StyleDefHdrLst *CTStyleDefinitionHeaderLst

// STAlgorithmType ...
type STAlgorithmType string

const (
	STAlgorithmType_composite STAlgorithmType = "composite"
	STAlgorithmType_conn      STAlgorithmType = "conn"
	STAlgorithmType_cycle     STAlgorithmType = "cycle"
	STAlgorithmType_hierChild STAlgorithmType = "hierChild"
	STAlgorithmType_hierRoot  STAlgorithmType = "hierRoot"
	STAlgorithmType_pyra      STAlgorithmType = "pyra"
	STAlgorithmType_lin       STAlgorithmType = "lin"
	STAlgorithmType_sp        STAlgorithmType = "sp"
	STAlgorithmType_tx        STAlgorithmType = "tx"
	STAlgorithmType_snake     STAlgorithmType = "snake"
)

// STAxisType ...
type STAxisType string

const (
	STAxisType_self        STAxisType = "self"
	STAxisType_ch          STAxisType = "ch"
	STAxisType_des         STAxisType = "des"
	STAxisType_desOrSelf   STAxisType = "desOrSelf"
	STAxisType_par         STAxisType = "par"
	STAxisType_ancst       STAxisType = "ancst"
	STAxisType_ancstOrSelf STAxisType = "ancstOrSelf"
	STAxisType_followSib   STAxisType = "followSib"
	STAxisType_precedSib   STAxisType = "precedSib"
	STAxisType_follow      STAxisType = "follow"
	STAxisType_preced      STAxisType = "preced"
	STAxisType_root        STAxisType = "root"
	STAxisType_none        STAxisType = "none"
)

// STAxisTypes ...
type STAxisTypes []string

// STBoolOperator ...
type STBoolOperator string

const (
	STBoolOperator_none STBoolOperator = "none"
	STBoolOperator_equ  STBoolOperator = "equ"
	STBoolOperator_gte  STBoolOperator = "gte"
	STBoolOperator_lte  STBoolOperator = "lte"
)

// STChildOrderType ...
type STChildOrderType string

const (
	STChildOrderType_b STChildOrderType = "b"
	STChildOrderType_t STChildOrderType = "t"
)

// STConstraintType ...
type STConstraintType string

const (
	STConstraintType_none          STConstraintType = "none"
	STConstraintType_alignOff      STConstraintType = "alignOff"
	STConstraintType_begMarg       STConstraintType = "begMarg"
	STConstraintType_bendDist      STConstraintType = "bendDist"
	STConstraintType_begPad        STConstraintType = "begPad"
	STConstraintType_b             STConstraintType = "b"
	STConstraintType_bMarg         STConstraintType = "bMarg"
	STConstraintType_bOff          STConstraintType = "bOff"
	STConstraintType_ctrX          STConstraintType = "ctrX"
	STConstraintType_ctrXOff       STConstraintType = "ctrXOff"
	STConstraintType_ctrY          STConstraintType = "ctrY"
	STConstraintType_ctrYOff       STConstraintType = "ctrYOff"
	STConstraintType_connDist      STConstraintType = "connDist"
	STConstraintType_diam          STConstraintType = "diam"
	STConstraintType_endMarg       STConstraintType = "endMarg"
	STConstraintType_endPad        STConstraintType = "endPad"
	STConstraintType_h             STConstraintType = "h"
	STConstraintType_hArH          STConstraintType = "hArH"
	STConstraintType_hOff          STConstraintType = "hOff"
	STConstraintType_l             STConstraintType = "l"
	STConstraintType_lMarg         STConstraintType = "lMarg"
	STConstraintType_lOff          STConstraintType = "lOff"
	STConstraintType_r             STConstraintType = "r"
	STConstraintType_rMarg         STConstraintType = "rMarg"
	STConstraintType_rOff          STConstraintType = "rOff"
	STConstraintType_primFontSz    STConstraintType = "primFontSz"
	STConstraintType_pyraAcctRatio STConstraintType = "pyraAcctRatio"
	STConstraintType_secFontSz     STConstraintType = "secFontSz"
	STConstraintType_sibSp         STConstraintType = "sibSp"
	STConstraintType_secSibSp      STConstraintType = "secSibSp"
	STConstraintType_sp            STConstraintType = "sp"
	STConstraintType_stemThick     STConstraintType = "stemThick"
	STConstraintType_t             STConstraintType = "t"
	STConstraintType_tMarg         STConstraintType = "tMarg"
	STConstraintType_tOff          STConstraintType = "tOff"
	STConstraintType_userA         STConstraintType = "userA"
	STConstraintType_userB         STConstraintType = "userB"
	STConstraintType_userC         STConstraintType = "userC"
	STConstraintType_userD         STConstraintType = "userD"
	STConstraintType_userE         STConstraintType = "userE"
	STConstraintType_userF         STConstraintType = "userF"
	STConstraintType_userG         STConstraintType = "userG"
	STConstraintType_userH         STConstraintType = "userH"
	STConstraintType_userI         STConstraintType = "userI"
	STConstraintType_userJ         STConstraintType = "userJ"
	STConstraintType_userK         STConstraintType = "userK"
	STConstraintType_userL         STConstraintType = "userL"
	STConstraintType_userM         STConstraintType = "userM"
	STConstraintType_userN         STConstraintType = "userN"
	STConstraintType_userO         STConstraintType = "userO"
	STConstraintType_userP         STConstraintType = "userP"
	STConstraintType_userQ         STConstraintType = "userQ"
	STConstraintType_userR         STConstraintType = "userR"
	STConstraintType_userS         STConstraintType = "userS"
	STConstraintType_userT         STConstraintType = "userT"
	STConstraintType_userU         STConstraintType = "userU"
	STConstraintType_userV         STConstraintType = "userV"
	STConstraintType_userW         STConstraintType = "userW"
	STConstraintType_userX         STConstraintType = "userX"
	STConstraintType_userY         STConstraintType = "userY"
	STConstraintType_userZ         STConstraintType = "userZ"
	STConstraintType_w             STConstraintType = "w"
	STConstraintType_wArH          STConstraintType = "wArH"
	STConstraintType_wOff          STConstraintType = "wOff"
)

// STConstraintRelationship ...
type STConstraintRelationship string

const (
	STConstraintRelationship_self STConstraintRelationship = "self"
	STConstraintRelationship_ch   STConstraintRelationship = "ch"
	STConstraintRelationship_des  STConstraintRelationship = "des"
)

// STElementType ...
type STElementType string

const (
	STElementType_all      STElementType = "all"
	STElementType_doc      STElementType = "doc"
	STElementType_node     STElementType = "node"
	STElementType_norm     STElementType = "norm"
	STElementType_nonNorm  STElementType = "nonNorm"
	STElementType_asst     STElementType = "asst"
	STElementType_nonAsst  STElementType = "nonAsst"
	STElementType_parTrans STElementType = "parTrans"
	STElementType_pres     STElementType = "pres"
	STElementType_sibTrans STElementType = "sibTrans"
)

// STElementTypes ...
type STElementTypes []string

// STParameterId ...
type STParameterId string

const (
	STParameterId_horzAlign        STParameterId = "horzAlign"
	STParameterId_vertAlign        STParameterId = "vertAlign"
	STParameterId_chDir            STParameterId = "chDir"
	STParameterId_chAlign          STParameterId = "chAlign"
	STParameterId_secChAlign       STParameterId = "secChAlign"
	STParameterId_linDir           STParameterId = "linDir"
	STParameterId_secLinDir        STParameterId = "secLinDir"
	STParameterId_stElem           STParameterId = "stElem"
	STParameterId_bendPt           STParameterId = "bendPt"
	STParameterId_connRout         STParameterId = "connRout"
	STParameterId_begSty           STParameterId = "begSty"
	STParameterId_endSty           STParameterId = "endSty"
	STParameterId_dim              STParameterId = "dim"
	STParameterId_rotPath          STParameterId = "rotPath"
	STParameterId_ctrShpMap        STParameterId = "ctrShpMap"
	STParameterId_nodeHorzAlign    STParameterId = "nodeHorzAlign"
	STParameterId_nodeVertAlign    STParameterId = "nodeVertAlign"
	STParameterId_fallback         STParameterId = "fallback"
	STParameterId_txDir            STParameterId = "txDir"
	STParameterId_pyraAcctPos      STParameterId = "pyraAcctPos"
	STParameterId_pyraAcctTxMar    STParameterId = "pyraAcctTxMar"
	STParameterId_txBlDir          STParameterId = "txBlDir"
	STParameterId_txAnchorHorz     STParameterId = "txAnchorHorz"
	STParameterId_txAnchorVert     STParameterId = "txAnchorVert"
	STParameterId_txAnchorHorzCh   STParameterId = "txAnchorHorzCh"
	STParameterId_txAnchorVertCh   STParameterId = "txAnchorVertCh"
	STParameterId_parTxLTRAlign    STParameterId = "parTxLTRAlign"
	STParameterId_parTxRTLAlign    STParameterId = "parTxRTLAlign"
	STParameterId_shpTxLTRAlignCh  STParameterId = "shpTxLTRAlignCh"
	STParameterId_shpTxRTLAlignCh  STParameterId = "shpTxRTLAlignCh"
	STParameterId_autoTxRot        STParameterId = "autoTxRot"
	STParameterId_grDir            STParameterId = "grDir"
	STParameterId_flowDir          STParameterId = "flowDir"
	STParameterId_contDir          STParameterId = "contDir"
	STParameterId_bkpt             STParameterId = "bkpt"
	STParameterId_off              STParameterId = "off"
	STParameterId_hierAlign        STParameterId = "hierAlign"
	STParameterId_bkPtFixedVal     STParameterId = "bkPtFixedVal"
	STParameterId_stBulletLvl      STParameterId = "stBulletLvl"
	STParameterId_stAng            STParameterId = "stAng"
	STParameterId_spanAng          STParameterId = "spanAng"
	STParameterId_ar               STParameterId = "ar"
	STParameterId_lnSpPar          STParameterId = "lnSpPar"
	STParameterId_lnSpAfParP       STParameterId = "lnSpAfParP"
	STParameterId_lnSpCh           STParameterId = "lnSpCh"
	STParameterId_lnSpAfChP        STParameterId = "lnSpAfChP"
	STParameterId_rtShortDist      STParameterId = "rtShortDist"
	STParameterId_alignTx          STParameterId = "alignTx"
	STParameterId_pyraLvlNode      STParameterId = "pyraLvlNode"
	STParameterId_pyraAcctBkgdNode STParameterId = "pyraAcctBkgdNode"
	STParameterId_pyraAcctTxNode   STParameterId = "pyraAcctTxNode"
	STParameterId_srcNode          STParameterId = "srcNode"
	STParameterId_dstNode          STParameterId = "dstNode"
	STParameterId_begPts           STParameterId = "begPts"
	STParameterId_endPts           STParameterId = "endPts"
)

// STInts ...
type STInts []int

// STUnsignedInts ...
type STUnsignedInts []uint32

// STBooleans ...
type STBooleans []bool

// STFunctionType ...
type STFunctionType string

const (
	STFunctionType_cnt      STFunctionType = "cnt"
	STFunctionType_pos      STFunctionType = "pos"
	STFunctionType_revPos   STFunctionType = "revPos"
	STFunctionType_posEven  STFunctionType = "posEven"
	STFunctionType_posOdd   STFunctionType = "posOdd"
	STFunctionType_var      STFunctionType = "var"
	STFunctionType_depth    STFunctionType = "depth"
	STFunctionType_maxDepth STFunctionType = "maxDepth"
)

// STFunctionOperator ...
type STFunctionOperator string

const (
	STFunctionOperator_equ STFunctionOperator = "equ"
	STFunctionOperator_neq STFunctionOperator = "neq"
	STFunctionOperator_gt  STFunctionOperator = "gt"
	STFunctionOperator_lt  STFunctionOperator = "lt"
	STFunctionOperator_gte STFunctionOperator = "gte"
	STFunctionOperator_lte STFunctionOperator = "lte"
)

// STDiagramHorizontalAlignment ...
type STDiagramHorizontalAlignment string

const (
	STDiagramHorizontalAlignment_l    STDiagramHorizontalAlignment = "l"
	STDiagramHorizontalAlignment_ctr  STDiagramHorizontalAlignment = "ctr"
	STDiagramHorizontalAlignment_r    STDiagramHorizontalAlignment = "r"
	STDiagramHorizontalAlignment_none STDiagramHorizontalAlignment = "none"
)

// STVerticalAlignment ...
type STVerticalAlignment string

const (
	STVerticalAlignment_t    STVerticalAlignment = "t"
	STVerticalAlignment_mid  STVerticalAlignment = "mid"
	STVerticalAlignment_b    STVerticalAlignment = "b"
	STVerticalAlignment_none STVerticalAlignment = "none"
)

// STChildDirection ...
type STChildDirection string

const (
	STChildDirection_horz STChildDirection = "horz"
	STChildDirection_vert STChildDirection = "vert"
)

// STChildAlignment ...
type STChildAlignment string

const (
	STChildAlignment_t STChildAlignment = "t"
	STChildAlignment_b STChildAlignment = "b"
	STChildAlignment_l STChildAlignment = "l"
	STChildAlignment_r STChildAlignment = "r"
)

// STSecondaryChildAlignment ...
type STSecondaryChildAlignment string

const (
	STSecondaryChildAlignment_none STSecondaryChildAlignment = "none"
	STSecondaryChildAlignment_t    STSecondaryChildAlignment = "t"
	STSecondaryChildAlignment_b    STSecondaryChildAlignment = "b"
	STSecondaryChildAlignment_l    STSecondaryChildAlignment = "l"
	STSecondaryChildAlignment_r    STSecondaryChildAlignment = "r"
)

// STLinearDirection ...
type STLinearDirection string

const (
	STLinearDirection_fromL STLinearDirection = "fromL"
	STLinearDirection_fromR STLinearDirection = "fromR"
	STLinearDirection_fromT STLinearDirection = "fromT"
	STLinearDirection_fromB STLinearDirection = "fromB"
)

// STSecondaryLinearDirection ...
type STSecondaryLinearDirection string

const (
	STSecondaryLinearDirection_none  STSecondaryLinearDirection = "none"
	STSecondaryLinearDirection_fromL STSecondaryLinearDirection = "fromL"
	STSecondaryLinearDirection_fromR STSecondaryLinearDirection = "fromR"
	STSecondaryLinearDirection_fromT STSecondaryLinearDirection = "fromT"
	STSecondaryLinearDirection_fromB STSecondaryLinearDirection = "fromB"
)

// STStartingElement ...
type STStartingElement string

const (
	STStartingElement_node  STStartingElement = "node"
	STStartingElement_trans STStartingElement = "trans"
)

// STRotationPath ...
type STRotationPath string

const (
	STRotationPath_none      STRotationPath = "none"
	STRotationPath_alongPath STRotationPath = "alongPath"
)

// STCenterShapeMapping ...
type STCenterShapeMapping string

const (
	STCenterShapeMapping_none  STCenterShapeMapping = "none"
	STCenterShapeMapping_fNode STCenterShapeMapping = "fNode"
)

// STBendPoint ...
type STBendPoint string

const (
	STBendPoint_beg STBendPoint = "beg"
	STBendPoint_def STBendPoint = "def"
	STBendPoint_end STBendPoint = "end"
)

// STConnectorRouting ...
type STConnectorRouting string

const (
	STConnectorRouting_stra      STConnectorRouting = "stra"
	STConnectorRouting_bend      STConnectorRouting = "bend"
	STConnectorRouting_curve     STConnectorRouting = "curve"
	STConnectorRouting_longCurve STConnectorRouting = "longCurve"
)

// STArrowheadStyle ...
type STArrowheadStyle string

const (
	STArrowheadStyle_auto  STArrowheadStyle = "auto"
	STArrowheadStyle_arr   STArrowheadStyle = "arr"
	STArrowheadStyle_noArr STArrowheadStyle = "noArr"
)

// STConnectorDimension ...
type STConnectorDimension string

const (
	STConnectorDimension_1D   STConnectorDimension = "1D"
	STConnectorDimension_2D   STConnectorDimension = "2D"
	STConnectorDimension_cust STConnectorDimension = "cust"
)

// STConnectorPoint ...
type STConnectorPoint string

const (
	STConnectorPoint_auto   STConnectorPoint = "auto"
	STConnectorPoint_bCtr   STConnectorPoint = "bCtr"
	STConnectorPoint_ctr    STConnectorPoint = "ctr"
	STConnectorPoint_midL   STConnectorPoint = "midL"
	STConnectorPoint_midR   STConnectorPoint = "midR"
	STConnectorPoint_tCtr   STConnectorPoint = "tCtr"
	STConnectorPoint_bL     STConnectorPoint = "bL"
	STConnectorPoint_bR     STConnectorPoint = "bR"
	STConnectorPoint_tL     STConnectorPoint = "tL"
	STConnectorPoint_tR     STConnectorPoint = "tR"
	STConnectorPoint_radial STConnectorPoint = "radial"
)

// STNodeHorizontalAlignment ...
type STNodeHorizontalAlignment string

const (
	STNodeHorizontalAlignment_l   STNodeHorizontalAlignment = "l"
	STNodeHorizontalAlignment_ctr STNodeHorizontalAlignment = "ctr"
	STNodeHorizontalAlignment_r   STNodeHorizontalAlignment = "r"
)

// STNodeVerticalAlignment ...
type STNodeVerticalAlignment string

const (
	STNodeVerticalAlignment_t   STNodeVerticalAlignment = "t"
	STNodeVerticalAlignment_mid STNodeVerticalAlignment = "mid"
	STNodeVerticalAlignment_b   STNodeVerticalAlignment = "b"
)

// STFallbackDimension ...
type STFallbackDimension string

const (
	STFallbackDimension_1D STFallbackDimension = "1D"
	STFallbackDimension_2D STFallbackDimension = "2D"
)

// STTextDirection ...
type STTextDirection string

const (
	STTextDirection_fromT STTextDirection = "fromT"
	STTextDirection_fromB STTextDirection = "fromB"
)

// STPyramidAccentPosition ...
type STPyramidAccentPosition string

const (
	STPyramidAccentPosition_bef STPyramidAccentPosition = "bef"
	STPyramidAccentPosition_aft STPyramidAccentPosition = "aft"
)

// STPyramidAccentTextMargin ...
type STPyramidAccentTextMargin string

const (
	STPyramidAccentTextMargin_step  STPyramidAccentTextMargin = "step"
	STPyramidAccentTextMargin_stack STPyramidAccentTextMargin = "stack"
)

// STTextBlockDirection ...
type STTextBlockDirection string

const (
	STTextBlockDirection_horz STTextBlockDirection = "horz"
	STTextBlockDirection_vert STTextBlockDirection = "vert"
)

// STTextAnchorHorizontal ...
type STTextAnchorHorizontal string

const (
	STTextAnchorHorizontal_none STTextAnchorHorizontal = "none"
	STTextAnchorHorizontal_ctr  STTextAnchorHorizontal = "ctr"
)

// STTextAnchorVertical ...
type STTextAnchorVertical string

const (
	STTextAnchorVertical_t   STTextAnchorVertical = "t"
	STTextAnchorVertical_mid STTextAnchorVertical = "mid"
	STTextAnchorVertical_b   STTextAnchorVertical = "b"
)

// STDiagramTextAlignment ...
type STDiagramTextAlignment string

const (
	STDiagramTextAlignment_l   STDiagramTextAlignment = "l"
	STDiagramTextAlignment_ctr STDiagramTextAlignment = "ctr"
	STDiagramTextAlignment_r   STDiagramTextAlignment = "r"
)

// STAutoTextRotation ...
type STAutoTextRotation string

const (
	STAutoTextRotation_none STAutoTextRotation = "none"
	STAutoTextRotation_upr  STAutoTextRotation = "upr"
	STAutoTextRotation_grav STAutoTextRotation = "grav"
)

// STGrowDirection ...
type STGrowDirection string

const (
	STGrowDirection_tL STGrowDirection = "tL"
	STGrowDirection_tR STGrowDirection = "tR"
	STGrowDirection_bL STGrowDirection = "bL"
	STGrowDirection_bR STGrowDirection = "bR"
)

// STFlowDirection ...
type STFlowDirection string

const (
	STFlowDirection_row STFlowDirection = "row"
	STFlowDirection_col STFlowDirection = "col"
)

// STContinueDirection ...
type STContinueDirection string

const (
	STContinueDirection_revDir  STContinueDirection = "revDir"
	STContinueDirection_sameDir STContinueDirection = "sameDir"
)

// STBreakpoint ...
type STBreakpoint string

const (
	STBreakpoint_endCnv STBreakpoint = "endCnv"
	STBreakpoint_bal    STBreakpoint = "bal"
	STBreakpoint_fixed  STBreakpoint = "fixed"
)

// STOffset ...
type STOffset string

const (
	STOffset_ctr STOffset = "ctr"
	STOffset_off STOffset = "off"
)

// STHierarchyAlignment ...
type STHierarchyAlignment string

const (
	STHierarchyAlignment_tL      STHierarchyAlignment = "tL"
	STHierarchyAlignment_tR      STHierarchyAlignment = "tR"
	STHierarchyAlignment_tCtrCh  STHierarchyAlignment = "tCtrCh"
	STHierarchyAlignment_tCtrDes STHierarchyAlignment = "tCtrDes"
	STHierarchyAlignment_bL      STHierarchyAlignment = "bL"
	STHierarchyAlignment_bR      STHierarchyAlignment = "bR"
	STHierarchyAlignment_bCtrCh  STHierarchyAlignment = "bCtrCh"
	STHierarchyAlignment_bCtrDes STHierarchyAlignment = "bCtrDes"
	STHierarchyAlignment_lT      STHierarchyAlignment = "lT"
	STHierarchyAlignment_lB      STHierarchyAlignment = "lB"
	STHierarchyAlignment_lCtrCh  STHierarchyAlignment = "lCtrCh"
	STHierarchyAlignment_lCtrDes STHierarchyAlignment = "lCtrDes"
	STHierarchyAlignment_rT      STHierarchyAlignment = "rT"
	STHierarchyAlignment_rB      STHierarchyAlignment = "rB"
	STHierarchyAlignment_rCtrCh  STHierarchyAlignment = "rCtrCh"
	STHierarchyAlignment_rCtrDes STHierarchyAlignment = "rCtrDes"
)

// STFunctionValue ...
type STFunctionValue struct {
	XMLName            xml.Name `xml:"ST_FunctionValue"`
	STAnimOneStr       string
	STAnimLvlStr       string
	STResizeHandlesStr string
	Int                int
	Boolean            bool
	STDirection        string
	STHierBranchStyle  string
}

// STVariableType ...
type STVariableType string

const (
	STVariableType_none          STVariableType = "none"
	STVariableType_orgChart      STVariableType = "orgChart"
	STVariableType_chMax         STVariableType = "chMax"
	STVariableType_chPref        STVariableType = "chPref"
	STVariableType_bulEnabled    STVariableType = "bulEnabled"
	STVariableType_dir           STVariableType = "dir"
	STVariableType_hierBranch    STVariableType = "hierBranch"
	STVariableType_animOne       STVariableType = "animOne"
	STVariableType_animLvl       STVariableType = "animLvl"
	STVariableType_resizeHandles STVariableType = "resizeHandles"
)

// STFunctionArgument ...
type STFunctionArgument struct {
	XMLName        xml.Name `xml:"ST_FunctionArgument"`
	STVariableType string
}

// STOutputShapeType ...
type STOutputShapeType string

const (
	STOutputShapeType_none STOutputShapeType = "none"
	STOutputShapeType_conn STOutputShapeType = "conn"
)
