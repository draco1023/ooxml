// Code generated by xgen. DO NOT EDIT.

package ooxml

import (
	"encoding/xml"
	"time"
)

// STTransitionSideDirectionType ...
type STTransitionSideDirectionType string

const (
	STTransitionSideDirectionType_l STTransitionSideDirectionType = "l"
	STTransitionSideDirectionType_u STTransitionSideDirectionType = "u"
	STTransitionSideDirectionType_r STTransitionSideDirectionType = "r"
	STTransitionSideDirectionType_d STTransitionSideDirectionType = "d"
)

// STTransitionCornerDirectionType ...
type STTransitionCornerDirectionType string

const (
	STTransitionCornerDirectionType_lu STTransitionCornerDirectionType = "lu"
	STTransitionCornerDirectionType_ru STTransitionCornerDirectionType = "ru"
	STTransitionCornerDirectionType_ld STTransitionCornerDirectionType = "ld"
	STTransitionCornerDirectionType_rd STTransitionCornerDirectionType = "rd"
)

// STTransitionInOutDirectionType ...
type STTransitionInOutDirectionType string

const (
	STTransitionInOutDirectionType_out STTransitionInOutDirectionType = "out"
	STTransitionInOutDirectionType_in  STTransitionInOutDirectionType = "in"
)

// CTSideDirectionTransition ...
type CTSideDirectionTransition struct {
	XMLName xml.Name `xml:"CT_SideDirectionTransition"`
	DirAttr string   `xml:"dir,attr,omitempty"`
}

// CTCornerDirectionTransition ...
type CTCornerDirectionTransition struct {
	XMLName xml.Name `xml:"CT_CornerDirectionTransition"`
	DirAttr string   `xml:"dir,attr,omitempty"`
}

// STTransitionEightDirectionType ...
type STTransitionEightDirectionType struct {
	XMLName                         xml.Name `xml:"ST_TransitionEightDirectionType"`
	STTransitionSideDirectionType   string
	STTransitionCornerDirectionType string
}

// CTEightDirectionTransition ...
type CTEightDirectionTransition struct {
	XMLName xml.Name                        `xml:"CT_EightDirectionTransition"`
	DirAttr *STTransitionEightDirectionType `xml:"dir,attr,omitempty"`
}

// CTOrientationTransition ...
type CTOrientationTransition struct {
	XMLName xml.Name `xml:"CT_OrientationTransition"`
	DirAttr string   `xml:"dir,attr,omitempty"`
}

// CTInOutTransition ...
type CTInOutTransition struct {
	XMLName xml.Name `xml:"CT_InOutTransition"`
	DirAttr string   `xml:"dir,attr,omitempty"`
}

// CTOptionalBlackTransition ...
type CTOptionalBlackTransition struct {
	XMLName     xml.Name `xml:"CT_OptionalBlackTransition"`
	ThruBlkAttr bool     `xml:"thruBlk,attr,omitempty"`
}

// CTSplitTransition ...
type CTSplitTransition struct {
	XMLName    xml.Name `xml:"CT_SplitTransition"`
	OrientAttr string   `xml:"orient,attr,omitempty"`
	DirAttr    string   `xml:"dir,attr,omitempty"`
}

// CTWheelTransition ...
type CTWheelTransition struct {
	XMLName    xml.Name `xml:"CT_WheelTransition"`
	SpokesAttr uint32   `xml:"spokes,attr,omitempty"`
}

// CTTransitionStartSoundAction ...
type CTTransitionStartSoundAction struct {
	XMLName  xml.Name                `xml:"CT_TransitionStartSoundAction"`
	LoopAttr bool                    `xml:"loop,attr,omitempty"`
	Snd      *CTEmbeddedWAVAudioFile `xml:"snd"`
}

// CTTransitionSoundAction ...
type CTTransitionSoundAction struct {
	XMLName xml.Name                      `xml:"CT_TransitionSoundAction"`
	StSnd   *CTTransitionStartSoundAction `xml:"stSnd"`
	EndSnd  *CTEmpty                      `xml:"endSnd"`
}

// STTransitionSpeed ...
type STTransitionSpeed string

const (
	STTransitionSpeed_slow STTransitionSpeed = "slow"
	STTransitionSpeed_med  STTransitionSpeed = "med"
	STTransitionSpeed_fast STTransitionSpeed = "fast"
)

// CTSlideTransition ...
type CTSlideTransition struct {
	XMLName      xml.Name                     `xml:"CT_SlideTransition"`
	SpdAttr      string                       `xml:"spd,attr,omitempty"`
	AdvClickAttr bool                         `xml:"advClick,attr,omitempty"`
	AdvTmAttr    uint32                       `xml:"advTm,attr,omitempty"`
	Blinds       *CTOrientationTransition     `xml:"blinds"`
	Checker      *CTOrientationTransition     `xml:"checker"`
	Circle       *CTEmpty                     `xml:"circle"`
	Dissolve     *CTEmpty                     `xml:"dissolve"`
	Comb         *CTOrientationTransition     `xml:"comb"`
	Cover        *CTEightDirectionTransition  `xml:"cover"`
	Cut          *CTOptionalBlackTransition   `xml:"cut"`
	Diamond      *CTEmpty                     `xml:"diamond"`
	Fade         *CTOptionalBlackTransition   `xml:"fade"`
	Newsflash    *CTEmpty                     `xml:"newsflash"`
	Plus         *CTEmpty                     `xml:"plus"`
	Pull         *CTEightDirectionTransition  `xml:"pull"`
	Push         *CTSideDirectionTransition   `xml:"push"`
	Random       *CTEmpty                     `xml:"random"`
	RandomBar    *CTOrientationTransition     `xml:"randomBar"`
	Split        *CTSplitTransition           `xml:"split"`
	Strips       *CTCornerDirectionTransition `xml:"strips"`
	Wedge        *CTEmpty                     `xml:"wedge"`
	Wheel        *CTWheelTransition           `xml:"wheel"`
	Wipe         *CTSideDirectionTransition   `xml:"wipe"`
	Zoom         *CTInOutTransition           `xml:"zoom"`
	SndAc        *CTTransitionSoundAction     `xml:"sndAc"`
	ExtLst       *CTExtensionListModify       `xml:"extLst"`
}

// STTLTimeIndefinite ...
type STTLTimeIndefinite string

const (
	STTLTimeIndefinite_indefinite STTLTimeIndefinite = "indefinite"
)

// STTLTime ...
type STTLTime struct {
	XMLName            xml.Name `xml:"ST_TLTime"`
	UnsignedInt        uint32
	STTLTimeIndefinite string
}

// STTLTimeNodeID ...
type STTLTimeNodeID uint32

// CTTLIterateIntervalTime ...
type CTTLIterateIntervalTime struct {
	XMLName xml.Name  `xml:"CT_TLIterateIntervalTime"`
	ValAttr *STTLTime `xml:"val,attr"`
}

// CTTLIterateIntervalPercentage ...
type CTTLIterateIntervalPercentage struct {
	XMLName xml.Name              `xml:"CT_TLIterateIntervalPercentage"`
	ValAttr *STPositivePercentage `xml:"val,attr"`
}

// STIterateType ...
type STIterateType string

const (
	STIterateType_el STIterateType = "el"
	STIterateType_wd STIterateType = "wd"
	STIterateType_lt STIterateType = "lt"
)

// CTTLIterateData ...
type CTTLIterateData struct {
	XMLName       xml.Name                       `xml:"CT_TLIterateData"`
	TypeAttr      string                         `xml:"type,attr,omitempty"`
	BackwardsAttr bool                           `xml:"backwards,attr,omitempty"`
	TmAbs         *CTTLIterateIntervalTime       `xml:"tmAbs"`
	TmPct         *CTTLIterateIntervalPercentage `xml:"tmPct"`
}

// CTTLSubShapeId ...
type CTTLSubShapeId struct {
	XMLName  xml.Name `xml:"CT_TLSubShapeId"`
	SpidAttr string   `xml:"spid,attr"`
}

// CTTLTextTargetElement ...
type CTTLTextTargetElement struct {
	XMLName xml.Name      `xml:"CT_TLTextTargetElement"`
	CharRg  *CTIndexRange `xml:"charRg"`
	PRg     *CTIndexRange `xml:"pRg"`
}

// STTLChartSubelementType ...
type STTLChartSubelementType string

const (
	STTLChartSubelementType_gridLegend   STTLChartSubelementType = "gridLegend"
	STTLChartSubelementType_series       STTLChartSubelementType = "series"
	STTLChartSubelementType_category     STTLChartSubelementType = "category"
	STTLChartSubelementType_ptInSeries   STTLChartSubelementType = "ptInSeries"
	STTLChartSubelementType_ptInCategory STTLChartSubelementType = "ptInCategory"
)

// CTTLOleChartTargetElement ...
type CTTLOleChartTargetElement struct {
	XMLName  xml.Name `xml:"CT_TLOleChartTargetElement"`
	TypeAttr string   `xml:"type,attr"`
	LvlAttr  uint32   `xml:"lvl,attr,omitempty"`
}

// CTTLShapeTargetElement ...
type CTTLShapeTargetElement struct {
	XMLName    xml.Name                   `xml:"CT_TLShapeTargetElement"`
	SpidAttr   uint32                     `xml:"spid,attr"`
	Bg         *CTEmpty                   `xml:"bg"`
	SubSp      *CTTLSubShapeId            `xml:"subSp"`
	OleChartEl *CTTLOleChartTargetElement `xml:"oleChartEl"`
	TxEl       *CTTLTextTargetElement     `xml:"txEl"`
	GraphicEl  *CTAnimationElementChoice  `xml:"graphicEl"`
}

// CTTLTimeTargetElement ...
type CTTLTimeTargetElement struct {
	XMLName xml.Name                `xml:"CT_TLTimeTargetElement"`
	SldTgt  *CTEmpty                `xml:"sldTgt"`
	SndTgt  *CTEmbeddedWAVAudioFile `xml:"sndTgt"`
	SpTgt   *CTTLShapeTargetElement `xml:"spTgt"`
	InkTgt  *CTTLSubShapeId         `xml:"inkTgt"`
}

// CTTLTriggerTimeNodeID ...
type CTTLTriggerTimeNodeID struct {
	XMLName xml.Name `xml:"CT_TLTriggerTimeNodeID"`
	ValAttr uint32   `xml:"val,attr"`
}

// STTLTriggerRuntimeNode ...
type STTLTriggerRuntimeNode string

const (
	STTLTriggerRuntimeNode_first STTLTriggerRuntimeNode = "first"
	STTLTriggerRuntimeNode_last  STTLTriggerRuntimeNode = "last"
	STTLTriggerRuntimeNode_all   STTLTriggerRuntimeNode = "all"
)

// CTTLTriggerRuntimeNode ...
type CTTLTriggerRuntimeNode struct {
	XMLName xml.Name `xml:"CT_TLTriggerRuntimeNode"`
	ValAttr string   `xml:"val,attr"`
}

// STTLTriggerEvent ...
type STTLTriggerEvent string

const (
	STTLTriggerEvent_onBegin     STTLTriggerEvent = "onBegin"
	STTLTriggerEvent_onEnd       STTLTriggerEvent = "onEnd"
	STTLTriggerEvent_begin       STTLTriggerEvent = "begin"
	STTLTriggerEvent_end         STTLTriggerEvent = "end"
	STTLTriggerEvent_onClick     STTLTriggerEvent = "onClick"
	STTLTriggerEvent_onDblClick  STTLTriggerEvent = "onDblClick"
	STTLTriggerEvent_onMouseOver STTLTriggerEvent = "onMouseOver"
	STTLTriggerEvent_onMouseOut  STTLTriggerEvent = "onMouseOut"
	STTLTriggerEvent_onNext      STTLTriggerEvent = "onNext"
	STTLTriggerEvent_onPrev      STTLTriggerEvent = "onPrev"
	STTLTriggerEvent_onStopAudio STTLTriggerEvent = "onStopAudio"
)

// CTTLTimeCondition ...
type CTTLTimeCondition struct {
	XMLName   xml.Name                `xml:"CT_TLTimeCondition"`
	EvtAttr   string                  `xml:"evt,attr,omitempty"`
	DelayAttr *STTLTime               `xml:"delay,attr,omitempty"`
	TgtEl     *CTTLTimeTargetElement  `xml:"tgtEl"`
	Tn        *CTTLTriggerTimeNodeID  `xml:"tn"`
	Rtn       *CTTLTriggerRuntimeNode `xml:"rtn"`
}

// CTTLTimeConditionList ...
type CTTLTimeConditionList struct {
	XMLName xml.Name             `xml:"CT_TLTimeConditionList"`
	Cond    []*CTTLTimeCondition `xml:"cond"`
}

// CTTimeNodeList ...
type CTTimeNodeList struct {
	XMLName    xml.Name                     `xml:"CT_TimeNodeList"`
	Par        *CTTLTimeNodeParallel        `xml:"par"`
	Seq        *CTTLTimeNodeSequence        `xml:"seq"`
	Excl       *CTTLTimeNodeExclusive       `xml:"excl"`
	Anim       *CTTLAnimateBehavior         `xml:"anim"`
	AnimClr    *CTTLAnimateColorBehavior    `xml:"animClr"`
	AnimEffect *CTTLAnimateEffectBehavior   `xml:"animEffect"`
	AnimMotion *CTTLAnimateMotionBehavior   `xml:"animMotion"`
	AnimRot    *CTTLAnimateRotationBehavior `xml:"animRot"`
	AnimScale  *CTTLAnimateScaleBehavior    `xml:"animScale"`
	Cmd        *CTTLCommandBehavior         `xml:"cmd"`
	Set        *CTTLSetBehavior             `xml:"set"`
	Audio      *CTTLMediaNodeAudio          `xml:"audio"`
	Video      *CTTLMediaNodeVideo          `xml:"video"`
}

// STTLTimeNodePresetClassType ...
type STTLTimeNodePresetClassType string

const (
	STTLTimeNodePresetClassType_entr      STTLTimeNodePresetClassType = "entr"
	STTLTimeNodePresetClassType_exit      STTLTimeNodePresetClassType = "exit"
	STTLTimeNodePresetClassType_emph      STTLTimeNodePresetClassType = "emph"
	STTLTimeNodePresetClassType_path      STTLTimeNodePresetClassType = "path"
	STTLTimeNodePresetClassType_verb      STTLTimeNodePresetClassType = "verb"
	STTLTimeNodePresetClassType_mediacall STTLTimeNodePresetClassType = "mediacall"
)

// STTLTimeNodeRestartType ...
type STTLTimeNodeRestartType string

const (
	STTLTimeNodeRestartType_always        STTLTimeNodeRestartType = "always"
	STTLTimeNodeRestartType_whenNotActive STTLTimeNodeRestartType = "whenNotActive"
	STTLTimeNodeRestartType_never         STTLTimeNodeRestartType = "never"
)

// STTLTimeNodeFillType ...
type STTLTimeNodeFillType string

const (
	STTLTimeNodeFillType_remove     STTLTimeNodeFillType = "remove"
	STTLTimeNodeFillType_freeze     STTLTimeNodeFillType = "freeze"
	STTLTimeNodeFillType_hold       STTLTimeNodeFillType = "hold"
	STTLTimeNodeFillType_transition STTLTimeNodeFillType = "transition"
)

// STTLTimeNodeSyncType ...
type STTLTimeNodeSyncType string

const (
	STTLTimeNodeSyncType_canSlip STTLTimeNodeSyncType = "canSlip"
	STTLTimeNodeSyncType_locked  STTLTimeNodeSyncType = "locked"
)

// STTLTimeNodeMasterRelation ...
type STTLTimeNodeMasterRelation string

const (
	STTLTimeNodeMasterRelation_sameClick STTLTimeNodeMasterRelation = "sameClick"
	STTLTimeNodeMasterRelation_lastClick STTLTimeNodeMasterRelation = "lastClick"
	STTLTimeNodeMasterRelation_nextClick STTLTimeNodeMasterRelation = "nextClick"
)

// STTLTimeNodeType ...
type STTLTimeNodeType string

const (
	STTLTimeNodeType_clickEffect    STTLTimeNodeType = "clickEffect"
	STTLTimeNodeType_withEffect     STTLTimeNodeType = "withEffect"
	STTLTimeNodeType_afterEffect    STTLTimeNodeType = "afterEffect"
	STTLTimeNodeType_mainSeq        STTLTimeNodeType = "mainSeq"
	STTLTimeNodeType_interactiveSeq STTLTimeNodeType = "interactiveSeq"
	STTLTimeNodeType_clickPar       STTLTimeNodeType = "clickPar"
	STTLTimeNodeType_withGroup      STTLTimeNodeType = "withGroup"
	STTLTimeNodeType_afterGroup     STTLTimeNodeType = "afterGroup"
	STTLTimeNodeType_tmRoot         STTLTimeNodeType = "tmRoot"
)

// CTTLCommonTimeNodeData ...
type CTTLCommonTimeNodeData struct {
	XMLName           xml.Name                   `xml:"CT_TLCommonTimeNodeData"`
	IdAttr            uint32                     `xml:"id,attr,omitempty"`
	PresetIDAttr      int                        `xml:"presetID,attr,omitempty"`
	PresetClassAttr   string                     `xml:"presetClass,attr,omitempty"`
	PresetSubtypeAttr int                        `xml:"presetSubtype,attr,omitempty"`
	DurAttr           *STTLTime                  `xml:"dur,attr,omitempty"`
	RepeatCountAttr   *STTLTime                  `xml:"repeatCount,attr,omitempty"`
	RepeatDurAttr     *STTLTime                  `xml:"repeatDur,attr,omitempty"`
	SpdAttr           *STPercentage              `xml:"spd,attr,omitempty"`
	AccelAttr         *STPositiveFixedPercentage `xml:"accel,attr,omitempty"`
	DecelAttr         *STPositiveFixedPercentage `xml:"decel,attr,omitempty"`
	AutoRevAttr       bool                       `xml:"autoRev,attr,omitempty"`
	RestartAttr       string                     `xml:"restart,attr,omitempty"`
	FillAttr          string                     `xml:"fill,attr,omitempty"`
	SyncBehaviorAttr  string                     `xml:"syncBehavior,attr,omitempty"`
	TmFilterAttr      string                     `xml:"tmFilter,attr,omitempty"`
	EvtFilterAttr     string                     `xml:"evtFilter,attr,omitempty"`
	DisplayAttr       bool                       `xml:"display,attr,omitempty"`
	MasterRelAttr     string                     `xml:"masterRel,attr,omitempty"`
	BldLvlAttr        int                        `xml:"bldLvl,attr,omitempty"`
	GrpIdAttr         uint32                     `xml:"grpId,attr,omitempty"`
	AfterEffectAttr   bool                       `xml:"afterEffect,attr,omitempty"`
	NodeTypeAttr      string                     `xml:"nodeType,attr,omitempty"`
	NodePhAttr        bool                       `xml:"nodePh,attr,omitempty"`
	StCondLst         *CTTLTimeConditionList     `xml:"stCondLst"`
	EndCondLst        *CTTLTimeConditionList     `xml:"endCondLst"`
	EndSync           *CTTLTimeCondition         `xml:"endSync"`
	Iterate           *CTTLIterateData           `xml:"iterate"`
	ChildTnLst        *CTTimeNodeList            `xml:"childTnLst"`
	SubTnLst          *CTTimeNodeList            `xml:"subTnLst"`
}

// CTTLTimeNodeParallel ...
type CTTLTimeNodeParallel struct {
	XMLName xml.Name                `xml:"CT_TLTimeNodeParallel"`
	CTn     *CTTLCommonTimeNodeData `xml:"cTn"`
}

// STTLNextActionType ...
type STTLNextActionType string

const (
	STTLNextActionType_none STTLNextActionType = "none"
	STTLNextActionType_seek STTLNextActionType = "seek"
)

// STTLPreviousActionType ...
type STTLPreviousActionType string

const (
	STTLPreviousActionType_none      STTLPreviousActionType = "none"
	STTLPreviousActionType_skipTimed STTLPreviousActionType = "skipTimed"
)

// CTTLTimeNodeSequence ...
type CTTLTimeNodeSequence struct {
	XMLName        xml.Name                `xml:"CT_TLTimeNodeSequence"`
	ConcurrentAttr bool                    `xml:"concurrent,attr,omitempty"`
	PrevAcAttr     string                  `xml:"prevAc,attr,omitempty"`
	NextAcAttr     string                  `xml:"nextAc,attr,omitempty"`
	CTn            *CTTLCommonTimeNodeData `xml:"cTn"`
	PrevCondLst    *CTTLTimeConditionList  `xml:"prevCondLst"`
	NextCondLst    *CTTLTimeConditionList  `xml:"nextCondLst"`
}

// CTTLTimeNodeExclusive ...
type CTTLTimeNodeExclusive struct {
	XMLName xml.Name                `xml:"CT_TLTimeNodeExclusive"`
	CTn     *CTTLCommonTimeNodeData `xml:"cTn"`
}

// CTTLBehaviorAttributeNameList ...
type CTTLBehaviorAttributeNameList struct {
	XMLName  xml.Name `xml:"CT_TLBehaviorAttributeNameList"`
	AttrName []string `xml:"attrName"`
}

// STTLBehaviorAdditiveType ...
type STTLBehaviorAdditiveType string

const (
	STTLBehaviorAdditiveType_base STTLBehaviorAdditiveType = "base"
	STTLBehaviorAdditiveType_sum  STTLBehaviorAdditiveType = "sum"
	STTLBehaviorAdditiveType_repl STTLBehaviorAdditiveType = "repl"
	STTLBehaviorAdditiveType_mult STTLBehaviorAdditiveType = "mult"
	STTLBehaviorAdditiveType_none STTLBehaviorAdditiveType = "none"
)

// STTLBehaviorAccumulateType ...
type STTLBehaviorAccumulateType string

const (
	STTLBehaviorAccumulateType_none   STTLBehaviorAccumulateType = "none"
	STTLBehaviorAccumulateType_always STTLBehaviorAccumulateType = "always"
)

// STTLBehaviorTransformType ...
type STTLBehaviorTransformType string

const (
	STTLBehaviorTransformType_pt  STTLBehaviorTransformType = "pt"
	STTLBehaviorTransformType_img STTLBehaviorTransformType = "img"
)

// STTLBehaviorOverrideType ...
type STTLBehaviorOverrideType string

const (
	STTLBehaviorOverrideType_normal     STTLBehaviorOverrideType = "normal"
	STTLBehaviorOverrideType_childStyle STTLBehaviorOverrideType = "childStyle"
)

// CTTLCommonBehaviorData ...
type CTTLCommonBehaviorData struct {
	XMLName        xml.Name                       `xml:"CT_TLCommonBehaviorData"`
	AdditiveAttr   string                         `xml:"additive,attr,omitempty"`
	AccumulateAttr string                         `xml:"accumulate,attr,omitempty"`
	XfrmTypeAttr   string                         `xml:"xfrmType,attr,omitempty"`
	FromAttr       string                         `xml:"from,attr,omitempty"`
	ToAttr         string                         `xml:"to,attr,omitempty"`
	ByAttr         string                         `xml:"by,attr,omitempty"`
	RctxAttr       string                         `xml:"rctx,attr,omitempty"`
	OverrideAttr   string                         `xml:"override,attr,omitempty"`
	CTn            *CTTLCommonTimeNodeData        `xml:"cTn"`
	TgtEl          *CTTLTimeTargetElement         `xml:"tgtEl"`
	AttrNameLst    *CTTLBehaviorAttributeNameList `xml:"attrNameLst"`
}

// CTTLAnimVariantBooleanVal ...
type CTTLAnimVariantBooleanVal struct {
	XMLName xml.Name `xml:"CT_TLAnimVariantBooleanVal"`
	ValAttr bool     `xml:"val,attr"`
}

// CTTLAnimVariantIntegerVal ...
type CTTLAnimVariantIntegerVal struct {
	XMLName xml.Name `xml:"CT_TLAnimVariantIntegerVal"`
	ValAttr int      `xml:"val,attr"`
}

// CTTLAnimVariantFloatVal ...
type CTTLAnimVariantFloatVal struct {
	XMLName xml.Name `xml:"CT_TLAnimVariantFloatVal"`
	ValAttr *Float   `xml:"val,attr"`
}

// CTTLAnimVariantStringVal ...
type CTTLAnimVariantStringVal struct {
	XMLName xml.Name `xml:"CT_TLAnimVariantStringVal"`
	ValAttr string   `xml:"val,attr"`
}

// CTTLAnimVariant ...
type CTTLAnimVariant struct {
	XMLName xml.Name                   `xml:"CT_TLAnimVariant"`
	BoolVal *CTTLAnimVariantBooleanVal `xml:"boolVal"`
	IntVal  *CTTLAnimVariantIntegerVal `xml:"intVal"`
	FltVal  *CTTLAnimVariantFloatVal   `xml:"fltVal"`
	StrVal  *CTTLAnimVariantStringVal  `xml:"strVal"`
	ClrVal  *CTColor                   `xml:"clrVal"`
}

// STTLTimeAnimateValueTime ...
type STTLTimeAnimateValueTime struct {
	XMLName                   xml.Name `xml:"ST_TLTimeAnimateValueTime"`
	STTLTimeIndefinite        string
	STPositiveFixedPercentage *STPositiveFixedPercentage
}

// CTTLTimeAnimateValue ...
type CTTLTimeAnimateValue struct {
	XMLName  xml.Name                  `xml:"CT_TLTimeAnimateValue"`
	TmAttr   *STTLTimeAnimateValueTime `xml:"tm,attr,omitempty"`
	FmlaAttr string                    `xml:"fmla,attr,omitempty"`
	Val      *CTTLAnimVariant          `xml:"val"`
}

// CTTLTimeAnimateValueList ...
type CTTLTimeAnimateValueList struct {
	XMLName xml.Name                `xml:"CT_TLTimeAnimateValueList"`
	Tav     []*CTTLTimeAnimateValue `xml:"tav"`
}

// STTLAnimateBehaviorCalcMode ...
type STTLAnimateBehaviorCalcMode string

const (
	STTLAnimateBehaviorCalcMode_discrete STTLAnimateBehaviorCalcMode = "discrete"
	STTLAnimateBehaviorCalcMode_lin      STTLAnimateBehaviorCalcMode = "lin"
	STTLAnimateBehaviorCalcMode_fmla     STTLAnimateBehaviorCalcMode = "fmla"
)

// STTLAnimateBehaviorValueType ...
type STTLAnimateBehaviorValueType string

const (
	STTLAnimateBehaviorValueType_str STTLAnimateBehaviorValueType = "str"
	STTLAnimateBehaviorValueType_num STTLAnimateBehaviorValueType = "num"
	STTLAnimateBehaviorValueType_clr STTLAnimateBehaviorValueType = "clr"
)

// CTTLAnimateBehavior ...
type CTTLAnimateBehavior struct {
	XMLName       xml.Name                  `xml:"CT_TLAnimateBehavior"`
	ByAttr        string                    `xml:"by,attr,omitempty"`
	FromAttr      string                    `xml:"from,attr,omitempty"`
	ToAttr        string                    `xml:"to,attr,omitempty"`
	CalcmodeAttr  string                    `xml:"calcmode,attr,omitempty"`
	ValueTypeAttr string                    `xml:"valueType,attr,omitempty"`
	CBhvr         *CTTLCommonBehaviorData   `xml:"cBhvr"`
	TavLst        *CTTLTimeAnimateValueList `xml:"tavLst"`
}

// CTTLByRgbColorTransform ...
type CTTLByRgbColorTransform struct {
	XMLName xml.Name           `xml:"CT_TLByRgbColorTransform"`
	RAttr   *STFixedPercentage `xml:"r,attr"`
	GAttr   *STFixedPercentage `xml:"g,attr"`
	BAttr   *STFixedPercentage `xml:"b,attr"`
}

// CTTLByHslColorTransform ...
type CTTLByHslColorTransform struct {
	XMLName xml.Name           `xml:"CT_TLByHslColorTransform"`
	HAttr   int                `xml:"h,attr"`
	SAttr   *STFixedPercentage `xml:"s,attr"`
	LAttr   *STFixedPercentage `xml:"l,attr"`
}

// CTTLByAnimateColorTransform ...
type CTTLByAnimateColorTransform struct {
	XMLName xml.Name                 `xml:"CT_TLByAnimateColorTransform"`
	Rgb     *CTTLByRgbColorTransform `xml:"rgb"`
	Hsl     *CTTLByHslColorTransform `xml:"hsl"`
}

// STTLAnimateColorSpace ...
type STTLAnimateColorSpace string

const (
	STTLAnimateColorSpace_rgb STTLAnimateColorSpace = "rgb"
	STTLAnimateColorSpace_hsl STTLAnimateColorSpace = "hsl"
)

// STTLAnimateColorDirection ...
type STTLAnimateColorDirection string

const (
	STTLAnimateColorDirection_cw  STTLAnimateColorDirection = "cw"
	STTLAnimateColorDirection_ccw STTLAnimateColorDirection = "ccw"
)

// CTTLAnimateColorBehavior ...
type CTTLAnimateColorBehavior struct {
	XMLName    xml.Name                     `xml:"CT_TLAnimateColorBehavior"`
	ClrSpcAttr string                       `xml:"clrSpc,attr,omitempty"`
	DirAttr    string                       `xml:"dir,attr,omitempty"`
	CBhvr      *CTTLCommonBehaviorData      `xml:"cBhvr"`
	By         *CTTLByAnimateColorTransform `xml:"by"`
	From       *CTColor                     `xml:"from"`
	To         *CTColor                     `xml:"to"`
}

// STTLAnimateEffectTransition ...
type STTLAnimateEffectTransition string

const (
	STTLAnimateEffectTransition_in   STTLAnimateEffectTransition = "in"
	STTLAnimateEffectTransition_out  STTLAnimateEffectTransition = "out"
	STTLAnimateEffectTransition_none STTLAnimateEffectTransition = "none"
)

// CTTLAnimateEffectBehavior ...
type CTTLAnimateEffectBehavior struct {
	XMLName        xml.Name                `xml:"CT_TLAnimateEffectBehavior"`
	TransitionAttr string                  `xml:"transition,attr,omitempty"`
	FilterAttr     string                  `xml:"filter,attr,omitempty"`
	PrLstAttr      string                  `xml:"prLst,attr,omitempty"`
	CBhvr          *CTTLCommonBehaviorData `xml:"cBhvr"`
	Progress       *CTTLAnimVariant        `xml:"progress"`
}

// STTLAnimateMotionBehaviorOrigin ...
type STTLAnimateMotionBehaviorOrigin string

const (
	STTLAnimateMotionBehaviorOrigin_parent STTLAnimateMotionBehaviorOrigin = "parent"
	STTLAnimateMotionBehaviorOrigin_layout STTLAnimateMotionBehaviorOrigin = "layout"
)

// STTLAnimateMotionPathEditMode ...
type STTLAnimateMotionPathEditMode string

const (
	STTLAnimateMotionPathEditMode_relative STTLAnimateMotionPathEditMode = "relative"
	STTLAnimateMotionPathEditMode_fixed    STTLAnimateMotionPathEditMode = "fixed"
)

// CTTLPoint ...
type CTTLPoint struct {
	XMLName xml.Name      `xml:"CT_TLPoint"`
	XAttr   *STPercentage `xml:"x,attr"`
	YAttr   *STPercentage `xml:"y,attr"`
}

// CTTLAnimateMotionBehavior ...
type CTTLAnimateMotionBehavior struct {
	XMLName          xml.Name                `xml:"CT_TLAnimateMotionBehavior"`
	OriginAttr       string                  `xml:"origin,attr,omitempty"`
	PathAttr         string                  `xml:"path,attr,omitempty"`
	PathEditModeAttr string                  `xml:"pathEditMode,attr,omitempty"`
	RAngAttr         int                     `xml:"rAng,attr,omitempty"`
	PtsTypesAttr     string                  `xml:"ptsTypes,attr,omitempty"`
	CBhvr            *CTTLCommonBehaviorData `xml:"cBhvr"`
	By               *CTTLPoint              `xml:"by"`
	From             *CTTLPoint              `xml:"from"`
	To               *CTTLPoint              `xml:"to"`
	RCtr             *CTTLPoint              `xml:"rCtr"`
}

// CTTLAnimateRotationBehavior ...
type CTTLAnimateRotationBehavior struct {
	XMLName  xml.Name                `xml:"CT_TLAnimateRotationBehavior"`
	ByAttr   int                     `xml:"by,attr,omitempty"`
	FromAttr int                     `xml:"from,attr,omitempty"`
	ToAttr   int                     `xml:"to,attr,omitempty"`
	CBhvr    *CTTLCommonBehaviorData `xml:"cBhvr"`
}

// CTTLAnimateScaleBehavior ...
type CTTLAnimateScaleBehavior struct {
	XMLName          xml.Name                `xml:"CT_TLAnimateScaleBehavior"`
	ZoomContentsAttr bool                    `xml:"zoomContents,attr,omitempty"`
	CBhvr            *CTTLCommonBehaviorData `xml:"cBhvr"`
	By               *CTTLPoint              `xml:"by"`
	From             *CTTLPoint              `xml:"from"`
	To               *CTTLPoint              `xml:"to"`
}

// STTLCommandType ...
type STTLCommandType string

const (
	STTLCommandType_evt  STTLCommandType = "evt"
	STTLCommandType_call STTLCommandType = "call"
	STTLCommandType_verb STTLCommandType = "verb"
)

// CTTLCommandBehavior ...
type CTTLCommandBehavior struct {
	XMLName  xml.Name                `xml:"CT_TLCommandBehavior"`
	TypeAttr string                  `xml:"type,attr,omitempty"`
	CmdAttr  string                  `xml:"cmd,attr,omitempty"`
	CBhvr    *CTTLCommonBehaviorData `xml:"cBhvr"`
}

// CTTLSetBehavior ...
type CTTLSetBehavior struct {
	XMLName xml.Name                `xml:"CT_TLSetBehavior"`
	CBhvr   *CTTLCommonBehaviorData `xml:"cBhvr"`
	To      *CTTLAnimVariant        `xml:"to"`
}

// CTTLCommonMediaNodeData ...
type CTTLCommonMediaNodeData struct {
	XMLName             xml.Name                   `xml:"CT_TLCommonMediaNodeData"`
	VolAttr             *STPositiveFixedPercentage `xml:"vol,attr,omitempty"`
	MuteAttr            bool                       `xml:"mute,attr,omitempty"`
	NumSldAttr          uint32                     `xml:"numSld,attr,omitempty"`
	ShowWhenStoppedAttr bool                       `xml:"showWhenStopped,attr,omitempty"`
	CTn                 *CTTLCommonTimeNodeData    `xml:"cTn"`
	TgtEl               *CTTLTimeTargetElement     `xml:"tgtEl"`
}

// CTTLMediaNodeAudio ...
type CTTLMediaNodeAudio struct {
	XMLName         xml.Name                 `xml:"CT_TLMediaNodeAudio"`
	IsNarrationAttr bool                     `xml:"isNarration,attr,omitempty"`
	CMediaNode      *CTTLCommonMediaNodeData `xml:"cMediaNode"`
}

// CTTLMediaNodeVideo ...
type CTTLMediaNodeVideo struct {
	XMLName      xml.Name                 `xml:"CT_TLMediaNodeVideo"`
	FullScrnAttr bool                     `xml:"fullScrn,attr,omitempty"`
	CMediaNode   *CTTLCommonMediaNodeData `xml:"cMediaNode"`
}

// AGTLBuild ...
type AGTLBuild struct {
	XMLName      xml.Name `xml:"AG_TLBuild"`
	SpidAttr     uint32   `xml:"spid,attr"`
	GrpIdAttr    uint32   `xml:"grpId,attr"`
	UiExpandAttr bool     `xml:"uiExpand,attr,omitempty"`
}

// CTTLTemplate ...
type CTTLTemplate struct {
	XMLName xml.Name        `xml:"CT_TLTemplate"`
	LvlAttr uint32          `xml:"lvl,attr,omitempty"`
	TnLst   *CTTimeNodeList `xml:"tnLst"`
}

// CTTLTemplateList ...
type CTTLTemplateList struct {
	XMLName xml.Name        `xml:"CT_TLTemplateList"`
	Tmpl    []*CTTLTemplate `xml:"tmpl"`
}

// STTLParaBuildType ...
type STTLParaBuildType string

const (
	STTLParaBuildType_allAtOnce STTLParaBuildType = "allAtOnce"
	STTLParaBuildType_p         STTLParaBuildType = "p"
	STTLParaBuildType_cust      STTLParaBuildType = "cust"
	STTLParaBuildType_whole     STTLParaBuildType = "whole"
)

// CTTLBuildParagraph ...
type CTTLBuildParagraph struct {
	XMLName              xml.Name `xml:"CT_TLBuildParagraph"`
	AGTLBuild            *AGTLBuild
	BuildAttr            string            `xml:"build,attr,omitempty"`
	BldLvlAttr           uint32            `xml:"bldLvl,attr,omitempty"`
	AnimBgAttr           bool              `xml:"animBg,attr,omitempty"`
	AutoUpdateAnimBgAttr bool              `xml:"autoUpdateAnimBg,attr,omitempty"`
	RevAttr              bool              `xml:"rev,attr,omitempty"`
	AdvAutoAttr          *STTLTime         `xml:"advAuto,attr,omitempty"`
	TmplLst              *CTTLTemplateList `xml:"tmplLst"`
}

// STTLDiagramBuildType ...
type STTLDiagramBuildType string

const (
	STTLDiagramBuildType_whole         STTLDiagramBuildType = "whole"
	STTLDiagramBuildType_depthByNode   STTLDiagramBuildType = "depthByNode"
	STTLDiagramBuildType_depthByBranch STTLDiagramBuildType = "depthByBranch"
	STTLDiagramBuildType_breadthByNode STTLDiagramBuildType = "breadthByNode"
	STTLDiagramBuildType_breadthByLvl  STTLDiagramBuildType = "breadthByLvl"
	STTLDiagramBuildType_cw            STTLDiagramBuildType = "cw"
	STTLDiagramBuildType_cwIn          STTLDiagramBuildType = "cwIn"
	STTLDiagramBuildType_cwOut         STTLDiagramBuildType = "cwOut"
	STTLDiagramBuildType_ccw           STTLDiagramBuildType = "ccw"
	STTLDiagramBuildType_ccwIn         STTLDiagramBuildType = "ccwIn"
	STTLDiagramBuildType_ccwOut        STTLDiagramBuildType = "ccwOut"
	STTLDiagramBuildType_inByRing      STTLDiagramBuildType = "inByRing"
	STTLDiagramBuildType_outByRing     STTLDiagramBuildType = "outByRing"
	STTLDiagramBuildType_up            STTLDiagramBuildType = "up"
	STTLDiagramBuildType_down          STTLDiagramBuildType = "down"
	STTLDiagramBuildType_allAtOnce     STTLDiagramBuildType = "allAtOnce"
	STTLDiagramBuildType_cust          STTLDiagramBuildType = "cust"
)

// CTTLBuildDiagram ...
type CTTLBuildDiagram struct {
	XMLName   xml.Name `xml:"CT_TLBuildDiagram"`
	AGTLBuild *AGTLBuild
	BldAttr   string `xml:"bld,attr,omitempty"`
}

// STTLOleChartBuildType ...
type STTLOleChartBuildType string

const (
	STTLOleChartBuildType_allAtOnce  STTLOleChartBuildType = "allAtOnce"
	STTLOleChartBuildType_series     STTLOleChartBuildType = "series"
	STTLOleChartBuildType_category   STTLOleChartBuildType = "category"
	STTLOleChartBuildType_seriesEl   STTLOleChartBuildType = "seriesEl"
	STTLOleChartBuildType_categoryEl STTLOleChartBuildType = "categoryEl"
)

// CTTLOleBuildChart ...
type CTTLOleBuildChart struct {
	XMLName    xml.Name `xml:"CT_TLOleBuildChart"`
	AGTLBuild  *AGTLBuild
	BldAttr    string `xml:"bld,attr,omitempty"`
	AnimBgAttr bool   `xml:"animBg,attr,omitempty"`
}

// CTTLGraphicalObjectBuild ...
type CTTLGraphicalObjectBuild struct {
	XMLName   xml.Name `xml:"CT_TLGraphicalObjectBuild"`
	AGTLBuild *AGTLBuild
	BldAsOne  *CTEmpty                                   `xml:"bldAsOne"`
	BldSub    *CTAnimationGraphicalObjectBuildProperties `xml:"bldSub"`
}

// CTBuildList ...
type CTBuildList struct {
	XMLName     xml.Name                  `xml:"CT_BuildList"`
	BldP        *CTTLBuildParagraph       `xml:"bldP"`
	BldDgm      *CTTLBuildDiagram         `xml:"bldDgm"`
	BldOleChart *CTTLOleBuildChart        `xml:"bldOleChart"`
	BldGraphic  *CTTLGraphicalObjectBuild `xml:"bldGraphic"`
}

// CTSlideTiming ...
type CTSlideTiming struct {
	XMLName xml.Name               `xml:"CT_SlideTiming"`
	TnLst   *CTTimeNodeList        `xml:"tnLst"`
	BldLst  *CTBuildList           `xml:"bldLst"`
	ExtLst  *CTExtensionListModify `xml:"extLst"`
}

// CTEmpty ...
type CTEmpty struct {
	XMLName xml.Name `xml:"CT_Empty"`
}

// STName ...
type STName string

// STDirection ...
type STDirection string

const (
	STDirection_horz STDirection = "horz"
	STDirection_vert STDirection = "vert"
)

// STIndex ...
type STIndex uint32

// CTIndexRange ...
type CTIndexRange struct {
	XMLName xml.Name `xml:"CT_IndexRange"`
	StAttr  uint32   `xml:"st,attr"`
	EndAttr uint32   `xml:"end,attr"`
}

// CTSlideRelationshipListEntry ...
type CTSlideRelationshipListEntry struct {
	XMLName xml.Name `xml:"CT_SlideRelationshipListEntry"`
	RIdAttr string   `xml:"r:id,attr"`
}

// CTSlideRelationshipList ...
type CTSlideRelationshipList struct {
	XMLName xml.Name                        `xml:"CT_SlideRelationshipList"`
	Sld     []*CTSlideRelationshipListEntry `xml:"sld"`
}

// CTCustomShowId ...
type CTCustomShowId struct {
	XMLName xml.Name `xml:"CT_CustomShowId"`
	IdAttr  uint32   `xml:"id,attr"`
}

// EGSlideListChoice ...
type EGSlideListChoice struct {
	XMLName  xml.Name `xml:"EG_SlideListChoice"`
	SldAll   *CTEmpty
	SldRg    *CTIndexRange
	CustShow *CTCustomShowId
}

// CTCustomerData ...
type CTCustomerData struct {
	XMLName xml.Name `xml:"CT_CustomerData"`
	RIdAttr string   `xml:"r:id,attr"`
}

// CTTagsData ...
type CTTagsData struct {
	XMLName xml.Name `xml:"CT_TagsData"`
	RIdAttr string   `xml:"r:id,attr"`
}

// CTCustomerDataList ...
type CTCustomerDataList struct {
	XMLName  xml.Name          `xml:"CT_CustomerDataList"`
	CustData []*CTCustomerData `xml:"custData"`
	Tags     *CTTagsData       `xml:"tags"`
}

// CTExtension ...
type CTExtension struct {
	XMLName xml.Name `xml:"CT_Extension"`
	UriAttr string   `xml:"uri,attr"`
}

// EGExtensionList ...
type EGExtensionList struct {
	XMLName xml.Name `xml:"EG_ExtensionList"`
	Ext     []*CTExtension
}

// CTExtensionList ...
type CTExtensionList struct {
	XMLName         xml.Name `xml:"CT_ExtensionList"`
	EGExtensionList []*EGExtensionList
}

// CTExtensionListModify ...
type CTExtensionListModify struct {
	XMLName         xml.Name `xml:"CT_ExtensionListModify"`
	ModAttr         bool     `xml:"mod,attr,omitempty"`
	EGExtensionList []*EGExtensionList
}

// CTCommentAuthor ...
type CTCommentAuthor struct {
	XMLName      xml.Name         `xml:"CT_CommentAuthor"`
	IdAttr       uint32           `xml:"id,attr"`
	NameAttr     string           `xml:"name,attr"`
	InitialsAttr string           `xml:"initials,attr"`
	LastIdxAttr  uint32           `xml:"lastIdx,attr"`
	ClrIdxAttr   uint32           `xml:"clrIdx,attr"`
	ExtLst       *CTExtensionList `xml:"extLst"`
}

// CTCommentAuthorList ...
type CTCommentAuthorList struct {
	XMLName  xml.Name           `xml:"CT_CommentAuthorList"`
	CmAuthor []*CTCommentAuthor `xml:"cmAuthor"`
}

// CmAuthorLst ...
type CmAuthorLst *CTCommentAuthorList

// CTComment ...
type CTComment struct {
	XMLName      xml.Name               `xml:"CT_Comment"`
	AuthorIdAttr uint32                 `xml:"authorId,attr"`
	DtAttr       time.Time              `xml:"dt,attr,omitempty"`
	IdxAttr      uint32                 `xml:"idx,attr"`
	Pos          *CTPoint2D             `xml:"pos"`
	Text         string                 `xml:"text"`
	ExtLst       *CTExtensionListModify `xml:"extLst"`
}

// CTCommentList ...
type CTCommentList struct {
	XMLName xml.Name     `xml:"CT_CommentList"`
	Cm      []*CTComment `xml:"cm"`
}

// CmLst ...
type CmLst *CTCommentList

// AGOle ...
type AGOle struct {
	XMLName        xml.Name `xml:"AG_Ole"`
	SpidAttr       string   `xml:"spid,attr,omitempty"`
	NameAttr       string   `xml:"name,attr,omitempty"`
	ShowAsIconAttr bool     `xml:"showAsIcon,attr,omitempty"`
	RIdAttr        string   `xml:"r:id,attr,omitempty"`
	ImgWAttr       int      `xml:"imgW,attr,omitempty"`
	ImgHAttr       int      `xml:"imgH,attr,omitempty"`
}

// STOleObjectFollowColorScheme ...
type STOleObjectFollowColorScheme string

const (
	STOleObjectFollowColorScheme_none              STOleObjectFollowColorScheme = "none"
	STOleObjectFollowColorScheme_full              STOleObjectFollowColorScheme = "full"
	STOleObjectFollowColorScheme_textAndBackground STOleObjectFollowColorScheme = "textAndBackground"
)

// CTOleObjectEmbed ...
type CTOleObjectEmbed struct {
	XMLName               xml.Name         `xml:"CT_OleObjectEmbed"`
	FollowColorSchemeAttr string           `xml:"followColorScheme,attr,omitempty"`
	ExtLst                *CTExtensionList `xml:"extLst"`
}

// CTOleObjectLink ...
type CTOleObjectLink struct {
	XMLName             xml.Name         `xml:"CT_OleObjectLink"`
	UpdateAutomaticAttr bool             `xml:"updateAutomatic,attr,omitempty"`
	ExtLst              *CTExtensionList `xml:"extLst"`
}

// CTOleObject ...
type CTOleObject struct {
	XMLName    xml.Name `xml:"CT_OleObject"`
	AGOle      *AGOle
	ProgIdAttr string            `xml:"progId,attr,omitempty"`
	Embed      *CTOleObjectEmbed `xml:"embed"`
	Link       *CTOleObjectLink  `xml:"link"`
	Pic        *CTPicture        `xml:"pic"`
}

// OleObj ...
type OleObj *CTOleObject

// CTControl ...
type CTControl struct {
	XMLName xml.Name `xml:"CT_Control"`
	AGOle   *AGOle
	ExtLst  *CTExtensionList `xml:"extLst"`
	Pic     *CTPicture       `xml:"pic"`
}

// CTControlList ...
type CTControlList struct {
	XMLName xml.Name     `xml:"CT_ControlList"`
	Control []*CTControl `xml:"control"`
}

// STSlideId ...
type STSlideId uint32

// CTSlideIdListEntry ...
type CTSlideIdListEntry struct {
	XMLName xml.Name         `xml:"CT_SlideIdListEntry"`
	IdAttr  uint32           `xml:"id,attr"`
	RIdAttr string           `xml:"r:id,attr"`
	ExtLst  *CTExtensionList `xml:"extLst"`
}

// CTSlideIdList ...
type CTSlideIdList struct {
	XMLName xml.Name              `xml:"CT_SlideIdList"`
	SldId   []*CTSlideIdListEntry `xml:"sldId"`
}

// STSlideMasterId ...
type STSlideMasterId uint32

// CTSlideMasterIdListEntry ...
type CTSlideMasterIdListEntry struct {
	XMLName xml.Name         `xml:"CT_SlideMasterIdListEntry"`
	IdAttr  uint32           `xml:"id,attr,omitempty"`
	RIdAttr string           `xml:"r:id,attr"`
	ExtLst  *CTExtensionList `xml:"extLst"`
}

// CTSlideMasterIdList ...
type CTSlideMasterIdList struct {
	XMLName     xml.Name                    `xml:"CT_SlideMasterIdList"`
	SldMasterId []*CTSlideMasterIdListEntry `xml:"sldMasterId"`
}

// CTNotesMasterIdListEntry ...
type CTNotesMasterIdListEntry struct {
	XMLName xml.Name         `xml:"CT_NotesMasterIdListEntry"`
	RIdAttr string           `xml:"r:id,attr"`
	ExtLst  *CTExtensionList `xml:"extLst"`
}

// CTNotesMasterIdList ...
type CTNotesMasterIdList struct {
	XMLName       xml.Name                  `xml:"CT_NotesMasterIdList"`
	NotesMasterId *CTNotesMasterIdListEntry `xml:"notesMasterId"`
}

// CTHandoutMasterIdListEntry ...
type CTHandoutMasterIdListEntry struct {
	XMLName xml.Name         `xml:"CT_HandoutMasterIdListEntry"`
	RIdAttr string           `xml:"r:id,attr"`
	ExtLst  *CTExtensionList `xml:"extLst"`
}

// CTHandoutMasterIdList ...
type CTHandoutMasterIdList struct {
	XMLName         xml.Name                    `xml:"CT_HandoutMasterIdList"`
	HandoutMasterId *CTHandoutMasterIdListEntry `xml:"handoutMasterId"`
}

// CTEmbeddedFontDataId ...
type CTEmbeddedFontDataId struct {
	XMLName xml.Name `xml:"CT_EmbeddedFontDataId"`
	RIdAttr string   `xml:"r:id,attr"`
}

// CTEmbeddedFontListEntry ...
type CTEmbeddedFontListEntry struct {
	XMLName    xml.Name              `xml:"CT_EmbeddedFontListEntry"`
	Font       *CTTextFont           `xml:"font"`
	Regular    *CTEmbeddedFontDataId `xml:"regular"`
	Bold       *CTEmbeddedFontDataId `xml:"bold"`
	Italic     *CTEmbeddedFontDataId `xml:"italic"`
	BoldItalic *CTEmbeddedFontDataId `xml:"boldItalic"`
}

// CTEmbeddedFontList ...
type CTEmbeddedFontList struct {
	XMLName      xml.Name                   `xml:"CT_EmbeddedFontList"`
	EmbeddedFont []*CTEmbeddedFontListEntry `xml:"embeddedFont"`
}

// CTSmartTags ...
type CTSmartTags struct {
	XMLName xml.Name `xml:"CT_SmartTags"`
	RIdAttr string   `xml:"r:id,attr"`
}

// CTCustomShow ...
type CTCustomShow struct {
	XMLName  xml.Name                 `xml:"CT_CustomShow"`
	NameAttr string                   `xml:"name,attr"`
	IdAttr   uint32                   `xml:"id,attr"`
	SldLst   *CTSlideRelationshipList `xml:"sldLst"`
	ExtLst   *CTExtensionList         `xml:"extLst"`
}

// CTCustomShowList ...
type CTCustomShowList struct {
	XMLName  xml.Name        `xml:"CT_CustomShowList"`
	CustShow []*CTCustomShow `xml:"custShow"`
}

// STPhotoAlbumLayout ...
type STPhotoAlbumLayout string

const (
	STPhotoAlbumLayout_fitToSlide STPhotoAlbumLayout = "fitToSlide"
	STPhotoAlbumLayout_1pic       STPhotoAlbumLayout = "1pic"
	STPhotoAlbumLayout_2pic       STPhotoAlbumLayout = "2pic"
	STPhotoAlbumLayout_4pic       STPhotoAlbumLayout = "4pic"
	STPhotoAlbumLayout_1picTitle  STPhotoAlbumLayout = "1picTitle"
	STPhotoAlbumLayout_2picTitle  STPhotoAlbumLayout = "2picTitle"
	STPhotoAlbumLayout_4picTitle  STPhotoAlbumLayout = "4picTitle"
)

// STPhotoAlbumFrameShape ...
type STPhotoAlbumFrameShape string

const (
	STPhotoAlbumFrameShape_frameStyle1 STPhotoAlbumFrameShape = "frameStyle1"
	STPhotoAlbumFrameShape_frameStyle2 STPhotoAlbumFrameShape = "frameStyle2"
	STPhotoAlbumFrameShape_frameStyle3 STPhotoAlbumFrameShape = "frameStyle3"
	STPhotoAlbumFrameShape_frameStyle4 STPhotoAlbumFrameShape = "frameStyle4"
	STPhotoAlbumFrameShape_frameStyle5 STPhotoAlbumFrameShape = "frameStyle5"
	STPhotoAlbumFrameShape_frameStyle6 STPhotoAlbumFrameShape = "frameStyle6"
	STPhotoAlbumFrameShape_frameStyle7 STPhotoAlbumFrameShape = "frameStyle7"
)

// CTPhotoAlbum ...
type CTPhotoAlbum struct {
	XMLName          xml.Name         `xml:"CT_PhotoAlbum"`
	BwAttr           bool             `xml:"bw,attr,omitempty"`
	ShowCaptionsAttr bool             `xml:"showCaptions,attr,omitempty"`
	LayoutAttr       string           `xml:"layout,attr,omitempty"`
	FrameAttr        string           `xml:"frame,attr,omitempty"`
	ExtLst           *CTExtensionList `xml:"extLst"`
}

// STSlideSizeCoordinate ...
type STSlideSizeCoordinate int

// STSlideSizeType ...
type STSlideSizeType string

const (
	STSlideSizeType_screen4x3   STSlideSizeType = "screen4x3"
	STSlideSizeType_letter      STSlideSizeType = "letter"
	STSlideSizeType_A4          STSlideSizeType = "A4"
	STSlideSizeType_35mm        STSlideSizeType = "35mm"
	STSlideSizeType_overhead    STSlideSizeType = "overhead"
	STSlideSizeType_banner      STSlideSizeType = "banner"
	STSlideSizeType_custom      STSlideSizeType = "custom"
	STSlideSizeType_ledger      STSlideSizeType = "ledger"
	STSlideSizeType_A3          STSlideSizeType = "A3"
	STSlideSizeType_B4ISO       STSlideSizeType = "B4ISO"
	STSlideSizeType_B5ISO       STSlideSizeType = "B5ISO"
	STSlideSizeType_B4JIS       STSlideSizeType = "B4JIS"
	STSlideSizeType_B5JIS       STSlideSizeType = "B5JIS"
	STSlideSizeType_hagakiCard  STSlideSizeType = "hagakiCard"
	STSlideSizeType_screen16x9  STSlideSizeType = "screen16x9"
	STSlideSizeType_screen16x10 STSlideSizeType = "screen16x10"
)

// CTSlideSize ...
type CTSlideSize struct {
	XMLName  xml.Name `xml:"CT_SlideSize"`
	CxAttr   int      `xml:"cx,attr"`
	CyAttr   int      `xml:"cy,attr"`
	TypeAttr string   `xml:"type,attr,omitempty"`
}

// CTKinsoku ...
type CTKinsoku struct {
	XMLName           xml.Name `xml:"CT_Kinsoku"`
	LangAttr          string   `xml:"lang,attr,omitempty"`
	InvalStCharsAttr  string   `xml:"invalStChars,attr"`
	InvalEndCharsAttr string   `xml:"invalEndChars,attr"`
}

// STBookmarkIdSeed ...
type STBookmarkIdSeed uint32

// CTModifyVerifier ...
type CTModifyVerifier struct {
	XMLName                        xml.Name `xml:"CT_ModifyVerifier"`
	AlgorithmNameAttr              string   `xml:"algorithmName,attr,omitempty"`
	HashValueAttr                  []byte   `xml:"hashValue,attr,omitempty"`
	SaltValueAttr                  []byte   `xml:"saltValue,attr,omitempty"`
	SpinValueAttr                  uint32   `xml:"spinValue,attr,omitempty"`
	CryptProviderTypeAttr          string   `xml:"cryptProviderType,attr,omitempty"`
	CryptAlgorithmClassAttr        string   `xml:"cryptAlgorithmClass,attr,omitempty"`
	CryptAlgorithmTypeAttr         string   `xml:"cryptAlgorithmType,attr,omitempty"`
	CryptAlgorithmSidAttr          uint32   `xml:"cryptAlgorithmSid,attr,omitempty"`
	SpinCountAttr                  uint32   `xml:"spinCount,attr,omitempty"`
	SaltDataAttr                   []byte   `xml:"saltData,attr,omitempty"`
	HashDataAttr                   []byte   `xml:"hashData,attr,omitempty"`
	CryptProviderAttr              string   `xml:"cryptProvider,attr,omitempty"`
	AlgIdExtAttr                   uint32   `xml:"algIdExt,attr,omitempty"`
	AlgIdExtSourceAttr             string   `xml:"algIdExtSource,attr,omitempty"`
	CryptProviderTypeExtAttr       uint32   `xml:"cryptProviderTypeExt,attr,omitempty"`
	CryptProviderTypeExtSourceAttr string   `xml:"cryptProviderTypeExtSource,attr,omitempty"`
}

// CTPresentation ...
type CTPresentation struct {
	XMLName                      xml.Name               `xml:"CT_Presentation"`
	ServerZoomAttr               *STPercentage          `xml:"serverZoom,attr,omitempty"`
	FirstSlideNumAttr            int                    `xml:"firstSlideNum,attr,omitempty"`
	ShowSpecialPlsOnTitleSldAttr bool                   `xml:"showSpecialPlsOnTitleSld,attr,omitempty"`
	RtlAttr                      bool                   `xml:"rtl,attr,omitempty"`
	RemovePersonalInfoOnSaveAttr bool                   `xml:"removePersonalInfoOnSave,attr,omitempty"`
	CompatModeAttr               bool                   `xml:"compatMode,attr,omitempty"`
	StrictFirstAndLastCharsAttr  bool                   `xml:"strictFirstAndLastChars,attr,omitempty"`
	EmbedTrueTypeFontsAttr       bool                   `xml:"embedTrueTypeFonts,attr,omitempty"`
	SaveSubsetFontsAttr          bool                   `xml:"saveSubsetFonts,attr,omitempty"`
	AutoCompressPicturesAttr     bool                   `xml:"autoCompressPictures,attr,omitempty"`
	BookmarkIdSeedAttr           uint32                 `xml:"bookmarkIdSeed,attr,omitempty"`
	ConformanceAttr              string                 `xml:"conformance,attr,omitempty"`
	SldMasterIdLst               *CTSlideMasterIdList   `xml:"sldMasterIdLst"`
	NotesMasterIdLst             *CTNotesMasterIdList   `xml:"notesMasterIdLst"`
	HandoutMasterIdLst           *CTHandoutMasterIdList `xml:"handoutMasterIdLst"`
	SldIdLst                     *CTSlideIdList         `xml:"sldIdLst"`
	SldSz                        *CTSlideSize           `xml:"sldSz"`
	NotesSz                      *CTPositiveSize2D      `xml:"notesSz"`
	SmartTags                    *CTSmartTags           `xml:"smartTags"`
	EmbeddedFontLst              *CTEmbeddedFontList    `xml:"embeddedFontLst"`
	CustShowLst                  *CTCustomShowList      `xml:"custShowLst"`
	PhotoAlbum                   *CTPhotoAlbum          `xml:"photoAlbum"`
	CustDataLst                  *CTCustomerDataList    `xml:"custDataLst"`
	Kinsoku                      *CTKinsoku             `xml:"kinsoku"`
	DefaultTextStyle             *CTTextListStyle       `xml:"defaultTextStyle"`
	ModifyVerifier               *CTModifyVerifier      `xml:"modifyVerifier"`
	ExtLst                       *CTExtensionList       `xml:"extLst"`
}

// Presentation ...
type Presentation *CTPresentation

// CTHtmlPublishProperties ...
type CTHtmlPublishProperties struct {
	XMLName              xml.Name `xml:"CT_HtmlPublishProperties"`
	ShowSpeakerNotesAttr bool     `xml:"showSpeakerNotes,attr,omitempty"`
	TargetAttr           string   `xml:"target,attr,omitempty"`
	TitleAttr            string   `xml:"title,attr,omitempty"`
	RIdAttr              string   `xml:"r:id,attr"`
	EGSlideListChoice    []*EGSlideListChoice
	ExtLst               *CTExtensionList `xml:"extLst"`
}

// STWebColorType ...
type STWebColorType string

const (
	STWebColorType_none               STWebColorType = "none"
	STWebColorType_browser            STWebColorType = "browser"
	STWebColorType_presentationText   STWebColorType = "presentationText"
	STWebColorType_presentationAccent STWebColorType = "presentationAccent"
	STWebColorType_whiteTextOnBlack   STWebColorType = "whiteTextOnBlack"
	STWebColorType_blackTextOnWhite   STWebColorType = "blackTextOnWhite"
)

// STWebScreenSize ...
type STWebScreenSize string

const (
	STWebScreenSize_544x376   STWebScreenSize = "544x376"
	STWebScreenSize_640x480   STWebScreenSize = "640x480"
	STWebScreenSize_720x512   STWebScreenSize = "720x512"
	STWebScreenSize_800x600   STWebScreenSize = "800x600"
	STWebScreenSize_1024x768  STWebScreenSize = "1024x768"
	STWebScreenSize_1152x882  STWebScreenSize = "1152x882"
	STWebScreenSize_1152x900  STWebScreenSize = "1152x900"
	STWebScreenSize_1280x1024 STWebScreenSize = "1280x1024"
	STWebScreenSize_1600x1200 STWebScreenSize = "1600x1200"
	STWebScreenSize_1800x1400 STWebScreenSize = "1800x1400"
	STWebScreenSize_1920x1200 STWebScreenSize = "1920x1200"
)

// STWebEncoding ...
type STWebEncoding string

// CTWebProperties ...
type CTWebProperties struct {
	XMLName               xml.Name         `xml:"CT_WebProperties"`
	ShowAnimationAttr     bool             `xml:"showAnimation,attr,omitempty"`
	ResizeGraphicsAttr    bool             `xml:"resizeGraphics,attr,omitempty"`
	AllowPngAttr          bool             `xml:"allowPng,attr,omitempty"`
	RelyOnVmlAttr         bool             `xml:"relyOnVml,attr,omitempty"`
	OrganizeInFoldersAttr bool             `xml:"organizeInFolders,attr,omitempty"`
	UseLongFilenamesAttr  bool             `xml:"useLongFilenames,attr,omitempty"`
	ImgSzAttr             string           `xml:"imgSz,attr,omitempty"`
	EncodingAttr          string           `xml:"encoding,attr,omitempty"`
	ClrAttr               string           `xml:"clr,attr,omitempty"`
	ExtLst                *CTExtensionList `xml:"extLst"`
}

// STPrintWhat ...
type STPrintWhat string

const (
	STPrintWhat_slides    STPrintWhat = "slides"
	STPrintWhat_handouts1 STPrintWhat = "handouts1"
	STPrintWhat_handouts2 STPrintWhat = "handouts2"
	STPrintWhat_handouts3 STPrintWhat = "handouts3"
	STPrintWhat_handouts4 STPrintWhat = "handouts4"
	STPrintWhat_handouts6 STPrintWhat = "handouts6"
	STPrintWhat_handouts9 STPrintWhat = "handouts9"
	STPrintWhat_notes     STPrintWhat = "notes"
	STPrintWhat_outline   STPrintWhat = "outline"
)

// STPrintColorMode ...
type STPrintColorMode string

const (
	STPrintColorMode_bw   STPrintColorMode = "bw"
	STPrintColorMode_gray STPrintColorMode = "gray"
	STPrintColorMode_clr  STPrintColorMode = "clr"
)

// CTPrintProperties ...
type CTPrintProperties struct {
	XMLName             xml.Name         `xml:"CT_PrintProperties"`
	PrnWhatAttr         string           `xml:"prnWhat,attr,omitempty"`
	ClrModeAttr         string           `xml:"clrMode,attr,omitempty"`
	HiddenSlidesAttr    bool             `xml:"hiddenSlides,attr,omitempty"`
	ScaleToFitPaperAttr bool             `xml:"scaleToFitPaper,attr,omitempty"`
	FrameSlidesAttr     bool             `xml:"frameSlides,attr,omitempty"`
	ExtLst              *CTExtensionList `xml:"extLst"`
}

// CTShowInfoBrowse ...
type CTShowInfoBrowse struct {
	XMLName           xml.Name `xml:"CT_ShowInfoBrowse"`
	ShowScrollbarAttr bool     `xml:"showScrollbar,attr,omitempty"`
}

// CTShowInfoKiosk ...
type CTShowInfoKiosk struct {
	XMLName     xml.Name `xml:"CT_ShowInfoKiosk"`
	RestartAttr uint32   `xml:"restart,attr,omitempty"`
}

// EGShowType ...
type EGShowType struct {
	XMLName xml.Name `xml:"EG_ShowType"`
	Present *CTEmpty
	Browse  *CTShowInfoBrowse
	Kiosk   *CTShowInfoKiosk
}

// CTShowProperties ...
type CTShowProperties struct {
	XMLName           xml.Name `xml:"CT_ShowProperties"`
	LoopAttr          bool     `xml:"loop,attr,omitempty"`
	ShowNarrationAttr bool     `xml:"showNarration,attr,omitempty"`
	ShowAnimationAttr bool     `xml:"showAnimation,attr,omitempty"`
	UseTimingsAttr    bool     `xml:"useTimings,attr,omitempty"`
	EGShowType        []*EGShowType
	EGSlideListChoice []*EGSlideListChoice
	PenClr            *CTColor         `xml:"penClr"`
	ExtLst            *CTExtensionList `xml:"extLst"`
}

// CTPresentationProperties ...
type CTPresentationProperties struct {
	XMLName   xml.Name                 `xml:"CT_PresentationProperties"`
	HtmlPubPr *CTHtmlPublishProperties `xml:"htmlPubPr"`
	WebPr     *CTWebProperties         `xml:"webPr"`
	PrnPr     *CTPrintProperties       `xml:"prnPr"`
	ShowPr    *CTShowProperties        `xml:"showPr"`
	ClrMru    *CTColorMRU              `xml:"clrMru"`
	ExtLst    *CTExtensionList         `xml:"extLst"`
}

// PresentationPr ...
type PresentationPr *CTPresentationProperties

// CTHeaderFooter ...
type CTHeaderFooter struct {
	XMLName    xml.Name               `xml:"CT_HeaderFooter"`
	SldNumAttr bool                   `xml:"sldNum,attr,omitempty"`
	HdrAttr    bool                   `xml:"hdr,attr,omitempty"`
	FtrAttr    bool                   `xml:"ftr,attr,omitempty"`
	DtAttr     bool                   `xml:"dt,attr,omitempty"`
	ExtLst     *CTExtensionListModify `xml:"extLst"`
}

// STPlaceholderType ...
type STPlaceholderType string

const (
	STPlaceholderType_title    STPlaceholderType = "title"
	STPlaceholderType_body     STPlaceholderType = "body"
	STPlaceholderType_ctrTitle STPlaceholderType = "ctrTitle"
	STPlaceholderType_subTitle STPlaceholderType = "subTitle"
	STPlaceholderType_dt       STPlaceholderType = "dt"
	STPlaceholderType_sldNum   STPlaceholderType = "sldNum"
	STPlaceholderType_ftr      STPlaceholderType = "ftr"
	STPlaceholderType_hdr      STPlaceholderType = "hdr"
	STPlaceholderType_obj      STPlaceholderType = "obj"
	STPlaceholderType_chart    STPlaceholderType = "chart"
	STPlaceholderType_tbl      STPlaceholderType = "tbl"
	STPlaceholderType_clipArt  STPlaceholderType = "clipArt"
	STPlaceholderType_dgm      STPlaceholderType = "dgm"
	STPlaceholderType_media    STPlaceholderType = "media"
	STPlaceholderType_sldImg   STPlaceholderType = "sldImg"
	STPlaceholderType_pic      STPlaceholderType = "pic"
)

// STPlaceholderSize ...
type STPlaceholderSize string

const (
	STPlaceholderSize_full    STPlaceholderSize = "full"
	STPlaceholderSize_half    STPlaceholderSize = "half"
	STPlaceholderSize_quarter STPlaceholderSize = "quarter"
)

// CTPlaceholder ...
type CTPlaceholder struct {
	XMLName             xml.Name               `xml:"CT_Placeholder"`
	TypeAttr            string                 `xml:"type,attr,omitempty"`
	OrientAttr          string                 `xml:"orient,attr,omitempty"`
	SzAttr              string                 `xml:"sz,attr,omitempty"`
	IdxAttr             uint32                 `xml:"idx,attr,omitempty"`
	HasCustomPromptAttr bool                   `xml:"hasCustomPrompt,attr,omitempty"`
	ExtLst              *CTExtensionListModify `xml:"extLst"`
}

// CTApplicationNonVisualDrawingProps ...
type CTApplicationNonVisualDrawingProps struct {
	XMLName       xml.Name `xml:"CT_ApplicationNonVisualDrawingProps"`
	IsPhotoAttr   bool     `xml:"isPhoto,attr,omitempty"`
	UserDrawnAttr bool     `xml:"userDrawn,attr,omitempty"`
	AEGMedia      []*EGMedia
	Ph            *CTPlaceholder      `xml:"ph"`
	CustDataLst   *CTCustomerDataList `xml:"custDataLst"`
	ExtLst        *CTExtensionList    `xml:"extLst"`
}

// CTShapeNonVisual ...
type CTShapeNonVisual struct {
	XMLName xml.Name                            `xml:"CT_ShapeNonVisual"`
	CNvPr   *CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvSpPr *CTNonVisualDrawingShapeProps       `xml:"cNvSpPr"`
	NvPr    *CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTShape ...
type CTShape struct {
	XMLName       xml.Name               `xml:"CT_Shape"`
	UseBgFillAttr bool                   `xml:"useBgFill,attr,omitempty"`
	NvSpPr        *CTShapeNonVisual      `xml:"nvSpPr"`
	SpPr          *CTShapeProperties     `xml:"spPr"`
	Style         *CTShapeStyle          `xml:"style"`
	TxBody        *CTTextBody            `xml:"txBody"`
	ExtLst        *CTExtensionListModify `xml:"extLst"`
}

// CTConnectorNonVisual ...
type CTConnectorNonVisual struct {
	XMLName    xml.Name                            `xml:"CT_ConnectorNonVisual"`
	CNvPr      *CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvCxnSpPr *CTNonVisualConnectorProperties     `xml:"cNvCxnSpPr"`
	NvPr       *CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTConnector ...
type CTConnector struct {
	XMLName   xml.Name               `xml:"CT_Connector"`
	NvCxnSpPr *CTConnectorNonVisual  `xml:"nvCxnSpPr"`
	SpPr      *CTShapeProperties     `xml:"spPr"`
	Style     *CTShapeStyle          `xml:"style"`
	ExtLst    *CTExtensionListModify `xml:"extLst"`
}

// CTPictureNonVisual ...
type CTPictureNonVisual struct {
	XMLName  xml.Name                            `xml:"CT_PictureNonVisual"`
	CNvPr    *CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvPicPr *CTNonVisualPictureProperties       `xml:"cNvPicPr"`
	NvPr     *CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTPicture ...
type CTPicture struct {
	XMLName  xml.Name               `xml:"CT_Picture"`
	NvPicPr  *CTPictureNonVisual    `xml:"nvPicPr"`
	BlipFill *CTBlipFillProperties  `xml:"blipFill"`
	SpPr     *CTShapeProperties     `xml:"spPr"`
	Style    *CTShapeStyle          `xml:"style"`
	ExtLst   *CTExtensionListModify `xml:"extLst"`
}

// CTGraphicalObjectFrameNonVisual ...
type CTGraphicalObjectFrameNonVisual struct {
	XMLName           xml.Name                            `xml:"CT_GraphicalObjectFrameNonVisual"`
	CNvPr             *CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvGraphicFramePr *CTNonVisualGraphicFrameProperties  `xml:"cNvGraphicFramePr"`
	NvPr              *CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTGraphicalObjectFrame ...
type CTGraphicalObjectFrame struct {
	XMLName          xml.Name                         `xml:"CT_GraphicalObjectFrame"`
	BwModeAttr       string                           `xml:"bwMode,attr,omitempty"`
	NvGraphicFramePr *CTGraphicalObjectFrameNonVisual `xml:"nvGraphicFramePr"`
	Xfrm             *CTTransform2D                   `xml:"xfrm"`
	AGraphic         *CTGraphicalObject               `xml:"a:graphic"`
	ExtLst           *CTExtensionListModify           `xml:"extLst"`
}

// CTGroupShapeNonVisual ...
type CTGroupShapeNonVisual struct {
	XMLName    xml.Name                            `xml:"CT_GroupShapeNonVisual"`
	CNvPr      *CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvGrpSpPr *CTNonVisualGroupDrawingShapeProps  `xml:"cNvGrpSpPr"`
	NvPr       *CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTGroupShape ...
type CTGroupShape struct {
	XMLName      xml.Name                `xml:"CT_GroupShape"`
	NvGrpSpPr    *CTGroupShapeNonVisual  `xml:"nvGrpSpPr"`
	GrpSpPr      *CTGroupShapeProperties `xml:"grpSpPr"`
	Sp           *CTShape                `xml:"sp"`
	GrpSp        *CTGroupShape           `xml:"grpSp"`
	GraphicFrame *CTGraphicalObjectFrame `xml:"graphicFrame"`
	CxnSp        *CTConnector            `xml:"cxnSp"`
	Pic          *CTPicture              `xml:"pic"`
	ContentPart  *CTRel                  `xml:"contentPart"`
	ExtLst       *CTExtensionListModify  `xml:"extLst"`
}

// CTRel ...
type CTRel struct {
	XMLName xml.Name `xml:"CT_Rel"`
	RIdAttr string   `xml:"r:id,attr"`
}

// EGTopLevelSlide ...
type EGTopLevelSlide struct {
	XMLName xml.Name `xml:"EG_TopLevelSlide"`
	ClrMap  *CTColorMapping
}

// EGChildSlide ...
type EGChildSlide struct {
	XMLName   xml.Name `xml:"EG_ChildSlide"`
	ClrMapOvr *CTColorMappingOverride
}

// AGChildSlide ...
type AGChildSlide struct {
	XMLName              xml.Name `xml:"AG_ChildSlide"`
	ShowMasterSpAttr     bool     `xml:"showMasterSp,attr,omitempty"`
	ShowMasterPhAnimAttr bool     `xml:"showMasterPhAnim,attr,omitempty"`
}

// CTBackgroundProperties ...
type CTBackgroundProperties struct {
	XMLName             xml.Name `xml:"CT_BackgroundProperties"`
	ShadeToTitleAttr    bool     `xml:"shadeToTitle,attr,omitempty"`
	AEGFillProperties   []*EGFillProperties
	AEGEffectProperties []*EGEffectProperties
	ExtLst              *CTExtensionList `xml:"extLst"`
}

// EGBackground ...
type EGBackground struct {
	XMLName xml.Name `xml:"EG_Background"`
	BgPr    *CTBackgroundProperties
	BgRef   *CTStyleMatrixReference
}

// CTBackground ...
type CTBackground struct {
	XMLName      xml.Name `xml:"CT_Background"`
	BwModeAttr   string   `xml:"bwMode,attr,omitempty"`
	EGBackground *EGBackground
}

// CTCommonSlideData ...
type CTCommonSlideData struct {
	XMLName     xml.Name            `xml:"CT_CommonSlideData"`
	NameAttr    string              `xml:"name,attr,omitempty"`
	Bg          *CTBackground       `xml:"bg"`
	SpTree      *CTGroupShape       `xml:"spTree"`
	CustDataLst *CTCustomerDataList `xml:"custDataLst"`
	Controls    *CTControlList      `xml:"controls"`
	ExtLst      *CTExtensionList    `xml:"extLst"`
}

// CTSlide ...
type CTSlide struct {
	XMLName      xml.Name `xml:"CT_Slide"`
	AGChildSlide *AGChildSlide
	ShowAttr     bool `xml:"show,attr,omitempty"`
	EGChildSlide []*EGChildSlide
	CSld         *CTCommonSlideData     `xml:"cSld"`
	Transition   *CTSlideTransition     `xml:"transition"`
	Timing       *CTSlideTiming         `xml:"timing"`
	ExtLst       *CTExtensionListModify `xml:"extLst"`
}

// Sld ...
type Sld *CTSlide

// STSlideLayoutType ...
type STSlideLayoutType string

const (
	STSlideLayoutType_title                   STSlideLayoutType = "title"
	STSlideLayoutType_tx                      STSlideLayoutType = "tx"
	STSlideLayoutType_twoColTx                STSlideLayoutType = "twoColTx"
	STSlideLayoutType_tbl                     STSlideLayoutType = "tbl"
	STSlideLayoutType_txAndChart              STSlideLayoutType = "txAndChart"
	STSlideLayoutType_chartAndTx              STSlideLayoutType = "chartAndTx"
	STSlideLayoutType_dgm                     STSlideLayoutType = "dgm"
	STSlideLayoutType_chart                   STSlideLayoutType = "chart"
	STSlideLayoutType_txAndClipArt            STSlideLayoutType = "txAndClipArt"
	STSlideLayoutType_clipArtAndTx            STSlideLayoutType = "clipArtAndTx"
	STSlideLayoutType_titleOnly               STSlideLayoutType = "titleOnly"
	STSlideLayoutType_blank                   STSlideLayoutType = "blank"
	STSlideLayoutType_txAndObj                STSlideLayoutType = "txAndObj"
	STSlideLayoutType_objAndTx                STSlideLayoutType = "objAndTx"
	STSlideLayoutType_objOnly                 STSlideLayoutType = "objOnly"
	STSlideLayoutType_obj                     STSlideLayoutType = "obj"
	STSlideLayoutType_txAndMedia              STSlideLayoutType = "txAndMedia"
	STSlideLayoutType_mediaAndTx              STSlideLayoutType = "mediaAndTx"
	STSlideLayoutType_objOverTx               STSlideLayoutType = "objOverTx"
	STSlideLayoutType_txOverObj               STSlideLayoutType = "txOverObj"
	STSlideLayoutType_txAndTwoObj             STSlideLayoutType = "txAndTwoObj"
	STSlideLayoutType_twoObjAndTx             STSlideLayoutType = "twoObjAndTx"
	STSlideLayoutType_twoObjOverTx            STSlideLayoutType = "twoObjOverTx"
	STSlideLayoutType_fourObj                 STSlideLayoutType = "fourObj"
	STSlideLayoutType_vertTx                  STSlideLayoutType = "vertTx"
	STSlideLayoutType_clipArtAndVertTx        STSlideLayoutType = "clipArtAndVertTx"
	STSlideLayoutType_vertTitleAndTx          STSlideLayoutType = "vertTitleAndTx"
	STSlideLayoutType_vertTitleAndTxOverChart STSlideLayoutType = "vertTitleAndTxOverChart"
	STSlideLayoutType_twoObj                  STSlideLayoutType = "twoObj"
	STSlideLayoutType_objAndTwoObj            STSlideLayoutType = "objAndTwoObj"
	STSlideLayoutType_twoObjAndObj            STSlideLayoutType = "twoObjAndObj"
	STSlideLayoutType_cust                    STSlideLayoutType = "cust"
	STSlideLayoutType_secHead                 STSlideLayoutType = "secHead"
	STSlideLayoutType_twoTxTwoObj             STSlideLayoutType = "twoTxTwoObj"
	STSlideLayoutType_objTx                   STSlideLayoutType = "objTx"
	STSlideLayoutType_picTx                   STSlideLayoutType = "picTx"
)

// CTSlideLayout ...
type CTSlideLayout struct {
	XMLName          xml.Name `xml:"CT_SlideLayout"`
	AGChildSlide     *AGChildSlide
	MatchingNameAttr string `xml:"matchingName,attr,omitempty"`
	TypeAttr         string `xml:"type,attr,omitempty"`
	PreserveAttr     bool   `xml:"preserve,attr,omitempty"`
	UserDrawnAttr    bool   `xml:"userDrawn,attr,omitempty"`
	EGChildSlide     []*EGChildSlide
	CSld             *CTCommonSlideData     `xml:"cSld"`
	Transition       *CTSlideTransition     `xml:"transition"`
	Timing           *CTSlideTiming         `xml:"timing"`
	Hf               *CTHeaderFooter        `xml:"hf"`
	ExtLst           *CTExtensionListModify `xml:"extLst"`
}

// SldLayout ...
type SldLayout *CTSlideLayout

// CTSlideMasterTextStyles ...
type CTSlideMasterTextStyles struct {
	XMLName    xml.Name         `xml:"CT_SlideMasterTextStyles"`
	TitleStyle *CTTextListStyle `xml:"titleStyle"`
	BodyStyle  *CTTextListStyle `xml:"bodyStyle"`
	OtherStyle *CTTextListStyle `xml:"otherStyle"`
	ExtLst     *CTExtensionList `xml:"extLst"`
}

// STSlideLayoutId ...
type STSlideLayoutId uint32

// CTSlideLayoutIdListEntry ...
type CTSlideLayoutIdListEntry struct {
	XMLName xml.Name         `xml:"CT_SlideLayoutIdListEntry"`
	IdAttr  uint32           `xml:"id,attr,omitempty"`
	RIdAttr string           `xml:"r:id,attr"`
	ExtLst  *CTExtensionList `xml:"extLst"`
}

// CTSlideLayoutIdList ...
type CTSlideLayoutIdList struct {
	XMLName     xml.Name                    `xml:"CT_SlideLayoutIdList"`
	SldLayoutId []*CTSlideLayoutIdListEntry `xml:"sldLayoutId"`
}

// CTSlideMaster ...
type CTSlideMaster struct {
	XMLName         xml.Name `xml:"CT_SlideMaster"`
	PreserveAttr    bool     `xml:"preserve,attr,omitempty"`
	EGTopLevelSlide []*EGTopLevelSlide
	CSld            *CTCommonSlideData       `xml:"cSld"`
	SldLayoutIdLst  *CTSlideLayoutIdList     `xml:"sldLayoutIdLst"`
	Transition      *CTSlideTransition       `xml:"transition"`
	Timing          *CTSlideTiming           `xml:"timing"`
	Hf              *CTHeaderFooter          `xml:"hf"`
	TxStyles        *CTSlideMasterTextStyles `xml:"txStyles"`
	ExtLst          *CTExtensionListModify   `xml:"extLst"`
}

// SldMaster ...
type SldMaster *CTSlideMaster

// CTHandoutMaster ...
type CTHandoutMaster struct {
	XMLName         xml.Name `xml:"CT_HandoutMaster"`
	EGTopLevelSlide []*EGTopLevelSlide
	CSld            *CTCommonSlideData     `xml:"cSld"`
	Hf              *CTHeaderFooter        `xml:"hf"`
	ExtLst          *CTExtensionListModify `xml:"extLst"`
}

// HandoutMaster ...
type HandoutMaster *CTHandoutMaster

// CTNotesMaster ...
type CTNotesMaster struct {
	XMLName         xml.Name `xml:"CT_NotesMaster"`
	EGTopLevelSlide []*EGTopLevelSlide
	CSld            *CTCommonSlideData     `xml:"cSld"`
	Hf              *CTHeaderFooter        `xml:"hf"`
	NotesStyle      *CTTextListStyle       `xml:"notesStyle"`
	ExtLst          *CTExtensionListModify `xml:"extLst"`
}

// NotesMaster ...
type NotesMaster *CTNotesMaster

// CTNotesSlide ...
type CTNotesSlide struct {
	XMLName      xml.Name `xml:"CT_NotesSlide"`
	AGChildSlide *AGChildSlide
	EGChildSlide []*EGChildSlide
	CSld         *CTCommonSlideData     `xml:"cSld"`
	ExtLst       *CTExtensionListModify `xml:"extLst"`
}

// Notes ...
type Notes *CTNotesSlide

// CTSlideSyncProperties ...
type CTSlideSyncProperties struct {
	XMLName                   xml.Name         `xml:"CT_SlideSyncProperties"`
	ServerSldIdAttr           string           `xml:"serverSldId,attr"`
	ServerSldModifiedTimeAttr time.Time        `xml:"serverSldModifiedTime,attr"`
	ClientInsertedTimeAttr    time.Time        `xml:"clientInsertedTime,attr"`
	ExtLst                    *CTExtensionList `xml:"extLst"`
}

// SldSyncPr ...
type SldSyncPr *CTSlideSyncProperties

// CTStringTag ...
type CTStringTag struct {
	XMLName  xml.Name `xml:"CT_StringTag"`
	NameAttr string   `xml:"name,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTTagList ...
type CTTagList struct {
	XMLName xml.Name       `xml:"CT_TagList"`
	Tag     []*CTStringTag `xml:"tag"`
}

// TagLst ...
type TagLst *CTTagList

// STSplitterBarState ...
type STSplitterBarState string

const (
	STSplitterBarState_minimized STSplitterBarState = "minimized"
	STSplitterBarState_restored  STSplitterBarState = "restored"
	STSplitterBarState_maximized STSplitterBarState = "maximized"
)

// STViewType ...
type STViewType string

const (
	STViewType_sldView          STViewType = "sldView"
	STViewType_sldMasterView    STViewType = "sldMasterView"
	STViewType_notesView        STViewType = "notesView"
	STViewType_handoutView      STViewType = "handoutView"
	STViewType_notesMasterView  STViewType = "notesMasterView"
	STViewType_outlineView      STViewType = "outlineView"
	STViewType_sldSorterView    STViewType = "sldSorterView"
	STViewType_sldThumbnailView STViewType = "sldThumbnailView"
)

// CTNormalViewPortion ...
type CTNormalViewPortion struct {
	XMLName        xml.Name                   `xml:"CT_NormalViewPortion"`
	SzAttr         *STPositiveFixedPercentage `xml:"sz,attr"`
	AutoAdjustAttr bool                       `xml:"autoAdjust,attr,omitempty"`
}

// CTNormalViewProperties ...
type CTNormalViewProperties struct {
	XMLName              xml.Name             `xml:"CT_NormalViewProperties"`
	ShowOutlineIconsAttr bool                 `xml:"showOutlineIcons,attr,omitempty"`
	SnapVertSplitterAttr bool                 `xml:"snapVertSplitter,attr,omitempty"`
	VertBarStateAttr     string               `xml:"vertBarState,attr,omitempty"`
	HorzBarStateAttr     string               `xml:"horzBarState,attr,omitempty"`
	PreferSingleViewAttr bool                 `xml:"preferSingleView,attr,omitempty"`
	RestoredLeft         *CTNormalViewPortion `xml:"restoredLeft"`
	RestoredTop          *CTNormalViewPortion `xml:"restoredTop"`
	ExtLst               *CTExtensionList     `xml:"extLst"`
}

// CTCommonViewProperties ...
type CTCommonViewProperties struct {
	XMLName      xml.Name   `xml:"CT_CommonViewProperties"`
	VarScaleAttr bool       `xml:"varScale,attr,omitempty"`
	Scale        *CTScale2D `xml:"scale"`
	Origin       *CTPoint2D `xml:"origin"`
}

// CTNotesTextViewProperties ...
type CTNotesTextViewProperties struct {
	XMLName xml.Name                `xml:"CT_NotesTextViewProperties"`
	CViewPr *CTCommonViewProperties `xml:"cViewPr"`
	ExtLst  *CTExtensionList        `xml:"extLst"`
}

// CTOutlineViewSlideEntry ...
type CTOutlineViewSlideEntry struct {
	XMLName      xml.Name `xml:"CT_OutlineViewSlideEntry"`
	RIdAttr      string   `xml:"r:id,attr"`
	CollapseAttr bool     `xml:"collapse,attr,omitempty"`
}

// CTOutlineViewSlideList ...
type CTOutlineViewSlideList struct {
	XMLName xml.Name                   `xml:"CT_OutlineViewSlideList"`
	Sld     []*CTOutlineViewSlideEntry `xml:"sld"`
}

// CTOutlineViewProperties ...
type CTOutlineViewProperties struct {
	XMLName xml.Name                `xml:"CT_OutlineViewProperties"`
	CViewPr *CTCommonViewProperties `xml:"cViewPr"`
	SldLst  *CTOutlineViewSlideList `xml:"sldLst"`
	ExtLst  *CTExtensionList        `xml:"extLst"`
}

// CTSlideSorterViewProperties ...
type CTSlideSorterViewProperties struct {
	XMLName            xml.Name                `xml:"CT_SlideSorterViewProperties"`
	ShowFormattingAttr bool                    `xml:"showFormatting,attr,omitempty"`
	CViewPr            *CTCommonViewProperties `xml:"cViewPr"`
	ExtLst             *CTExtensionList        `xml:"extLst"`
}

// CTGuide ...
type CTGuide struct {
	XMLName    xml.Name        `xml:"CT_Guide"`
	OrientAttr string          `xml:"orient,attr,omitempty"`
	PosAttr    *STCoordinate32 `xml:"pos,attr,omitempty"`
}

// CTGuideList ...
type CTGuideList struct {
	XMLName xml.Name   `xml:"CT_GuideList"`
	Guide   []*CTGuide `xml:"guide"`
}

// CTCommonSlideViewProperties ...
type CTCommonSlideViewProperties struct {
	XMLName           xml.Name                `xml:"CT_CommonSlideViewProperties"`
	SnapToGridAttr    bool                    `xml:"snapToGrid,attr,omitempty"`
	SnapToObjectsAttr bool                    `xml:"snapToObjects,attr,omitempty"`
	ShowGuidesAttr    bool                    `xml:"showGuides,attr,omitempty"`
	CViewPr           *CTCommonViewProperties `xml:"cViewPr"`
	GuideLst          *CTGuideList            `xml:"guideLst"`
}

// CTSlideViewProperties ...
type CTSlideViewProperties struct {
	XMLName    xml.Name                     `xml:"CT_SlideViewProperties"`
	CSldViewPr *CTCommonSlideViewProperties `xml:"cSldViewPr"`
	ExtLst     *CTExtensionList             `xml:"extLst"`
}

// CTNotesViewProperties ...
type CTNotesViewProperties struct {
	XMLName    xml.Name                     `xml:"CT_NotesViewProperties"`
	CSldViewPr *CTCommonSlideViewProperties `xml:"cSldViewPr"`
	ExtLst     *CTExtensionList             `xml:"extLst"`
}

// CTViewProperties ...
type CTViewProperties struct {
	XMLName          xml.Name                     `xml:"CT_ViewProperties"`
	LastViewAttr     string                       `xml:"lastView,attr,omitempty"`
	ShowCommentsAttr bool                         `xml:"showComments,attr,omitempty"`
	NormalViewPr     *CTNormalViewProperties      `xml:"normalViewPr"`
	SlideViewPr      *CTSlideViewProperties       `xml:"slideViewPr"`
	OutlineViewPr    *CTOutlineViewProperties     `xml:"outlineViewPr"`
	NotesTextViewPr  *CTNotesTextViewProperties   `xml:"notesTextViewPr"`
	SorterViewPr     *CTSlideSorterViewProperties `xml:"sorterViewPr"`
	NotesViewPr      *CTNotesViewProperties       `xml:"notesViewPr"`
	GridSpacing      *CTPositiveSize2D            `xml:"gridSpacing"`
	ExtLst           *CTExtensionList             `xml:"extLst"`
}

// ViewPr ...
type ViewPr *CTViewProperties
